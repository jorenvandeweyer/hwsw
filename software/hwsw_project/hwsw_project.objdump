
hwsw_project.elf:     file format elf32-littlenios2
hwsw_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00004de8 memsz 0x00004de8 flags r-x
    LOAD off    0x00005e08 vaddr 0x00014e08 paddr 0x00015840 align 2**12
         filesz 0x00000a38 memsz 0x00000a38 flags rw-
    LOAD off    0x00007278 vaddr 0x00016278 paddr 0x00016278 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004bfc  000101c0  000101c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  00014dbc  00014dbc  00005dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a38  00014e08  00015840  00005e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00016278  00016278  00007278  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000163c8  000163c8  00006840  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00006840  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000009a8  00000000  00000000  00006868  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001543d  00000000  00000000  00007210  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005966  00000000  00000000  0001c64d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000063a0  00000000  00000000  00021fb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000013d0  00000000  00000000  00028354  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000020c0  00000000  00000000  00029724  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  0002b7e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00030230  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000638  00000000  00000000  00030260  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00032b26  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00032b29  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00032b35  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00032b36  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00032b37  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00032b42  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00032b4d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  00032b58  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000015  00000000  00000000  00032b5c  2**0
                  CONTENTS, READONLY
 26 .jdi          00004005  00000000  00000000  00032b71  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003cbcc  00000000  00000000  00036b76  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101c0 l    d  .text	00000000 .text
00014dbc l    d  .rodata	00000000 .rodata
00014e08 l    d  .rwdata	00000000 .rwdata
00016278 l    d  .bss	00000000 .bss
000163c8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hwsw_project_bsp//obj/HAL/src/crt0.o
00010208 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00010094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
000103b8 l     F .text	00000008 __fp_unlock
000103cc l     F .text	0000019c __sinit.part.1
00010568 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00014e08 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00013014 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00013120 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001314c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00013238 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00013318 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00013404 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000135d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00015830 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00013824 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013958 l     F .text	00000034 alt_dev_reg
000157dc l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00013c50 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00013d8c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00014200 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00014340 l     F .text	0000003c alt_get_errno
0001437c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00012e0c g     F .text	00000054 _isatty_r
00013514 g     F .text	0000007c alt_main
0001024c g     F .text	000000c0 _puts_r
000162c8 g     O .bss	00000100 alt_irq
00012b34 g     F .text	00000060 _lseek_r
00015840 g       *ABS*	00000000 __flash_rwdata_start
000163c8 g       *ABS*	00000000 __alt_heap_start
000120e8 g     F .text	0000005c __sseek
00010708 g     F .text	00000010 __sinit
00010570 g     F .text	00000068 __sfmoreglue
000135b4 g     F .text	00000024 __malloc_unlock
000117d4 g     F .text	0000015c memmove
000106f0 g     F .text	00000018 _cleanup
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012db0 g     F .text	0000005c _fstat_r
00016284 g     O .bss	00000004 errno
00012064 g     F .text	00000008 __seofread
0001628c g     O .bss	00000004 alt_argv
0001d808 g       *ABS*	00000000 _gp
0001565c g     O .rwdata	00000180 alt_fd_list
0001475c g     F .text	00000090 alt_find_dev
0001168c g     F .text	00000148 memcpy
000103c0 g     F .text	0000000c _cleanup_r
000142c4 g     F .text	0000007c alt_io_redirect
00014dbc g       *ABS*	00000000 __DTOR_END__
0001030c g     F .text	00000014 puts
00013ad0 g     F .text	000000ec altera_avalon_jtag_uart_read
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00012f58 g     F .text	00000064 .hidden __udivsi3
00013274 g     F .text	000000a4 isatty
00014998 g     F .text	00000090 alt_icache_flush
00016280 g     O .bss	00000004 __malloc_top_pad
00010758 g     F .text	000004bc __sfvwrite_r
00011fbc g     F .text	00000054 _sbrk_r
00012d50 g     F .text	00000060 _read_r
00015828 g     O .rwdata	00000004 alt_max_fd
00012354 g     F .text	000000f0 _fclose_r
000126d0 g     F .text	00000030 fflush
0001627c g     O .bss	00000004 __malloc_max_sbrked_mem
00013440 g     F .text	000000d4 lseek
00015808 g     O .rwdata	00000004 _global_impure_ptr
00011a58 g     F .text	00000564 _realloc_r
000163c8 g       *ABS*	00000000 __bss_end
00014110 g     F .text	000000f0 alt_iic_isr_register
00014630 g     F .text	00000108 alt_tick
00010728 g     F .text	00000018 __fp_lock_all
000140c4 g     F .text	0000004c alt_ic_irq_enabled
00014594 g     F .text	0000009c alt_alarm_stop
00016294 g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000d4 alt_irq_handler
00015634 g     O .rwdata	00000028 alt_dev_null
00013d44 g     F .text	00000048 alt_dcache_flush_all
00015840 g       *ABS*	00000000 __ram_rwdata_end
00015820 g     O .rwdata	00000008 alt_dev_list
00013860 g     F .text	000000f8 write
00014e08 g       *ABS*	00000000 __ram_rodata_end
00013188 g     F .text	000000b0 fstat
00012fbc g     F .text	00000058 .hidden __umodsi3
000163c8 g       *ABS*	00000000 end
00014dbc g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
00013cc8 g     F .text	0000007c alt_avalon_timer_sc_init
00013bbc g     F .text	00000094 altera_avalon_jtag_uart_write
00010718 g     F .text	00000004 __sfp_lock_acquire
000115a8 g     F .text	000000e4 memchr
00012824 g     F .text	00000310 _free_r
00014c08 g     F .text	00000180 __call_exitprocs
00015810 g     O .rwdata	00000004 __malloc_sbrk_base
000101c0 g     F .text	0000004c _start
00016298 g     O .bss	00000004 _alt_tick_rate
0001629c g     O .bss	00000004 _alt_nticks
00013614 g     F .text	000000fc read
000139c4 g     F .text	0000004c alt_sys_init
00014af0 g     F .text	00000118 __register_exitproc
00014e08 g       *ABS*	00000000 __ram_rwdata_start
00014dbc g       *ABS*	00000000 __ram_rodata_start
000162a0 g     O .bss	00000028 __malloc_current_mallinfo
00013a10 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000148f4 g     F .text	000000a4 alt_get_fd
00012300 g     F .text	00000054 _close_r
00014a74 g     F .text	0000007c memcmp
000163c8 g       *ABS*	00000000 __alt_stack_base
000121ac g     F .text	00000154 __swsetup_r
000105d8 g     F .text	00000118 __sfp
0001522c g     O .rwdata	00000408 __malloc_av_
00010724 g     F .text	00000004 __sinit_lock_release
00012010 g     F .text	00000054 __sread
000147ec g     F .text	00000108 alt_find_file
00013dc8 g     F .text	000000a4 alt_dev_llist_insert
00013590 g     F .text	00000024 __malloc_lock
00013774 g     F .text	000000b0 sbrk
00012674 g     F .text	0000005c _fflush_r
00016278 g       *ABS*	00000000 __bss_start
00011930 g     F .text	00000128 memset
0001020c g     F .text	00000040 main
00016290 g     O .bss	00000004 alt_envp
00016278 g     O .bss	00000004 __malloc_max_total_mem
00013a70 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00012144 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00012444 g     F .text	00000014 fclose
00010d9c g     F .text	0000080c _malloc_r
0001582c g     O .rwdata	00000004 alt_errno
00010c14 g     F .text	000000c4 _fwalk
00012e60 g     F .text	00000084 .hidden __divsi3
00012700 g     F .text	00000124 _malloc_trim_r
00014dbc g       *ABS*	00000000 __CTOR_END__
00014dbc g       *ABS*	00000000 __flash_rodata_start
00014dbc g       *ABS*	00000000 __DTOR_LIST__
0001398c g     F .text	00000038 alt_irq_init
00013710 g     F .text	00000064 alt_release_fd
00014a28 g     F .text	00000014 atexit
0001214c g     F .text	00000060 _write_r
0001580c g     O .rwdata	00000004 _impure_ptr
00016288 g     O .bss	00000004 alt_argc
00012458 g     F .text	0000021c __sflush_r
00013ecc g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00010740 g     F .text	00000018 __fp_unlock_all
00015818 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00013f60 g     F .text	00000050 alt_ic_isr_register
00015840 g       *ABS*	00000000 _edata
000163c8 g       *ABS*	00000000 _end
000101c0 g       *ABS*	00000000 __ram_exceptions_end
00014038 g     F .text	0000008c alt_ic_irq_disable
0001206c g     F .text	0000007c __swrite
00015814 g     O .rwdata	00000004 __malloc_trim_threshold
00014738 g     F .text	00000024 altera_nios2_qsys_irq_init
00014a3c g     F .text	00000038 exit
00010cd8 g     F .text	000000c4 _fwalk_reent
00012ee4 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
0001071c g     F .text	00000004 __sfp_lock_release
00014d88 g     F .text	00000034 _exit
00012b94 g     F .text	000001bc __smakebuf_r
00010320 g     F .text	00000098 strlen
00014440 g     F .text	00000154 open
00013f2c g     F .text	00000034 alt_icache_flush_all
00015834 g     O .rwdata	00000004 alt_priority_mask
00013fb0 g     F .text	00000088 alt_ic_irq_enable
00015838 g     O .rwdata	00000008 alt_alarm_list
00013e6c g     F .text	00000060 _do_ctors
00013050 g     F .text	000000d0 close
00013380 g     F .text	00000084 alt_load
00010720 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__alt_data_end+0xffff0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08407014 	ori	at,at,448
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)

00010094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   100fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10100:	0005313a 	rdctl	r2,ipending
   10104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10114:	00800044 	movi	r2,1
   10118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	1884703a 	and	r2,r3,r2
   10128:	10001426 	beq	r2,zero,1017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	00800074 	movhi	r2,1
   10130:	1098b204 	addi	r2,r2,25288
   10134:	e0fffd17 	ldw	r3,-12(fp)
   10138:	180690fa 	slli	r3,r3,3
   1013c:	10c5883a 	add	r2,r2,r3
   10140:	10c00017 	ldw	r3,0(r2)
   10144:	00800074 	movhi	r2,1
   10148:	1098b204 	addi	r2,r2,25288
   1014c:	e13ffd17 	ldw	r4,-12(fp)
   10150:	200890fa 	slli	r4,r4,3
   10154:	1105883a 	add	r2,r2,r4
   10158:	10800104 	addi	r2,r2,4
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	1009883a 	mov	r4,r2
   10164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1016c:	0005313a 	rdctl	r2,ipending
   10170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10174:	e0bfff17 	ldw	r2,-4(fp)
   10178:	00000706 	br	10198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1017c:	e0bffc17 	ldw	r2,-16(fp)
   10180:	1085883a 	add	r2,r2,r2
   10184:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10188:	e0bffd17 	ldw	r2,-12(fp)
   1018c:	10800044 	addi	r2,r2,1
   10190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   10194:	003fe106 	br	1011c <__alt_data_end+0xffff011c>

    active = alt_irq_pending ();
   10198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   1019c:	e0bffb17 	ldw	r2,-20(fp)
   101a0:	103fdb1e 	bne	r2,zero,10110 <__alt_data_end+0xffff0110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101a4:	0001883a 	nop
}
   101a8:	0001883a 	nop
   101ac:	e037883a 	mov	sp,fp
   101b0:	dfc00117 	ldw	ra,4(sp)
   101b4:	df000017 	ldw	fp,0(sp)
   101b8:	dec00204 	addi	sp,sp,8
   101bc:	f800283a 	ret

Disassembly of section .text:

000101c0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   101c0:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   101c4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   101c8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   101cc:	00bffd16 	blt	zero,r2,101c4 <__alt_data_end+0xffff01c4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101d0:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   101d4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   101d8:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   101dc:	d6b60214 	ori	gp,gp,55304
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101e0:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101e4:	10989e14 	ori	r2,r2,25208

    movhi r3, %hi(__bss_end)
   101e8:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101ec:	18d8f214 	ori	r3,r3,25544

    beq r2, r3, 1f
   101f0:	10c00326 	beq	r2,r3,10200 <_start+0x40>

0:
    stw zero, (r2)
   101f4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101f8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101fc:	10fffd36 	bltu	r2,r3,101f4 <__alt_data_end+0xffff01f4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10200:	00133800 	call	13380 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10204:	00135140 	call	13514 <alt_main>

00010208 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10208:	003fff06 	br	10208 <__alt_data_end+0xffff0208>

0001020c <main>:
#include <stdio.h>
#include "alt_types.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main() {
   1020c:	defffd04 	addi	sp,sp,-12
   10210:	dfc00215 	stw	ra,8(sp)
   10214:	df000115 	stw	fp,4(sp)
   10218:	df000104 	addi	fp,sp,4
  alt_u32 value;

  printf("Hello FPGA! \n");
   1021c:	01000074 	movhi	r4,1
   10220:	21136f04 	addi	r4,r4,19900
   10224:	001030c0 	call	1030c <puts>

  while(1) {
    value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
   10228:	008000b4 	movhi	r2,2
   1022c:	10842404 	addi	r2,r2,4240
   10230:	10800037 	ldwio	r2,0(r2)
   10234:	e0bfff15 	stw	r2,-4(fp)
    IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, value);
   10238:	e0ffff17 	ldw	r3,-4(fp)
   1023c:	008000b4 	movhi	r2,2
   10240:	10842004 	addi	r2,r2,4224
   10244:	10c00035 	stwio	r3,0(r2)
  }
   10248:	003ff706 	br	10228 <__alt_data_end+0xffff0228>

0001024c <_puts_r>:
   1024c:	defff604 	addi	sp,sp,-40
   10250:	dc000715 	stw	r16,28(sp)
   10254:	2021883a 	mov	r16,r4
   10258:	2809883a 	mov	r4,r5
   1025c:	dc400815 	stw	r17,32(sp)
   10260:	dfc00915 	stw	ra,36(sp)
   10264:	2823883a 	mov	r17,r5
   10268:	00103200 	call	10320 <strlen>
   1026c:	10c00044 	addi	r3,r2,1
   10270:	d8800115 	stw	r2,4(sp)
   10274:	00800074 	movhi	r2,1
   10278:	10937304 	addi	r2,r2,19916
   1027c:	d8800215 	stw	r2,8(sp)
   10280:	00800044 	movi	r2,1
   10284:	d8800315 	stw	r2,12(sp)
   10288:	00800084 	movi	r2,2
   1028c:	dc400015 	stw	r17,0(sp)
   10290:	d8c00615 	stw	r3,24(sp)
   10294:	dec00415 	stw	sp,16(sp)
   10298:	d8800515 	stw	r2,20(sp)
   1029c:	80000226 	beq	r16,zero,102a8 <_puts_r+0x5c>
   102a0:	80800e17 	ldw	r2,56(r16)
   102a4:	10001426 	beq	r2,zero,102f8 <_puts_r+0xac>
   102a8:	81400217 	ldw	r5,8(r16)
   102ac:	2880030b 	ldhu	r2,12(r5)
   102b0:	10c8000c 	andi	r3,r2,8192
   102b4:	1800061e 	bne	r3,zero,102d0 <_puts_r+0x84>
   102b8:	29001917 	ldw	r4,100(r5)
   102bc:	00f7ffc4 	movi	r3,-8193
   102c0:	10880014 	ori	r2,r2,8192
   102c4:	20c6703a 	and	r3,r4,r3
   102c8:	2880030d 	sth	r2,12(r5)
   102cc:	28c01915 	stw	r3,100(r5)
   102d0:	d9800404 	addi	r6,sp,16
   102d4:	8009883a 	mov	r4,r16
   102d8:	00107580 	call	10758 <__sfvwrite_r>
   102dc:	1000091e 	bne	r2,zero,10304 <_puts_r+0xb8>
   102e0:	00800284 	movi	r2,10
   102e4:	dfc00917 	ldw	ra,36(sp)
   102e8:	dc400817 	ldw	r17,32(sp)
   102ec:	dc000717 	ldw	r16,28(sp)
   102f0:	dec00a04 	addi	sp,sp,40
   102f4:	f800283a 	ret
   102f8:	8009883a 	mov	r4,r16
   102fc:	00107080 	call	10708 <__sinit>
   10300:	003fe906 	br	102a8 <__alt_data_end+0xffff02a8>
   10304:	00bfffc4 	movi	r2,-1
   10308:	003ff606 	br	102e4 <__alt_data_end+0xffff02e4>

0001030c <puts>:
   1030c:	00800074 	movhi	r2,1
   10310:	10960304 	addi	r2,r2,22540
   10314:	200b883a 	mov	r5,r4
   10318:	11000017 	ldw	r4,0(r2)
   1031c:	001024c1 	jmpi	1024c <_puts_r>

00010320 <strlen>:
   10320:	208000cc 	andi	r2,r4,3
   10324:	10002026 	beq	r2,zero,103a8 <strlen+0x88>
   10328:	20800007 	ldb	r2,0(r4)
   1032c:	10002026 	beq	r2,zero,103b0 <strlen+0x90>
   10330:	2005883a 	mov	r2,r4
   10334:	00000206 	br	10340 <strlen+0x20>
   10338:	10c00007 	ldb	r3,0(r2)
   1033c:	18001826 	beq	r3,zero,103a0 <strlen+0x80>
   10340:	10800044 	addi	r2,r2,1
   10344:	10c000cc 	andi	r3,r2,3
   10348:	183ffb1e 	bne	r3,zero,10338 <__alt_data_end+0xffff0338>
   1034c:	10c00017 	ldw	r3,0(r2)
   10350:	01ffbff4 	movhi	r7,65279
   10354:	39ffbfc4 	addi	r7,r7,-257
   10358:	00ca303a 	nor	r5,zero,r3
   1035c:	01a02074 	movhi	r6,32897
   10360:	19c7883a 	add	r3,r3,r7
   10364:	31a02004 	addi	r6,r6,-32640
   10368:	1946703a 	and	r3,r3,r5
   1036c:	1986703a 	and	r3,r3,r6
   10370:	1800091e 	bne	r3,zero,10398 <strlen+0x78>
   10374:	10800104 	addi	r2,r2,4
   10378:	10c00017 	ldw	r3,0(r2)
   1037c:	19cb883a 	add	r5,r3,r7
   10380:	00c6303a 	nor	r3,zero,r3
   10384:	28c6703a 	and	r3,r5,r3
   10388:	1986703a 	and	r3,r3,r6
   1038c:	183ff926 	beq	r3,zero,10374 <__alt_data_end+0xffff0374>
   10390:	00000106 	br	10398 <strlen+0x78>
   10394:	10800044 	addi	r2,r2,1
   10398:	10c00007 	ldb	r3,0(r2)
   1039c:	183ffd1e 	bne	r3,zero,10394 <__alt_data_end+0xffff0394>
   103a0:	1105c83a 	sub	r2,r2,r4
   103a4:	f800283a 	ret
   103a8:	2005883a 	mov	r2,r4
   103ac:	003fe706 	br	1034c <__alt_data_end+0xffff034c>
   103b0:	0005883a 	mov	r2,zero
   103b4:	f800283a 	ret

000103b8 <__fp_unlock>:
   103b8:	0005883a 	mov	r2,zero
   103bc:	f800283a 	ret

000103c0 <_cleanup_r>:
   103c0:	01400074 	movhi	r5,1
   103c4:	2948d504 	addi	r5,r5,9044
   103c8:	0010cd81 	jmpi	10cd8 <_fwalk_reent>

000103cc <__sinit.part.1>:
   103cc:	defff704 	addi	sp,sp,-36
   103d0:	00c00074 	movhi	r3,1
   103d4:	dfc00815 	stw	ra,32(sp)
   103d8:	ddc00715 	stw	r23,28(sp)
   103dc:	dd800615 	stw	r22,24(sp)
   103e0:	dd400515 	stw	r21,20(sp)
   103e4:	dd000415 	stw	r20,16(sp)
   103e8:	dcc00315 	stw	r19,12(sp)
   103ec:	dc800215 	stw	r18,8(sp)
   103f0:	dc400115 	stw	r17,4(sp)
   103f4:	dc000015 	stw	r16,0(sp)
   103f8:	18c0f004 	addi	r3,r3,960
   103fc:	24000117 	ldw	r16,4(r4)
   10400:	20c00f15 	stw	r3,60(r4)
   10404:	2080bb04 	addi	r2,r4,748
   10408:	00c000c4 	movi	r3,3
   1040c:	20c0b915 	stw	r3,740(r4)
   10410:	2080ba15 	stw	r2,744(r4)
   10414:	2000b815 	stw	zero,736(r4)
   10418:	05c00204 	movi	r23,8
   1041c:	00800104 	movi	r2,4
   10420:	2025883a 	mov	r18,r4
   10424:	b80d883a 	mov	r6,r23
   10428:	81001704 	addi	r4,r16,92
   1042c:	000b883a 	mov	r5,zero
   10430:	80000015 	stw	zero,0(r16)
   10434:	80000115 	stw	zero,4(r16)
   10438:	80000215 	stw	zero,8(r16)
   1043c:	8080030d 	sth	r2,12(r16)
   10440:	80001915 	stw	zero,100(r16)
   10444:	8000038d 	sth	zero,14(r16)
   10448:	80000415 	stw	zero,16(r16)
   1044c:	80000515 	stw	zero,20(r16)
   10450:	80000615 	stw	zero,24(r16)
   10454:	00119300 	call	11930 <memset>
   10458:	05800074 	movhi	r22,1
   1045c:	94400217 	ldw	r17,8(r18)
   10460:	05400074 	movhi	r21,1
   10464:	05000074 	movhi	r20,1
   10468:	04c00074 	movhi	r19,1
   1046c:	b5880404 	addi	r22,r22,8208
   10470:	ad481b04 	addi	r21,r21,8300
   10474:	a5083a04 	addi	r20,r20,8424
   10478:	9cc85104 	addi	r19,r19,8516
   1047c:	85800815 	stw	r22,32(r16)
   10480:	85400915 	stw	r21,36(r16)
   10484:	85000a15 	stw	r20,40(r16)
   10488:	84c00b15 	stw	r19,44(r16)
   1048c:	84000715 	stw	r16,28(r16)
   10490:	00800284 	movi	r2,10
   10494:	8880030d 	sth	r2,12(r17)
   10498:	00800044 	movi	r2,1
   1049c:	b80d883a 	mov	r6,r23
   104a0:	89001704 	addi	r4,r17,92
   104a4:	000b883a 	mov	r5,zero
   104a8:	88000015 	stw	zero,0(r17)
   104ac:	88000115 	stw	zero,4(r17)
   104b0:	88000215 	stw	zero,8(r17)
   104b4:	88001915 	stw	zero,100(r17)
   104b8:	8880038d 	sth	r2,14(r17)
   104bc:	88000415 	stw	zero,16(r17)
   104c0:	88000515 	stw	zero,20(r17)
   104c4:	88000615 	stw	zero,24(r17)
   104c8:	00119300 	call	11930 <memset>
   104cc:	94000317 	ldw	r16,12(r18)
   104d0:	00800484 	movi	r2,18
   104d4:	8c400715 	stw	r17,28(r17)
   104d8:	8d800815 	stw	r22,32(r17)
   104dc:	8d400915 	stw	r21,36(r17)
   104e0:	8d000a15 	stw	r20,40(r17)
   104e4:	8cc00b15 	stw	r19,44(r17)
   104e8:	8080030d 	sth	r2,12(r16)
   104ec:	00800084 	movi	r2,2
   104f0:	80000015 	stw	zero,0(r16)
   104f4:	80000115 	stw	zero,4(r16)
   104f8:	80000215 	stw	zero,8(r16)
   104fc:	80001915 	stw	zero,100(r16)
   10500:	8080038d 	sth	r2,14(r16)
   10504:	80000415 	stw	zero,16(r16)
   10508:	80000515 	stw	zero,20(r16)
   1050c:	80000615 	stw	zero,24(r16)
   10510:	b80d883a 	mov	r6,r23
   10514:	000b883a 	mov	r5,zero
   10518:	81001704 	addi	r4,r16,92
   1051c:	00119300 	call	11930 <memset>
   10520:	00800044 	movi	r2,1
   10524:	84000715 	stw	r16,28(r16)
   10528:	85800815 	stw	r22,32(r16)
   1052c:	85400915 	stw	r21,36(r16)
   10530:	85000a15 	stw	r20,40(r16)
   10534:	84c00b15 	stw	r19,44(r16)
   10538:	90800e15 	stw	r2,56(r18)
   1053c:	dfc00817 	ldw	ra,32(sp)
   10540:	ddc00717 	ldw	r23,28(sp)
   10544:	dd800617 	ldw	r22,24(sp)
   10548:	dd400517 	ldw	r21,20(sp)
   1054c:	dd000417 	ldw	r20,16(sp)
   10550:	dcc00317 	ldw	r19,12(sp)
   10554:	dc800217 	ldw	r18,8(sp)
   10558:	dc400117 	ldw	r17,4(sp)
   1055c:	dc000017 	ldw	r16,0(sp)
   10560:	dec00904 	addi	sp,sp,36
   10564:	f800283a 	ret

00010568 <__fp_lock>:
   10568:	0005883a 	mov	r2,zero
   1056c:	f800283a 	ret

00010570 <__sfmoreglue>:
   10570:	defffc04 	addi	sp,sp,-16
   10574:	dc400115 	stw	r17,4(sp)
   10578:	2c7fffc4 	addi	r17,r5,-1
   1057c:	8c401a24 	muli	r17,r17,104
   10580:	dc800215 	stw	r18,8(sp)
   10584:	2825883a 	mov	r18,r5
   10588:	89401d04 	addi	r5,r17,116
   1058c:	dc000015 	stw	r16,0(sp)
   10590:	dfc00315 	stw	ra,12(sp)
   10594:	0010d9c0 	call	10d9c <_malloc_r>
   10598:	1021883a 	mov	r16,r2
   1059c:	10000726 	beq	r2,zero,105bc <__sfmoreglue+0x4c>
   105a0:	11000304 	addi	r4,r2,12
   105a4:	10000015 	stw	zero,0(r2)
   105a8:	14800115 	stw	r18,4(r2)
   105ac:	11000215 	stw	r4,8(r2)
   105b0:	89801a04 	addi	r6,r17,104
   105b4:	000b883a 	mov	r5,zero
   105b8:	00119300 	call	11930 <memset>
   105bc:	8005883a 	mov	r2,r16
   105c0:	dfc00317 	ldw	ra,12(sp)
   105c4:	dc800217 	ldw	r18,8(sp)
   105c8:	dc400117 	ldw	r17,4(sp)
   105cc:	dc000017 	ldw	r16,0(sp)
   105d0:	dec00404 	addi	sp,sp,16
   105d4:	f800283a 	ret

000105d8 <__sfp>:
   105d8:	defffb04 	addi	sp,sp,-20
   105dc:	dc000015 	stw	r16,0(sp)
   105e0:	04000074 	movhi	r16,1
   105e4:	84160204 	addi	r16,r16,22536
   105e8:	dcc00315 	stw	r19,12(sp)
   105ec:	2027883a 	mov	r19,r4
   105f0:	81000017 	ldw	r4,0(r16)
   105f4:	dfc00415 	stw	ra,16(sp)
   105f8:	dc800215 	stw	r18,8(sp)
   105fc:	20800e17 	ldw	r2,56(r4)
   10600:	dc400115 	stw	r17,4(sp)
   10604:	1000021e 	bne	r2,zero,10610 <__sfp+0x38>
   10608:	00103cc0 	call	103cc <__sinit.part.1>
   1060c:	81000017 	ldw	r4,0(r16)
   10610:	2480b804 	addi	r18,r4,736
   10614:	047fffc4 	movi	r17,-1
   10618:	91000117 	ldw	r4,4(r18)
   1061c:	94000217 	ldw	r16,8(r18)
   10620:	213fffc4 	addi	r4,r4,-1
   10624:	20000a16 	blt	r4,zero,10650 <__sfp+0x78>
   10628:	8080030f 	ldh	r2,12(r16)
   1062c:	10000c26 	beq	r2,zero,10660 <__sfp+0x88>
   10630:	80c01d04 	addi	r3,r16,116
   10634:	00000206 	br	10640 <__sfp+0x68>
   10638:	18bfe60f 	ldh	r2,-104(r3)
   1063c:	10000826 	beq	r2,zero,10660 <__sfp+0x88>
   10640:	213fffc4 	addi	r4,r4,-1
   10644:	1c3ffd04 	addi	r16,r3,-12
   10648:	18c01a04 	addi	r3,r3,104
   1064c:	247ffa1e 	bne	r4,r17,10638 <__alt_data_end+0xffff0638>
   10650:	90800017 	ldw	r2,0(r18)
   10654:	10001d26 	beq	r2,zero,106cc <__sfp+0xf4>
   10658:	1025883a 	mov	r18,r2
   1065c:	003fee06 	br	10618 <__alt_data_end+0xffff0618>
   10660:	00bfffc4 	movi	r2,-1
   10664:	8080038d 	sth	r2,14(r16)
   10668:	00800044 	movi	r2,1
   1066c:	8080030d 	sth	r2,12(r16)
   10670:	80001915 	stw	zero,100(r16)
   10674:	80000015 	stw	zero,0(r16)
   10678:	80000215 	stw	zero,8(r16)
   1067c:	80000115 	stw	zero,4(r16)
   10680:	80000415 	stw	zero,16(r16)
   10684:	80000515 	stw	zero,20(r16)
   10688:	80000615 	stw	zero,24(r16)
   1068c:	01800204 	movi	r6,8
   10690:	000b883a 	mov	r5,zero
   10694:	81001704 	addi	r4,r16,92
   10698:	00119300 	call	11930 <memset>
   1069c:	8005883a 	mov	r2,r16
   106a0:	80000c15 	stw	zero,48(r16)
   106a4:	80000d15 	stw	zero,52(r16)
   106a8:	80001115 	stw	zero,68(r16)
   106ac:	80001215 	stw	zero,72(r16)
   106b0:	dfc00417 	ldw	ra,16(sp)
   106b4:	dcc00317 	ldw	r19,12(sp)
   106b8:	dc800217 	ldw	r18,8(sp)
   106bc:	dc400117 	ldw	r17,4(sp)
   106c0:	dc000017 	ldw	r16,0(sp)
   106c4:	dec00504 	addi	sp,sp,20
   106c8:	f800283a 	ret
   106cc:	01400104 	movi	r5,4
   106d0:	9809883a 	mov	r4,r19
   106d4:	00105700 	call	10570 <__sfmoreglue>
   106d8:	90800015 	stw	r2,0(r18)
   106dc:	103fde1e 	bne	r2,zero,10658 <__alt_data_end+0xffff0658>
   106e0:	00800304 	movi	r2,12
   106e4:	98800015 	stw	r2,0(r19)
   106e8:	0005883a 	mov	r2,zero
   106ec:	003ff006 	br	106b0 <__alt_data_end+0xffff06b0>

000106f0 <_cleanup>:
   106f0:	00800074 	movhi	r2,1
   106f4:	10960204 	addi	r2,r2,22536
   106f8:	11000017 	ldw	r4,0(r2)
   106fc:	01400074 	movhi	r5,1
   10700:	2948d504 	addi	r5,r5,9044
   10704:	0010cd81 	jmpi	10cd8 <_fwalk_reent>

00010708 <__sinit>:
   10708:	20800e17 	ldw	r2,56(r4)
   1070c:	10000126 	beq	r2,zero,10714 <__sinit+0xc>
   10710:	f800283a 	ret
   10714:	00103cc1 	jmpi	103cc <__sinit.part.1>

00010718 <__sfp_lock_acquire>:
   10718:	f800283a 	ret

0001071c <__sfp_lock_release>:
   1071c:	f800283a 	ret

00010720 <__sinit_lock_acquire>:
   10720:	f800283a 	ret

00010724 <__sinit_lock_release>:
   10724:	f800283a 	ret

00010728 <__fp_lock_all>:
   10728:	00800074 	movhi	r2,1
   1072c:	10960304 	addi	r2,r2,22540
   10730:	11000017 	ldw	r4,0(r2)
   10734:	01400074 	movhi	r5,1
   10738:	29415a04 	addi	r5,r5,1384
   1073c:	0010c141 	jmpi	10c14 <_fwalk>

00010740 <__fp_unlock_all>:
   10740:	00800074 	movhi	r2,1
   10744:	10960304 	addi	r2,r2,22540
   10748:	11000017 	ldw	r4,0(r2)
   1074c:	01400074 	movhi	r5,1
   10750:	2940ee04 	addi	r5,r5,952
   10754:	0010c141 	jmpi	10c14 <_fwalk>

00010758 <__sfvwrite_r>:
   10758:	30800217 	ldw	r2,8(r6)
   1075c:	10006726 	beq	r2,zero,108fc <__sfvwrite_r+0x1a4>
   10760:	28c0030b 	ldhu	r3,12(r5)
   10764:	defff404 	addi	sp,sp,-48
   10768:	dd400715 	stw	r21,28(sp)
   1076c:	dd000615 	stw	r20,24(sp)
   10770:	dc000215 	stw	r16,8(sp)
   10774:	dfc00b15 	stw	ra,44(sp)
   10778:	df000a15 	stw	fp,40(sp)
   1077c:	ddc00915 	stw	r23,36(sp)
   10780:	dd800815 	stw	r22,32(sp)
   10784:	dcc00515 	stw	r19,20(sp)
   10788:	dc800415 	stw	r18,16(sp)
   1078c:	dc400315 	stw	r17,12(sp)
   10790:	1880020c 	andi	r2,r3,8
   10794:	2821883a 	mov	r16,r5
   10798:	202b883a 	mov	r21,r4
   1079c:	3029883a 	mov	r20,r6
   107a0:	10002726 	beq	r2,zero,10840 <__sfvwrite_r+0xe8>
   107a4:	28800417 	ldw	r2,16(r5)
   107a8:	10002526 	beq	r2,zero,10840 <__sfvwrite_r+0xe8>
   107ac:	1880008c 	andi	r2,r3,2
   107b0:	a4400017 	ldw	r17,0(r20)
   107b4:	10002a26 	beq	r2,zero,10860 <__sfvwrite_r+0x108>
   107b8:	05a00034 	movhi	r22,32768
   107bc:	0027883a 	mov	r19,zero
   107c0:	0025883a 	mov	r18,zero
   107c4:	b5bf0004 	addi	r22,r22,-1024
   107c8:	980d883a 	mov	r6,r19
   107cc:	a809883a 	mov	r4,r21
   107d0:	90004626 	beq	r18,zero,108ec <__sfvwrite_r+0x194>
   107d4:	900f883a 	mov	r7,r18
   107d8:	b480022e 	bgeu	r22,r18,107e4 <__sfvwrite_r+0x8c>
   107dc:	01e00034 	movhi	r7,32768
   107e0:	39ff0004 	addi	r7,r7,-1024
   107e4:	80800917 	ldw	r2,36(r16)
   107e8:	81400717 	ldw	r5,28(r16)
   107ec:	103ee83a 	callr	r2
   107f0:	0080570e 	bge	zero,r2,10950 <__sfvwrite_r+0x1f8>
   107f4:	a0c00217 	ldw	r3,8(r20)
   107f8:	98a7883a 	add	r19,r19,r2
   107fc:	90a5c83a 	sub	r18,r18,r2
   10800:	1885c83a 	sub	r2,r3,r2
   10804:	a0800215 	stw	r2,8(r20)
   10808:	103fef1e 	bne	r2,zero,107c8 <__alt_data_end+0xffff07c8>
   1080c:	0005883a 	mov	r2,zero
   10810:	dfc00b17 	ldw	ra,44(sp)
   10814:	df000a17 	ldw	fp,40(sp)
   10818:	ddc00917 	ldw	r23,36(sp)
   1081c:	dd800817 	ldw	r22,32(sp)
   10820:	dd400717 	ldw	r21,28(sp)
   10824:	dd000617 	ldw	r20,24(sp)
   10828:	dcc00517 	ldw	r19,20(sp)
   1082c:	dc800417 	ldw	r18,16(sp)
   10830:	dc400317 	ldw	r17,12(sp)
   10834:	dc000217 	ldw	r16,8(sp)
   10838:	dec00c04 	addi	sp,sp,48
   1083c:	f800283a 	ret
   10840:	800b883a 	mov	r5,r16
   10844:	a809883a 	mov	r4,r21
   10848:	00121ac0 	call	121ac <__swsetup_r>
   1084c:	1000eb1e 	bne	r2,zero,10bfc <__sfvwrite_r+0x4a4>
   10850:	80c0030b 	ldhu	r3,12(r16)
   10854:	a4400017 	ldw	r17,0(r20)
   10858:	1880008c 	andi	r2,r3,2
   1085c:	103fd61e 	bne	r2,zero,107b8 <__alt_data_end+0xffff07b8>
   10860:	1880004c 	andi	r2,r3,1
   10864:	10003f1e 	bne	r2,zero,10964 <__sfvwrite_r+0x20c>
   10868:	0039883a 	mov	fp,zero
   1086c:	0025883a 	mov	r18,zero
   10870:	90001a26 	beq	r18,zero,108dc <__sfvwrite_r+0x184>
   10874:	1880800c 	andi	r2,r3,512
   10878:	84c00217 	ldw	r19,8(r16)
   1087c:	10002126 	beq	r2,zero,10904 <__sfvwrite_r+0x1ac>
   10880:	982f883a 	mov	r23,r19
   10884:	94c09336 	bltu	r18,r19,10ad4 <__sfvwrite_r+0x37c>
   10888:	1881200c 	andi	r2,r3,1152
   1088c:	10009e1e 	bne	r2,zero,10b08 <__sfvwrite_r+0x3b0>
   10890:	81000017 	ldw	r4,0(r16)
   10894:	b80d883a 	mov	r6,r23
   10898:	e00b883a 	mov	r5,fp
   1089c:	00117d40 	call	117d4 <memmove>
   108a0:	80c00217 	ldw	r3,8(r16)
   108a4:	81000017 	ldw	r4,0(r16)
   108a8:	9005883a 	mov	r2,r18
   108ac:	1ce7c83a 	sub	r19,r3,r19
   108b0:	25cf883a 	add	r7,r4,r23
   108b4:	84c00215 	stw	r19,8(r16)
   108b8:	81c00015 	stw	r7,0(r16)
   108bc:	a0c00217 	ldw	r3,8(r20)
   108c0:	e0b9883a 	add	fp,fp,r2
   108c4:	90a5c83a 	sub	r18,r18,r2
   108c8:	18a7c83a 	sub	r19,r3,r2
   108cc:	a4c00215 	stw	r19,8(r20)
   108d0:	983fce26 	beq	r19,zero,1080c <__alt_data_end+0xffff080c>
   108d4:	80c0030b 	ldhu	r3,12(r16)
   108d8:	903fe61e 	bne	r18,zero,10874 <__alt_data_end+0xffff0874>
   108dc:	8f000017 	ldw	fp,0(r17)
   108e0:	8c800117 	ldw	r18,4(r17)
   108e4:	8c400204 	addi	r17,r17,8
   108e8:	003fe106 	br	10870 <__alt_data_end+0xffff0870>
   108ec:	8cc00017 	ldw	r19,0(r17)
   108f0:	8c800117 	ldw	r18,4(r17)
   108f4:	8c400204 	addi	r17,r17,8
   108f8:	003fb306 	br	107c8 <__alt_data_end+0xffff07c8>
   108fc:	0005883a 	mov	r2,zero
   10900:	f800283a 	ret
   10904:	81000017 	ldw	r4,0(r16)
   10908:	80800417 	ldw	r2,16(r16)
   1090c:	11005736 	bltu	r2,r4,10a6c <__sfvwrite_r+0x314>
   10910:	85c00517 	ldw	r23,20(r16)
   10914:	95c05536 	bltu	r18,r23,10a6c <__sfvwrite_r+0x314>
   10918:	00a00034 	movhi	r2,32768
   1091c:	10bfffc4 	addi	r2,r2,-1
   10920:	9009883a 	mov	r4,r18
   10924:	1480012e 	bgeu	r2,r18,1092c <__sfvwrite_r+0x1d4>
   10928:	1009883a 	mov	r4,r2
   1092c:	b80b883a 	mov	r5,r23
   10930:	0012e600 	call	12e60 <__divsi3>
   10934:	15cf383a 	mul	r7,r2,r23
   10938:	81400717 	ldw	r5,28(r16)
   1093c:	80800917 	ldw	r2,36(r16)
   10940:	e00d883a 	mov	r6,fp
   10944:	a809883a 	mov	r4,r21
   10948:	103ee83a 	callr	r2
   1094c:	00bfdb16 	blt	zero,r2,108bc <__alt_data_end+0xffff08bc>
   10950:	8080030b 	ldhu	r2,12(r16)
   10954:	10801014 	ori	r2,r2,64
   10958:	8080030d 	sth	r2,12(r16)
   1095c:	00bfffc4 	movi	r2,-1
   10960:	003fab06 	br	10810 <__alt_data_end+0xffff0810>
   10964:	0027883a 	mov	r19,zero
   10968:	0011883a 	mov	r8,zero
   1096c:	0039883a 	mov	fp,zero
   10970:	0025883a 	mov	r18,zero
   10974:	90001f26 	beq	r18,zero,109f4 <__sfvwrite_r+0x29c>
   10978:	40005a26 	beq	r8,zero,10ae4 <__sfvwrite_r+0x38c>
   1097c:	982d883a 	mov	r22,r19
   10980:	94c0012e 	bgeu	r18,r19,10988 <__sfvwrite_r+0x230>
   10984:	902d883a 	mov	r22,r18
   10988:	81000017 	ldw	r4,0(r16)
   1098c:	80800417 	ldw	r2,16(r16)
   10990:	b02f883a 	mov	r23,r22
   10994:	81c00517 	ldw	r7,20(r16)
   10998:	1100032e 	bgeu	r2,r4,109a8 <__sfvwrite_r+0x250>
   1099c:	80c00217 	ldw	r3,8(r16)
   109a0:	38c7883a 	add	r3,r7,r3
   109a4:	1d801816 	blt	r3,r22,10a08 <__sfvwrite_r+0x2b0>
   109a8:	b1c03e16 	blt	r22,r7,10aa4 <__sfvwrite_r+0x34c>
   109ac:	80800917 	ldw	r2,36(r16)
   109b0:	81400717 	ldw	r5,28(r16)
   109b4:	e00d883a 	mov	r6,fp
   109b8:	da000115 	stw	r8,4(sp)
   109bc:	a809883a 	mov	r4,r21
   109c0:	103ee83a 	callr	r2
   109c4:	102f883a 	mov	r23,r2
   109c8:	da000117 	ldw	r8,4(sp)
   109cc:	00bfe00e 	bge	zero,r2,10950 <__alt_data_end+0xffff0950>
   109d0:	9de7c83a 	sub	r19,r19,r23
   109d4:	98001f26 	beq	r19,zero,10a54 <__sfvwrite_r+0x2fc>
   109d8:	a0800217 	ldw	r2,8(r20)
   109dc:	e5f9883a 	add	fp,fp,r23
   109e0:	95e5c83a 	sub	r18,r18,r23
   109e4:	15efc83a 	sub	r23,r2,r23
   109e8:	a5c00215 	stw	r23,8(r20)
   109ec:	b83f8726 	beq	r23,zero,1080c <__alt_data_end+0xffff080c>
   109f0:	903fe11e 	bne	r18,zero,10978 <__alt_data_end+0xffff0978>
   109f4:	8f000017 	ldw	fp,0(r17)
   109f8:	8c800117 	ldw	r18,4(r17)
   109fc:	0011883a 	mov	r8,zero
   10a00:	8c400204 	addi	r17,r17,8
   10a04:	003fdb06 	br	10974 <__alt_data_end+0xffff0974>
   10a08:	180d883a 	mov	r6,r3
   10a0c:	e00b883a 	mov	r5,fp
   10a10:	da000115 	stw	r8,4(sp)
   10a14:	d8c00015 	stw	r3,0(sp)
   10a18:	00117d40 	call	117d4 <memmove>
   10a1c:	d8c00017 	ldw	r3,0(sp)
   10a20:	80800017 	ldw	r2,0(r16)
   10a24:	800b883a 	mov	r5,r16
   10a28:	a809883a 	mov	r4,r21
   10a2c:	10c5883a 	add	r2,r2,r3
   10a30:	80800015 	stw	r2,0(r16)
   10a34:	d8c00015 	stw	r3,0(sp)
   10a38:	00126740 	call	12674 <_fflush_r>
   10a3c:	d8c00017 	ldw	r3,0(sp)
   10a40:	da000117 	ldw	r8,4(sp)
   10a44:	103fc21e 	bne	r2,zero,10950 <__alt_data_end+0xffff0950>
   10a48:	182f883a 	mov	r23,r3
   10a4c:	9de7c83a 	sub	r19,r19,r23
   10a50:	983fe11e 	bne	r19,zero,109d8 <__alt_data_end+0xffff09d8>
   10a54:	800b883a 	mov	r5,r16
   10a58:	a809883a 	mov	r4,r21
   10a5c:	00126740 	call	12674 <_fflush_r>
   10a60:	103fbb1e 	bne	r2,zero,10950 <__alt_data_end+0xffff0950>
   10a64:	0011883a 	mov	r8,zero
   10a68:	003fdb06 	br	109d8 <__alt_data_end+0xffff09d8>
   10a6c:	94c0012e 	bgeu	r18,r19,10a74 <__sfvwrite_r+0x31c>
   10a70:	9027883a 	mov	r19,r18
   10a74:	980d883a 	mov	r6,r19
   10a78:	e00b883a 	mov	r5,fp
   10a7c:	00117d40 	call	117d4 <memmove>
   10a80:	80800217 	ldw	r2,8(r16)
   10a84:	80c00017 	ldw	r3,0(r16)
   10a88:	14c5c83a 	sub	r2,r2,r19
   10a8c:	1cc7883a 	add	r3,r3,r19
   10a90:	80800215 	stw	r2,8(r16)
   10a94:	80c00015 	stw	r3,0(r16)
   10a98:	10004326 	beq	r2,zero,10ba8 <__sfvwrite_r+0x450>
   10a9c:	9805883a 	mov	r2,r19
   10aa0:	003f8606 	br	108bc <__alt_data_end+0xffff08bc>
   10aa4:	b00d883a 	mov	r6,r22
   10aa8:	e00b883a 	mov	r5,fp
   10aac:	da000115 	stw	r8,4(sp)
   10ab0:	00117d40 	call	117d4 <memmove>
   10ab4:	80800217 	ldw	r2,8(r16)
   10ab8:	80c00017 	ldw	r3,0(r16)
   10abc:	da000117 	ldw	r8,4(sp)
   10ac0:	1585c83a 	sub	r2,r2,r22
   10ac4:	1dad883a 	add	r22,r3,r22
   10ac8:	80800215 	stw	r2,8(r16)
   10acc:	85800015 	stw	r22,0(r16)
   10ad0:	003fbf06 	br	109d0 <__alt_data_end+0xffff09d0>
   10ad4:	81000017 	ldw	r4,0(r16)
   10ad8:	9027883a 	mov	r19,r18
   10adc:	902f883a 	mov	r23,r18
   10ae0:	003f6c06 	br	10894 <__alt_data_end+0xffff0894>
   10ae4:	900d883a 	mov	r6,r18
   10ae8:	01400284 	movi	r5,10
   10aec:	e009883a 	mov	r4,fp
   10af0:	00115a80 	call	115a8 <memchr>
   10af4:	10003e26 	beq	r2,zero,10bf0 <__sfvwrite_r+0x498>
   10af8:	10800044 	addi	r2,r2,1
   10afc:	1727c83a 	sub	r19,r2,fp
   10b00:	02000044 	movi	r8,1
   10b04:	003f9d06 	br	1097c <__alt_data_end+0xffff097c>
   10b08:	80800517 	ldw	r2,20(r16)
   10b0c:	81400417 	ldw	r5,16(r16)
   10b10:	81c00017 	ldw	r7,0(r16)
   10b14:	10a7883a 	add	r19,r2,r2
   10b18:	9885883a 	add	r2,r19,r2
   10b1c:	1026d7fa 	srli	r19,r2,31
   10b20:	396dc83a 	sub	r22,r7,r5
   10b24:	b1000044 	addi	r4,r22,1
   10b28:	9885883a 	add	r2,r19,r2
   10b2c:	1027d07a 	srai	r19,r2,1
   10b30:	2485883a 	add	r2,r4,r18
   10b34:	980d883a 	mov	r6,r19
   10b38:	9880022e 	bgeu	r19,r2,10b44 <__sfvwrite_r+0x3ec>
   10b3c:	1027883a 	mov	r19,r2
   10b40:	100d883a 	mov	r6,r2
   10b44:	18c1000c 	andi	r3,r3,1024
   10b48:	18001c26 	beq	r3,zero,10bbc <__sfvwrite_r+0x464>
   10b4c:	300b883a 	mov	r5,r6
   10b50:	a809883a 	mov	r4,r21
   10b54:	0010d9c0 	call	10d9c <_malloc_r>
   10b58:	102f883a 	mov	r23,r2
   10b5c:	10002926 	beq	r2,zero,10c04 <__sfvwrite_r+0x4ac>
   10b60:	81400417 	ldw	r5,16(r16)
   10b64:	b00d883a 	mov	r6,r22
   10b68:	1009883a 	mov	r4,r2
   10b6c:	001168c0 	call	1168c <memcpy>
   10b70:	8080030b 	ldhu	r2,12(r16)
   10b74:	00fedfc4 	movi	r3,-1153
   10b78:	10c4703a 	and	r2,r2,r3
   10b7c:	10802014 	ori	r2,r2,128
   10b80:	8080030d 	sth	r2,12(r16)
   10b84:	bd89883a 	add	r4,r23,r22
   10b88:	9d8fc83a 	sub	r7,r19,r22
   10b8c:	85c00415 	stw	r23,16(r16)
   10b90:	84c00515 	stw	r19,20(r16)
   10b94:	81000015 	stw	r4,0(r16)
   10b98:	9027883a 	mov	r19,r18
   10b9c:	81c00215 	stw	r7,8(r16)
   10ba0:	902f883a 	mov	r23,r18
   10ba4:	003f3b06 	br	10894 <__alt_data_end+0xffff0894>
   10ba8:	800b883a 	mov	r5,r16
   10bac:	a809883a 	mov	r4,r21
   10bb0:	00126740 	call	12674 <_fflush_r>
   10bb4:	103fb926 	beq	r2,zero,10a9c <__alt_data_end+0xffff0a9c>
   10bb8:	003f6506 	br	10950 <__alt_data_end+0xffff0950>
   10bbc:	a809883a 	mov	r4,r21
   10bc0:	0011a580 	call	11a58 <_realloc_r>
   10bc4:	102f883a 	mov	r23,r2
   10bc8:	103fee1e 	bne	r2,zero,10b84 <__alt_data_end+0xffff0b84>
   10bcc:	81400417 	ldw	r5,16(r16)
   10bd0:	a809883a 	mov	r4,r21
   10bd4:	00128240 	call	12824 <_free_r>
   10bd8:	8080030b 	ldhu	r2,12(r16)
   10bdc:	00ffdfc4 	movi	r3,-129
   10be0:	1884703a 	and	r2,r3,r2
   10be4:	00c00304 	movi	r3,12
   10be8:	a8c00015 	stw	r3,0(r21)
   10bec:	003f5906 	br	10954 <__alt_data_end+0xffff0954>
   10bf0:	94c00044 	addi	r19,r18,1
   10bf4:	02000044 	movi	r8,1
   10bf8:	003f6006 	br	1097c <__alt_data_end+0xffff097c>
   10bfc:	00bfffc4 	movi	r2,-1
   10c00:	003f0306 	br	10810 <__alt_data_end+0xffff0810>
   10c04:	00800304 	movi	r2,12
   10c08:	a8800015 	stw	r2,0(r21)
   10c0c:	8080030b 	ldhu	r2,12(r16)
   10c10:	003f5006 	br	10954 <__alt_data_end+0xffff0954>

00010c14 <_fwalk>:
   10c14:	defff704 	addi	sp,sp,-36
   10c18:	dd000415 	stw	r20,16(sp)
   10c1c:	dfc00815 	stw	ra,32(sp)
   10c20:	ddc00715 	stw	r23,28(sp)
   10c24:	dd800615 	stw	r22,24(sp)
   10c28:	dd400515 	stw	r21,20(sp)
   10c2c:	dcc00315 	stw	r19,12(sp)
   10c30:	dc800215 	stw	r18,8(sp)
   10c34:	dc400115 	stw	r17,4(sp)
   10c38:	dc000015 	stw	r16,0(sp)
   10c3c:	2500b804 	addi	r20,r4,736
   10c40:	a0002326 	beq	r20,zero,10cd0 <_fwalk+0xbc>
   10c44:	282b883a 	mov	r21,r5
   10c48:	002f883a 	mov	r23,zero
   10c4c:	05800044 	movi	r22,1
   10c50:	04ffffc4 	movi	r19,-1
   10c54:	a4400117 	ldw	r17,4(r20)
   10c58:	a4800217 	ldw	r18,8(r20)
   10c5c:	8c7fffc4 	addi	r17,r17,-1
   10c60:	88000d16 	blt	r17,zero,10c98 <_fwalk+0x84>
   10c64:	94000304 	addi	r16,r18,12
   10c68:	94800384 	addi	r18,r18,14
   10c6c:	8080000b 	ldhu	r2,0(r16)
   10c70:	8c7fffc4 	addi	r17,r17,-1
   10c74:	813ffd04 	addi	r4,r16,-12
   10c78:	b080042e 	bgeu	r22,r2,10c8c <_fwalk+0x78>
   10c7c:	9080000f 	ldh	r2,0(r18)
   10c80:	14c00226 	beq	r2,r19,10c8c <_fwalk+0x78>
   10c84:	a83ee83a 	callr	r21
   10c88:	b8aeb03a 	or	r23,r23,r2
   10c8c:	84001a04 	addi	r16,r16,104
   10c90:	94801a04 	addi	r18,r18,104
   10c94:	8cfff51e 	bne	r17,r19,10c6c <__alt_data_end+0xffff0c6c>
   10c98:	a5000017 	ldw	r20,0(r20)
   10c9c:	a03fed1e 	bne	r20,zero,10c54 <__alt_data_end+0xffff0c54>
   10ca0:	b805883a 	mov	r2,r23
   10ca4:	dfc00817 	ldw	ra,32(sp)
   10ca8:	ddc00717 	ldw	r23,28(sp)
   10cac:	dd800617 	ldw	r22,24(sp)
   10cb0:	dd400517 	ldw	r21,20(sp)
   10cb4:	dd000417 	ldw	r20,16(sp)
   10cb8:	dcc00317 	ldw	r19,12(sp)
   10cbc:	dc800217 	ldw	r18,8(sp)
   10cc0:	dc400117 	ldw	r17,4(sp)
   10cc4:	dc000017 	ldw	r16,0(sp)
   10cc8:	dec00904 	addi	sp,sp,36
   10ccc:	f800283a 	ret
   10cd0:	002f883a 	mov	r23,zero
   10cd4:	003ff206 	br	10ca0 <__alt_data_end+0xffff0ca0>

00010cd8 <_fwalk_reent>:
   10cd8:	defff704 	addi	sp,sp,-36
   10cdc:	dd000415 	stw	r20,16(sp)
   10ce0:	dfc00815 	stw	ra,32(sp)
   10ce4:	ddc00715 	stw	r23,28(sp)
   10ce8:	dd800615 	stw	r22,24(sp)
   10cec:	dd400515 	stw	r21,20(sp)
   10cf0:	dcc00315 	stw	r19,12(sp)
   10cf4:	dc800215 	stw	r18,8(sp)
   10cf8:	dc400115 	stw	r17,4(sp)
   10cfc:	dc000015 	stw	r16,0(sp)
   10d00:	2500b804 	addi	r20,r4,736
   10d04:	a0002326 	beq	r20,zero,10d94 <_fwalk_reent+0xbc>
   10d08:	282b883a 	mov	r21,r5
   10d0c:	2027883a 	mov	r19,r4
   10d10:	002f883a 	mov	r23,zero
   10d14:	05800044 	movi	r22,1
   10d18:	04bfffc4 	movi	r18,-1
   10d1c:	a4400117 	ldw	r17,4(r20)
   10d20:	a4000217 	ldw	r16,8(r20)
   10d24:	8c7fffc4 	addi	r17,r17,-1
   10d28:	88000c16 	blt	r17,zero,10d5c <_fwalk_reent+0x84>
   10d2c:	84000304 	addi	r16,r16,12
   10d30:	8080000b 	ldhu	r2,0(r16)
   10d34:	8c7fffc4 	addi	r17,r17,-1
   10d38:	817ffd04 	addi	r5,r16,-12
   10d3c:	b080052e 	bgeu	r22,r2,10d54 <_fwalk_reent+0x7c>
   10d40:	8080008f 	ldh	r2,2(r16)
   10d44:	9809883a 	mov	r4,r19
   10d48:	14800226 	beq	r2,r18,10d54 <_fwalk_reent+0x7c>
   10d4c:	a83ee83a 	callr	r21
   10d50:	b8aeb03a 	or	r23,r23,r2
   10d54:	84001a04 	addi	r16,r16,104
   10d58:	8cbff51e 	bne	r17,r18,10d30 <__alt_data_end+0xffff0d30>
   10d5c:	a5000017 	ldw	r20,0(r20)
   10d60:	a03fee1e 	bne	r20,zero,10d1c <__alt_data_end+0xffff0d1c>
   10d64:	b805883a 	mov	r2,r23
   10d68:	dfc00817 	ldw	ra,32(sp)
   10d6c:	ddc00717 	ldw	r23,28(sp)
   10d70:	dd800617 	ldw	r22,24(sp)
   10d74:	dd400517 	ldw	r21,20(sp)
   10d78:	dd000417 	ldw	r20,16(sp)
   10d7c:	dcc00317 	ldw	r19,12(sp)
   10d80:	dc800217 	ldw	r18,8(sp)
   10d84:	dc400117 	ldw	r17,4(sp)
   10d88:	dc000017 	ldw	r16,0(sp)
   10d8c:	dec00904 	addi	sp,sp,36
   10d90:	f800283a 	ret
   10d94:	002f883a 	mov	r23,zero
   10d98:	003ff206 	br	10d64 <__alt_data_end+0xffff0d64>

00010d9c <_malloc_r>:
   10d9c:	defff504 	addi	sp,sp,-44
   10da0:	dc800315 	stw	r18,12(sp)
   10da4:	dfc00a15 	stw	ra,40(sp)
   10da8:	df000915 	stw	fp,36(sp)
   10dac:	ddc00815 	stw	r23,32(sp)
   10db0:	dd800715 	stw	r22,28(sp)
   10db4:	dd400615 	stw	r21,24(sp)
   10db8:	dd000515 	stw	r20,20(sp)
   10dbc:	dcc00415 	stw	r19,16(sp)
   10dc0:	dc400215 	stw	r17,8(sp)
   10dc4:	dc000115 	stw	r16,4(sp)
   10dc8:	288002c4 	addi	r2,r5,11
   10dcc:	00c00584 	movi	r3,22
   10dd0:	2025883a 	mov	r18,r4
   10dd4:	18807f2e 	bgeu	r3,r2,10fd4 <_malloc_r+0x238>
   10dd8:	047ffe04 	movi	r17,-8
   10ddc:	1462703a 	and	r17,r2,r17
   10de0:	8800a316 	blt	r17,zero,11070 <_malloc_r+0x2d4>
   10de4:	8940a236 	bltu	r17,r5,11070 <_malloc_r+0x2d4>
   10de8:	00135900 	call	13590 <__malloc_lock>
   10dec:	00807dc4 	movi	r2,503
   10df0:	1441e92e 	bgeu	r2,r17,11598 <_malloc_r+0x7fc>
   10df4:	8804d27a 	srli	r2,r17,9
   10df8:	1000a126 	beq	r2,zero,11080 <_malloc_r+0x2e4>
   10dfc:	00c00104 	movi	r3,4
   10e00:	18811e36 	bltu	r3,r2,1127c <_malloc_r+0x4e0>
   10e04:	8804d1ba 	srli	r2,r17,6
   10e08:	12000e44 	addi	r8,r2,57
   10e0c:	11c00e04 	addi	r7,r2,56
   10e10:	4209883a 	add	r4,r8,r8
   10e14:	04c00074 	movhi	r19,1
   10e18:	2109883a 	add	r4,r4,r4
   10e1c:	9cd48b04 	addi	r19,r19,21036
   10e20:	2109883a 	add	r4,r4,r4
   10e24:	9909883a 	add	r4,r19,r4
   10e28:	24000117 	ldw	r16,4(r4)
   10e2c:	213ffe04 	addi	r4,r4,-8
   10e30:	24009726 	beq	r4,r16,11090 <_malloc_r+0x2f4>
   10e34:	80800117 	ldw	r2,4(r16)
   10e38:	01bfff04 	movi	r6,-4
   10e3c:	014003c4 	movi	r5,15
   10e40:	1184703a 	and	r2,r2,r6
   10e44:	1447c83a 	sub	r3,r2,r17
   10e48:	28c00716 	blt	r5,r3,10e68 <_malloc_r+0xcc>
   10e4c:	1800920e 	bge	r3,zero,11098 <_malloc_r+0x2fc>
   10e50:	84000317 	ldw	r16,12(r16)
   10e54:	24008e26 	beq	r4,r16,11090 <_malloc_r+0x2f4>
   10e58:	80800117 	ldw	r2,4(r16)
   10e5c:	1184703a 	and	r2,r2,r6
   10e60:	1447c83a 	sub	r3,r2,r17
   10e64:	28fff90e 	bge	r5,r3,10e4c <__alt_data_end+0xffff0e4c>
   10e68:	3809883a 	mov	r4,r7
   10e6c:	01800074 	movhi	r6,1
   10e70:	9c000417 	ldw	r16,16(r19)
   10e74:	31948b04 	addi	r6,r6,21036
   10e78:	32000204 	addi	r8,r6,8
   10e7c:	82013426 	beq	r16,r8,11350 <_malloc_r+0x5b4>
   10e80:	80c00117 	ldw	r3,4(r16)
   10e84:	00bfff04 	movi	r2,-4
   10e88:	188e703a 	and	r7,r3,r2
   10e8c:	3c45c83a 	sub	r2,r7,r17
   10e90:	00c003c4 	movi	r3,15
   10e94:	18811f16 	blt	r3,r2,11314 <_malloc_r+0x578>
   10e98:	32000515 	stw	r8,20(r6)
   10e9c:	32000415 	stw	r8,16(r6)
   10ea0:	10007f0e 	bge	r2,zero,110a0 <_malloc_r+0x304>
   10ea4:	00807fc4 	movi	r2,511
   10ea8:	11c0fd36 	bltu	r2,r7,112a0 <_malloc_r+0x504>
   10eac:	3806d0fa 	srli	r3,r7,3
   10eb0:	01c00044 	movi	r7,1
   10eb4:	30800117 	ldw	r2,4(r6)
   10eb8:	19400044 	addi	r5,r3,1
   10ebc:	294b883a 	add	r5,r5,r5
   10ec0:	1807d0ba 	srai	r3,r3,2
   10ec4:	294b883a 	add	r5,r5,r5
   10ec8:	294b883a 	add	r5,r5,r5
   10ecc:	298b883a 	add	r5,r5,r6
   10ed0:	38c6983a 	sll	r3,r7,r3
   10ed4:	29c00017 	ldw	r7,0(r5)
   10ed8:	2a7ffe04 	addi	r9,r5,-8
   10edc:	1886b03a 	or	r3,r3,r2
   10ee0:	82400315 	stw	r9,12(r16)
   10ee4:	81c00215 	stw	r7,8(r16)
   10ee8:	30c00115 	stw	r3,4(r6)
   10eec:	2c000015 	stw	r16,0(r5)
   10ef0:	3c000315 	stw	r16,12(r7)
   10ef4:	2005d0ba 	srai	r2,r4,2
   10ef8:	01400044 	movi	r5,1
   10efc:	288a983a 	sll	r5,r5,r2
   10f00:	19406f36 	bltu	r3,r5,110c0 <_malloc_r+0x324>
   10f04:	28c4703a 	and	r2,r5,r3
   10f08:	10000a1e 	bne	r2,zero,10f34 <_malloc_r+0x198>
   10f0c:	00bfff04 	movi	r2,-4
   10f10:	294b883a 	add	r5,r5,r5
   10f14:	2088703a 	and	r4,r4,r2
   10f18:	28c4703a 	and	r2,r5,r3
   10f1c:	21000104 	addi	r4,r4,4
   10f20:	1000041e 	bne	r2,zero,10f34 <_malloc_r+0x198>
   10f24:	294b883a 	add	r5,r5,r5
   10f28:	28c4703a 	and	r2,r5,r3
   10f2c:	21000104 	addi	r4,r4,4
   10f30:	103ffc26 	beq	r2,zero,10f24 <__alt_data_end+0xffff0f24>
   10f34:	02bfff04 	movi	r10,-4
   10f38:	024003c4 	movi	r9,15
   10f3c:	21800044 	addi	r6,r4,1
   10f40:	318d883a 	add	r6,r6,r6
   10f44:	318d883a 	add	r6,r6,r6
   10f48:	318d883a 	add	r6,r6,r6
   10f4c:	998d883a 	add	r6,r19,r6
   10f50:	333ffe04 	addi	r12,r6,-8
   10f54:	2017883a 	mov	r11,r4
   10f58:	31800104 	addi	r6,r6,4
   10f5c:	34000017 	ldw	r16,0(r6)
   10f60:	31fffd04 	addi	r7,r6,-12
   10f64:	81c0041e 	bne	r16,r7,10f78 <_malloc_r+0x1dc>
   10f68:	0000fb06 	br	11358 <_malloc_r+0x5bc>
   10f6c:	1801030e 	bge	r3,zero,1137c <_malloc_r+0x5e0>
   10f70:	84000317 	ldw	r16,12(r16)
   10f74:	81c0f826 	beq	r16,r7,11358 <_malloc_r+0x5bc>
   10f78:	80800117 	ldw	r2,4(r16)
   10f7c:	1284703a 	and	r2,r2,r10
   10f80:	1447c83a 	sub	r3,r2,r17
   10f84:	48fff90e 	bge	r9,r3,10f6c <__alt_data_end+0xffff0f6c>
   10f88:	80800317 	ldw	r2,12(r16)
   10f8c:	81000217 	ldw	r4,8(r16)
   10f90:	89400054 	ori	r5,r17,1
   10f94:	81400115 	stw	r5,4(r16)
   10f98:	20800315 	stw	r2,12(r4)
   10f9c:	11000215 	stw	r4,8(r2)
   10fa0:	8463883a 	add	r17,r16,r17
   10fa4:	9c400515 	stw	r17,20(r19)
   10fa8:	9c400415 	stw	r17,16(r19)
   10fac:	18800054 	ori	r2,r3,1
   10fb0:	88800115 	stw	r2,4(r17)
   10fb4:	8a000315 	stw	r8,12(r17)
   10fb8:	8a000215 	stw	r8,8(r17)
   10fbc:	88e3883a 	add	r17,r17,r3
   10fc0:	88c00015 	stw	r3,0(r17)
   10fc4:	9009883a 	mov	r4,r18
   10fc8:	00135b40 	call	135b4 <__malloc_unlock>
   10fcc:	80800204 	addi	r2,r16,8
   10fd0:	00001b06 	br	11040 <_malloc_r+0x2a4>
   10fd4:	04400404 	movi	r17,16
   10fd8:	89402536 	bltu	r17,r5,11070 <_malloc_r+0x2d4>
   10fdc:	00135900 	call	13590 <__malloc_lock>
   10fe0:	00800184 	movi	r2,6
   10fe4:	01000084 	movi	r4,2
   10fe8:	04c00074 	movhi	r19,1
   10fec:	1085883a 	add	r2,r2,r2
   10ff0:	9cd48b04 	addi	r19,r19,21036
   10ff4:	1085883a 	add	r2,r2,r2
   10ff8:	9885883a 	add	r2,r19,r2
   10ffc:	14000117 	ldw	r16,4(r2)
   11000:	10fffe04 	addi	r3,r2,-8
   11004:	80c0d926 	beq	r16,r3,1136c <_malloc_r+0x5d0>
   11008:	80c00117 	ldw	r3,4(r16)
   1100c:	81000317 	ldw	r4,12(r16)
   11010:	00bfff04 	movi	r2,-4
   11014:	1884703a 	and	r2,r3,r2
   11018:	81400217 	ldw	r5,8(r16)
   1101c:	8085883a 	add	r2,r16,r2
   11020:	10c00117 	ldw	r3,4(r2)
   11024:	29000315 	stw	r4,12(r5)
   11028:	21400215 	stw	r5,8(r4)
   1102c:	18c00054 	ori	r3,r3,1
   11030:	10c00115 	stw	r3,4(r2)
   11034:	9009883a 	mov	r4,r18
   11038:	00135b40 	call	135b4 <__malloc_unlock>
   1103c:	80800204 	addi	r2,r16,8
   11040:	dfc00a17 	ldw	ra,40(sp)
   11044:	df000917 	ldw	fp,36(sp)
   11048:	ddc00817 	ldw	r23,32(sp)
   1104c:	dd800717 	ldw	r22,28(sp)
   11050:	dd400617 	ldw	r21,24(sp)
   11054:	dd000517 	ldw	r20,20(sp)
   11058:	dcc00417 	ldw	r19,16(sp)
   1105c:	dc800317 	ldw	r18,12(sp)
   11060:	dc400217 	ldw	r17,8(sp)
   11064:	dc000117 	ldw	r16,4(sp)
   11068:	dec00b04 	addi	sp,sp,44
   1106c:	f800283a 	ret
   11070:	00800304 	movi	r2,12
   11074:	90800015 	stw	r2,0(r18)
   11078:	0005883a 	mov	r2,zero
   1107c:	003ff006 	br	11040 <__alt_data_end+0xffff1040>
   11080:	01002004 	movi	r4,128
   11084:	02001004 	movi	r8,64
   11088:	01c00fc4 	movi	r7,63
   1108c:	003f6106 	br	10e14 <__alt_data_end+0xffff0e14>
   11090:	4009883a 	mov	r4,r8
   11094:	003f7506 	br	10e6c <__alt_data_end+0xffff0e6c>
   11098:	81000317 	ldw	r4,12(r16)
   1109c:	003fde06 	br	11018 <__alt_data_end+0xffff1018>
   110a0:	81c5883a 	add	r2,r16,r7
   110a4:	11400117 	ldw	r5,4(r2)
   110a8:	9009883a 	mov	r4,r18
   110ac:	29400054 	ori	r5,r5,1
   110b0:	11400115 	stw	r5,4(r2)
   110b4:	00135b40 	call	135b4 <__malloc_unlock>
   110b8:	80800204 	addi	r2,r16,8
   110bc:	003fe006 	br	11040 <__alt_data_end+0xffff1040>
   110c0:	9c000217 	ldw	r16,8(r19)
   110c4:	00bfff04 	movi	r2,-4
   110c8:	85800117 	ldw	r22,4(r16)
   110cc:	b0ac703a 	and	r22,r22,r2
   110d0:	b4400336 	bltu	r22,r17,110e0 <_malloc_r+0x344>
   110d4:	b445c83a 	sub	r2,r22,r17
   110d8:	00c003c4 	movi	r3,15
   110dc:	18805d16 	blt	r3,r2,11254 <_malloc_r+0x4b8>
   110e0:	05c00074 	movhi	r23,1
   110e4:	00800074 	movhi	r2,1
   110e8:	1098a004 	addi	r2,r2,25216
   110ec:	bdd60404 	addi	r23,r23,22544
   110f0:	15400017 	ldw	r21,0(r2)
   110f4:	b8c00017 	ldw	r3,0(r23)
   110f8:	00bfffc4 	movi	r2,-1
   110fc:	858d883a 	add	r6,r16,r22
   11100:	8d6b883a 	add	r21,r17,r21
   11104:	1880ea26 	beq	r3,r2,114b0 <_malloc_r+0x714>
   11108:	ad4403c4 	addi	r21,r21,4111
   1110c:	00bc0004 	movi	r2,-4096
   11110:	a8aa703a 	and	r21,r21,r2
   11114:	a80b883a 	mov	r5,r21
   11118:	9009883a 	mov	r4,r18
   1111c:	d9800015 	stw	r6,0(sp)
   11120:	0011fbc0 	call	11fbc <_sbrk_r>
   11124:	1029883a 	mov	r20,r2
   11128:	00bfffc4 	movi	r2,-1
   1112c:	d9800017 	ldw	r6,0(sp)
   11130:	a080e826 	beq	r20,r2,114d4 <_malloc_r+0x738>
   11134:	a180a636 	bltu	r20,r6,113d0 <_malloc_r+0x634>
   11138:	07000074 	movhi	fp,1
   1113c:	e718a804 	addi	fp,fp,25248
   11140:	e0800017 	ldw	r2,0(fp)
   11144:	a887883a 	add	r3,r21,r2
   11148:	e0c00015 	stw	r3,0(fp)
   1114c:	3500e626 	beq	r6,r20,114e8 <_malloc_r+0x74c>
   11150:	b9000017 	ldw	r4,0(r23)
   11154:	00bfffc4 	movi	r2,-1
   11158:	2080ee26 	beq	r4,r2,11514 <_malloc_r+0x778>
   1115c:	a185c83a 	sub	r2,r20,r6
   11160:	10c5883a 	add	r2,r2,r3
   11164:	e0800015 	stw	r2,0(fp)
   11168:	a0c001cc 	andi	r3,r20,7
   1116c:	1800bc26 	beq	r3,zero,11460 <_malloc_r+0x6c4>
   11170:	a0e9c83a 	sub	r20,r20,r3
   11174:	00840204 	movi	r2,4104
   11178:	a5000204 	addi	r20,r20,8
   1117c:	10c7c83a 	sub	r3,r2,r3
   11180:	a545883a 	add	r2,r20,r21
   11184:	1083ffcc 	andi	r2,r2,4095
   11188:	18abc83a 	sub	r21,r3,r2
   1118c:	a80b883a 	mov	r5,r21
   11190:	9009883a 	mov	r4,r18
   11194:	0011fbc0 	call	11fbc <_sbrk_r>
   11198:	00ffffc4 	movi	r3,-1
   1119c:	10c0e126 	beq	r2,r3,11524 <_malloc_r+0x788>
   111a0:	1505c83a 	sub	r2,r2,r20
   111a4:	1545883a 	add	r2,r2,r21
   111a8:	10800054 	ori	r2,r2,1
   111ac:	e0c00017 	ldw	r3,0(fp)
   111b0:	9d000215 	stw	r20,8(r19)
   111b4:	a0800115 	stw	r2,4(r20)
   111b8:	a8c7883a 	add	r3,r21,r3
   111bc:	e0c00015 	stw	r3,0(fp)
   111c0:	84c00e26 	beq	r16,r19,111fc <_malloc_r+0x460>
   111c4:	018003c4 	movi	r6,15
   111c8:	3580a72e 	bgeu	r6,r22,11468 <_malloc_r+0x6cc>
   111cc:	81400117 	ldw	r5,4(r16)
   111d0:	013ffe04 	movi	r4,-8
   111d4:	b0bffd04 	addi	r2,r22,-12
   111d8:	1104703a 	and	r2,r2,r4
   111dc:	2900004c 	andi	r4,r5,1
   111e0:	2088b03a 	or	r4,r4,r2
   111e4:	81000115 	stw	r4,4(r16)
   111e8:	01400144 	movi	r5,5
   111ec:	8089883a 	add	r4,r16,r2
   111f0:	21400115 	stw	r5,4(r4)
   111f4:	21400215 	stw	r5,8(r4)
   111f8:	3080cd36 	bltu	r6,r2,11530 <_malloc_r+0x794>
   111fc:	00800074 	movhi	r2,1
   11200:	10989f04 	addi	r2,r2,25212
   11204:	11000017 	ldw	r4,0(r2)
   11208:	20c0012e 	bgeu	r4,r3,11210 <_malloc_r+0x474>
   1120c:	10c00015 	stw	r3,0(r2)
   11210:	00800074 	movhi	r2,1
   11214:	10989e04 	addi	r2,r2,25208
   11218:	11000017 	ldw	r4,0(r2)
   1121c:	9c000217 	ldw	r16,8(r19)
   11220:	20c0012e 	bgeu	r4,r3,11228 <_malloc_r+0x48c>
   11224:	10c00015 	stw	r3,0(r2)
   11228:	80c00117 	ldw	r3,4(r16)
   1122c:	00bfff04 	movi	r2,-4
   11230:	1886703a 	and	r3,r3,r2
   11234:	1c45c83a 	sub	r2,r3,r17
   11238:	1c400236 	bltu	r3,r17,11244 <_malloc_r+0x4a8>
   1123c:	00c003c4 	movi	r3,15
   11240:	18800416 	blt	r3,r2,11254 <_malloc_r+0x4b8>
   11244:	9009883a 	mov	r4,r18
   11248:	00135b40 	call	135b4 <__malloc_unlock>
   1124c:	0005883a 	mov	r2,zero
   11250:	003f7b06 	br	11040 <__alt_data_end+0xffff1040>
   11254:	88c00054 	ori	r3,r17,1
   11258:	80c00115 	stw	r3,4(r16)
   1125c:	8463883a 	add	r17,r16,r17
   11260:	10800054 	ori	r2,r2,1
   11264:	9c400215 	stw	r17,8(r19)
   11268:	88800115 	stw	r2,4(r17)
   1126c:	9009883a 	mov	r4,r18
   11270:	00135b40 	call	135b4 <__malloc_unlock>
   11274:	80800204 	addi	r2,r16,8
   11278:	003f7106 	br	11040 <__alt_data_end+0xffff1040>
   1127c:	00c00504 	movi	r3,20
   11280:	18804a2e 	bgeu	r3,r2,113ac <_malloc_r+0x610>
   11284:	00c01504 	movi	r3,84
   11288:	18806e36 	bltu	r3,r2,11444 <_malloc_r+0x6a8>
   1128c:	8804d33a 	srli	r2,r17,12
   11290:	12001bc4 	addi	r8,r2,111
   11294:	11c01b84 	addi	r7,r2,110
   11298:	4209883a 	add	r4,r8,r8
   1129c:	003edd06 	br	10e14 <__alt_data_end+0xffff0e14>
   112a0:	3804d27a 	srli	r2,r7,9
   112a4:	00c00104 	movi	r3,4
   112a8:	1880442e 	bgeu	r3,r2,113bc <_malloc_r+0x620>
   112ac:	00c00504 	movi	r3,20
   112b0:	18808136 	bltu	r3,r2,114b8 <_malloc_r+0x71c>
   112b4:	11401704 	addi	r5,r2,92
   112b8:	10c016c4 	addi	r3,r2,91
   112bc:	294b883a 	add	r5,r5,r5
   112c0:	294b883a 	add	r5,r5,r5
   112c4:	294b883a 	add	r5,r5,r5
   112c8:	994b883a 	add	r5,r19,r5
   112cc:	28800017 	ldw	r2,0(r5)
   112d0:	01800074 	movhi	r6,1
   112d4:	297ffe04 	addi	r5,r5,-8
   112d8:	31948b04 	addi	r6,r6,21036
   112dc:	28806526 	beq	r5,r2,11474 <_malloc_r+0x6d8>
   112e0:	01bfff04 	movi	r6,-4
   112e4:	10c00117 	ldw	r3,4(r2)
   112e8:	1986703a 	and	r3,r3,r6
   112ec:	38c0022e 	bgeu	r7,r3,112f8 <_malloc_r+0x55c>
   112f0:	10800217 	ldw	r2,8(r2)
   112f4:	28bffb1e 	bne	r5,r2,112e4 <__alt_data_end+0xffff12e4>
   112f8:	11400317 	ldw	r5,12(r2)
   112fc:	98c00117 	ldw	r3,4(r19)
   11300:	81400315 	stw	r5,12(r16)
   11304:	80800215 	stw	r2,8(r16)
   11308:	2c000215 	stw	r16,8(r5)
   1130c:	14000315 	stw	r16,12(r2)
   11310:	003ef806 	br	10ef4 <__alt_data_end+0xffff0ef4>
   11314:	88c00054 	ori	r3,r17,1
   11318:	80c00115 	stw	r3,4(r16)
   1131c:	8463883a 	add	r17,r16,r17
   11320:	34400515 	stw	r17,20(r6)
   11324:	34400415 	stw	r17,16(r6)
   11328:	10c00054 	ori	r3,r2,1
   1132c:	8a000315 	stw	r8,12(r17)
   11330:	8a000215 	stw	r8,8(r17)
   11334:	88c00115 	stw	r3,4(r17)
   11338:	88a3883a 	add	r17,r17,r2
   1133c:	88800015 	stw	r2,0(r17)
   11340:	9009883a 	mov	r4,r18
   11344:	00135b40 	call	135b4 <__malloc_unlock>
   11348:	80800204 	addi	r2,r16,8
   1134c:	003f3c06 	br	11040 <__alt_data_end+0xffff1040>
   11350:	30c00117 	ldw	r3,4(r6)
   11354:	003ee706 	br	10ef4 <__alt_data_end+0xffff0ef4>
   11358:	5ac00044 	addi	r11,r11,1
   1135c:	588000cc 	andi	r2,r11,3
   11360:	31800204 	addi	r6,r6,8
   11364:	103efd1e 	bne	r2,zero,10f5c <__alt_data_end+0xffff0f5c>
   11368:	00002406 	br	113fc <_malloc_r+0x660>
   1136c:	14000317 	ldw	r16,12(r2)
   11370:	143f251e 	bne	r2,r16,11008 <__alt_data_end+0xffff1008>
   11374:	21000084 	addi	r4,r4,2
   11378:	003ebc06 	br	10e6c <__alt_data_end+0xffff0e6c>
   1137c:	8085883a 	add	r2,r16,r2
   11380:	10c00117 	ldw	r3,4(r2)
   11384:	81000317 	ldw	r4,12(r16)
   11388:	81400217 	ldw	r5,8(r16)
   1138c:	18c00054 	ori	r3,r3,1
   11390:	10c00115 	stw	r3,4(r2)
   11394:	29000315 	stw	r4,12(r5)
   11398:	21400215 	stw	r5,8(r4)
   1139c:	9009883a 	mov	r4,r18
   113a0:	00135b40 	call	135b4 <__malloc_unlock>
   113a4:	80800204 	addi	r2,r16,8
   113a8:	003f2506 	br	11040 <__alt_data_end+0xffff1040>
   113ac:	12001704 	addi	r8,r2,92
   113b0:	11c016c4 	addi	r7,r2,91
   113b4:	4209883a 	add	r4,r8,r8
   113b8:	003e9606 	br	10e14 <__alt_data_end+0xffff0e14>
   113bc:	3804d1ba 	srli	r2,r7,6
   113c0:	11400e44 	addi	r5,r2,57
   113c4:	10c00e04 	addi	r3,r2,56
   113c8:	294b883a 	add	r5,r5,r5
   113cc:	003fbc06 	br	112c0 <__alt_data_end+0xffff12c0>
   113d0:	84ff5926 	beq	r16,r19,11138 <__alt_data_end+0xffff1138>
   113d4:	00800074 	movhi	r2,1
   113d8:	10948b04 	addi	r2,r2,21036
   113dc:	14000217 	ldw	r16,8(r2)
   113e0:	00bfff04 	movi	r2,-4
   113e4:	80c00117 	ldw	r3,4(r16)
   113e8:	1886703a 	and	r3,r3,r2
   113ec:	003f9106 	br	11234 <__alt_data_end+0xffff1234>
   113f0:	60800217 	ldw	r2,8(r12)
   113f4:	213fffc4 	addi	r4,r4,-1
   113f8:	1300651e 	bne	r2,r12,11590 <_malloc_r+0x7f4>
   113fc:	208000cc 	andi	r2,r4,3
   11400:	633ffe04 	addi	r12,r12,-8
   11404:	103ffa1e 	bne	r2,zero,113f0 <__alt_data_end+0xffff13f0>
   11408:	98800117 	ldw	r2,4(r19)
   1140c:	0146303a 	nor	r3,zero,r5
   11410:	1884703a 	and	r2,r3,r2
   11414:	98800115 	stw	r2,4(r19)
   11418:	294b883a 	add	r5,r5,r5
   1141c:	117f2836 	bltu	r2,r5,110c0 <__alt_data_end+0xffff10c0>
   11420:	283f2726 	beq	r5,zero,110c0 <__alt_data_end+0xffff10c0>
   11424:	2886703a 	and	r3,r5,r2
   11428:	5809883a 	mov	r4,r11
   1142c:	183ec31e 	bne	r3,zero,10f3c <__alt_data_end+0xffff0f3c>
   11430:	294b883a 	add	r5,r5,r5
   11434:	2886703a 	and	r3,r5,r2
   11438:	21000104 	addi	r4,r4,4
   1143c:	183ffc26 	beq	r3,zero,11430 <__alt_data_end+0xffff1430>
   11440:	003ebe06 	br	10f3c <__alt_data_end+0xffff0f3c>
   11444:	00c05504 	movi	r3,340
   11448:	18801236 	bltu	r3,r2,11494 <_malloc_r+0x6f8>
   1144c:	8804d3fa 	srli	r2,r17,15
   11450:	12001e04 	addi	r8,r2,120
   11454:	11c01dc4 	addi	r7,r2,119
   11458:	4209883a 	add	r4,r8,r8
   1145c:	003e6d06 	br	10e14 <__alt_data_end+0xffff0e14>
   11460:	00c40004 	movi	r3,4096
   11464:	003f4606 	br	11180 <__alt_data_end+0xffff1180>
   11468:	00800044 	movi	r2,1
   1146c:	a0800115 	stw	r2,4(r20)
   11470:	003f7406 	br	11244 <__alt_data_end+0xffff1244>
   11474:	1805d0ba 	srai	r2,r3,2
   11478:	01c00044 	movi	r7,1
   1147c:	30c00117 	ldw	r3,4(r6)
   11480:	388e983a 	sll	r7,r7,r2
   11484:	2805883a 	mov	r2,r5
   11488:	38c6b03a 	or	r3,r7,r3
   1148c:	30c00115 	stw	r3,4(r6)
   11490:	003f9b06 	br	11300 <__alt_data_end+0xffff1300>
   11494:	00c15504 	movi	r3,1364
   11498:	18801a36 	bltu	r3,r2,11504 <_malloc_r+0x768>
   1149c:	8804d4ba 	srli	r2,r17,18
   114a0:	12001f44 	addi	r8,r2,125
   114a4:	11c01f04 	addi	r7,r2,124
   114a8:	4209883a 	add	r4,r8,r8
   114ac:	003e5906 	br	10e14 <__alt_data_end+0xffff0e14>
   114b0:	ad400404 	addi	r21,r21,16
   114b4:	003f1706 	br	11114 <__alt_data_end+0xffff1114>
   114b8:	00c01504 	movi	r3,84
   114bc:	18802336 	bltu	r3,r2,1154c <_malloc_r+0x7b0>
   114c0:	3804d33a 	srli	r2,r7,12
   114c4:	11401bc4 	addi	r5,r2,111
   114c8:	10c01b84 	addi	r3,r2,110
   114cc:	294b883a 	add	r5,r5,r5
   114d0:	003f7b06 	br	112c0 <__alt_data_end+0xffff12c0>
   114d4:	9c000217 	ldw	r16,8(r19)
   114d8:	00bfff04 	movi	r2,-4
   114dc:	80c00117 	ldw	r3,4(r16)
   114e0:	1886703a 	and	r3,r3,r2
   114e4:	003f5306 	br	11234 <__alt_data_end+0xffff1234>
   114e8:	3083ffcc 	andi	r2,r6,4095
   114ec:	103f181e 	bne	r2,zero,11150 <__alt_data_end+0xffff1150>
   114f0:	99000217 	ldw	r4,8(r19)
   114f4:	b545883a 	add	r2,r22,r21
   114f8:	10800054 	ori	r2,r2,1
   114fc:	20800115 	stw	r2,4(r4)
   11500:	003f3e06 	br	111fc <__alt_data_end+0xffff11fc>
   11504:	01003f84 	movi	r4,254
   11508:	02001fc4 	movi	r8,127
   1150c:	01c01f84 	movi	r7,126
   11510:	003e4006 	br	10e14 <__alt_data_end+0xffff0e14>
   11514:	00800074 	movhi	r2,1
   11518:	10960404 	addi	r2,r2,22544
   1151c:	15000015 	stw	r20,0(r2)
   11520:	003f1106 	br	11168 <__alt_data_end+0xffff1168>
   11524:	00800044 	movi	r2,1
   11528:	002b883a 	mov	r21,zero
   1152c:	003f1f06 	br	111ac <__alt_data_end+0xffff11ac>
   11530:	81400204 	addi	r5,r16,8
   11534:	9009883a 	mov	r4,r18
   11538:	00128240 	call	12824 <_free_r>
   1153c:	00800074 	movhi	r2,1
   11540:	1098a804 	addi	r2,r2,25248
   11544:	10c00017 	ldw	r3,0(r2)
   11548:	003f2c06 	br	111fc <__alt_data_end+0xffff11fc>
   1154c:	00c05504 	movi	r3,340
   11550:	18800536 	bltu	r3,r2,11568 <_malloc_r+0x7cc>
   11554:	3804d3fa 	srli	r2,r7,15
   11558:	11401e04 	addi	r5,r2,120
   1155c:	10c01dc4 	addi	r3,r2,119
   11560:	294b883a 	add	r5,r5,r5
   11564:	003f5606 	br	112c0 <__alt_data_end+0xffff12c0>
   11568:	00c15504 	movi	r3,1364
   1156c:	18800536 	bltu	r3,r2,11584 <_malloc_r+0x7e8>
   11570:	3804d4ba 	srli	r2,r7,18
   11574:	11401f44 	addi	r5,r2,125
   11578:	10c01f04 	addi	r3,r2,124
   1157c:	294b883a 	add	r5,r5,r5
   11580:	003f4f06 	br	112c0 <__alt_data_end+0xffff12c0>
   11584:	01403f84 	movi	r5,254
   11588:	00c01f84 	movi	r3,126
   1158c:	003f4c06 	br	112c0 <__alt_data_end+0xffff12c0>
   11590:	98800117 	ldw	r2,4(r19)
   11594:	003fa006 	br	11418 <__alt_data_end+0xffff1418>
   11598:	8808d0fa 	srli	r4,r17,3
   1159c:	20800044 	addi	r2,r4,1
   115a0:	1085883a 	add	r2,r2,r2
   115a4:	003e9006 	br	10fe8 <__alt_data_end+0xffff0fe8>

000115a8 <memchr>:
   115a8:	208000cc 	andi	r2,r4,3
   115ac:	280f883a 	mov	r7,r5
   115b0:	10003426 	beq	r2,zero,11684 <memchr+0xdc>
   115b4:	30bfffc4 	addi	r2,r6,-1
   115b8:	30001a26 	beq	r6,zero,11624 <memchr+0x7c>
   115bc:	20c00003 	ldbu	r3,0(r4)
   115c0:	29803fcc 	andi	r6,r5,255
   115c4:	30c0051e 	bne	r6,r3,115dc <memchr+0x34>
   115c8:	00001806 	br	1162c <memchr+0x84>
   115cc:	10001526 	beq	r2,zero,11624 <memchr+0x7c>
   115d0:	20c00003 	ldbu	r3,0(r4)
   115d4:	10bfffc4 	addi	r2,r2,-1
   115d8:	30c01426 	beq	r6,r3,1162c <memchr+0x84>
   115dc:	21000044 	addi	r4,r4,1
   115e0:	20c000cc 	andi	r3,r4,3
   115e4:	183ff91e 	bne	r3,zero,115cc <__alt_data_end+0xffff15cc>
   115e8:	020000c4 	movi	r8,3
   115ec:	40801136 	bltu	r8,r2,11634 <memchr+0x8c>
   115f0:	10000c26 	beq	r2,zero,11624 <memchr+0x7c>
   115f4:	20c00003 	ldbu	r3,0(r4)
   115f8:	29403fcc 	andi	r5,r5,255
   115fc:	28c00b26 	beq	r5,r3,1162c <memchr+0x84>
   11600:	20c00044 	addi	r3,r4,1
   11604:	39803fcc 	andi	r6,r7,255
   11608:	2089883a 	add	r4,r4,r2
   1160c:	00000306 	br	1161c <memchr+0x74>
   11610:	18c00044 	addi	r3,r3,1
   11614:	197fffc3 	ldbu	r5,-1(r3)
   11618:	31400526 	beq	r6,r5,11630 <memchr+0x88>
   1161c:	1805883a 	mov	r2,r3
   11620:	20fffb1e 	bne	r4,r3,11610 <__alt_data_end+0xffff1610>
   11624:	0005883a 	mov	r2,zero
   11628:	f800283a 	ret
   1162c:	2005883a 	mov	r2,r4
   11630:	f800283a 	ret
   11634:	28c03fcc 	andi	r3,r5,255
   11638:	1812923a 	slli	r9,r3,8
   1163c:	02ffbff4 	movhi	r11,65279
   11640:	02a02074 	movhi	r10,32897
   11644:	48d2b03a 	or	r9,r9,r3
   11648:	4806943a 	slli	r3,r9,16
   1164c:	5affbfc4 	addi	r11,r11,-257
   11650:	52a02004 	addi	r10,r10,-32640
   11654:	48d2b03a 	or	r9,r9,r3
   11658:	20c00017 	ldw	r3,0(r4)
   1165c:	48c6f03a 	xor	r3,r9,r3
   11660:	1acd883a 	add	r6,r3,r11
   11664:	00c6303a 	nor	r3,zero,r3
   11668:	30c6703a 	and	r3,r6,r3
   1166c:	1a86703a 	and	r3,r3,r10
   11670:	183fe01e 	bne	r3,zero,115f4 <__alt_data_end+0xffff15f4>
   11674:	10bfff04 	addi	r2,r2,-4
   11678:	21000104 	addi	r4,r4,4
   1167c:	40bff636 	bltu	r8,r2,11658 <__alt_data_end+0xffff1658>
   11680:	003fdb06 	br	115f0 <__alt_data_end+0xffff15f0>
   11684:	3005883a 	mov	r2,r6
   11688:	003fd706 	br	115e8 <__alt_data_end+0xffff15e8>

0001168c <memcpy>:
   1168c:	defffd04 	addi	sp,sp,-12
   11690:	dfc00215 	stw	ra,8(sp)
   11694:	dc400115 	stw	r17,4(sp)
   11698:	dc000015 	stw	r16,0(sp)
   1169c:	00c003c4 	movi	r3,15
   116a0:	2005883a 	mov	r2,r4
   116a4:	1980452e 	bgeu	r3,r6,117bc <memcpy+0x130>
   116a8:	2906b03a 	or	r3,r5,r4
   116ac:	18c000cc 	andi	r3,r3,3
   116b0:	1800441e 	bne	r3,zero,117c4 <memcpy+0x138>
   116b4:	347ffc04 	addi	r17,r6,-16
   116b8:	8822d13a 	srli	r17,r17,4
   116bc:	28c00104 	addi	r3,r5,4
   116c0:	23400104 	addi	r13,r4,4
   116c4:	8820913a 	slli	r16,r17,4
   116c8:	2b000204 	addi	r12,r5,8
   116cc:	22c00204 	addi	r11,r4,8
   116d0:	84000504 	addi	r16,r16,20
   116d4:	2a800304 	addi	r10,r5,12
   116d8:	22400304 	addi	r9,r4,12
   116dc:	2c21883a 	add	r16,r5,r16
   116e0:	2811883a 	mov	r8,r5
   116e4:	200f883a 	mov	r7,r4
   116e8:	41000017 	ldw	r4,0(r8)
   116ec:	1fc00017 	ldw	ra,0(r3)
   116f0:	63c00017 	ldw	r15,0(r12)
   116f4:	39000015 	stw	r4,0(r7)
   116f8:	53800017 	ldw	r14,0(r10)
   116fc:	6fc00015 	stw	ra,0(r13)
   11700:	5bc00015 	stw	r15,0(r11)
   11704:	4b800015 	stw	r14,0(r9)
   11708:	18c00404 	addi	r3,r3,16
   1170c:	39c00404 	addi	r7,r7,16
   11710:	42000404 	addi	r8,r8,16
   11714:	6b400404 	addi	r13,r13,16
   11718:	63000404 	addi	r12,r12,16
   1171c:	5ac00404 	addi	r11,r11,16
   11720:	52800404 	addi	r10,r10,16
   11724:	4a400404 	addi	r9,r9,16
   11728:	1c3fef1e 	bne	r3,r16,116e8 <__alt_data_end+0xffff16e8>
   1172c:	89c00044 	addi	r7,r17,1
   11730:	380e913a 	slli	r7,r7,4
   11734:	310003cc 	andi	r4,r6,15
   11738:	02c000c4 	movi	r11,3
   1173c:	11c7883a 	add	r3,r2,r7
   11740:	29cb883a 	add	r5,r5,r7
   11744:	5900212e 	bgeu	r11,r4,117cc <memcpy+0x140>
   11748:	1813883a 	mov	r9,r3
   1174c:	2811883a 	mov	r8,r5
   11750:	200f883a 	mov	r7,r4
   11754:	42800017 	ldw	r10,0(r8)
   11758:	4a400104 	addi	r9,r9,4
   1175c:	39ffff04 	addi	r7,r7,-4
   11760:	4abfff15 	stw	r10,-4(r9)
   11764:	42000104 	addi	r8,r8,4
   11768:	59fffa36 	bltu	r11,r7,11754 <__alt_data_end+0xffff1754>
   1176c:	213fff04 	addi	r4,r4,-4
   11770:	2008d0ba 	srli	r4,r4,2
   11774:	318000cc 	andi	r6,r6,3
   11778:	21000044 	addi	r4,r4,1
   1177c:	2109883a 	add	r4,r4,r4
   11780:	2109883a 	add	r4,r4,r4
   11784:	1907883a 	add	r3,r3,r4
   11788:	290b883a 	add	r5,r5,r4
   1178c:	30000626 	beq	r6,zero,117a8 <memcpy+0x11c>
   11790:	198d883a 	add	r6,r3,r6
   11794:	29c00003 	ldbu	r7,0(r5)
   11798:	18c00044 	addi	r3,r3,1
   1179c:	29400044 	addi	r5,r5,1
   117a0:	19ffffc5 	stb	r7,-1(r3)
   117a4:	19bffb1e 	bne	r3,r6,11794 <__alt_data_end+0xffff1794>
   117a8:	dfc00217 	ldw	ra,8(sp)
   117ac:	dc400117 	ldw	r17,4(sp)
   117b0:	dc000017 	ldw	r16,0(sp)
   117b4:	dec00304 	addi	sp,sp,12
   117b8:	f800283a 	ret
   117bc:	2007883a 	mov	r3,r4
   117c0:	003ff206 	br	1178c <__alt_data_end+0xffff178c>
   117c4:	2007883a 	mov	r3,r4
   117c8:	003ff106 	br	11790 <__alt_data_end+0xffff1790>
   117cc:	200d883a 	mov	r6,r4
   117d0:	003fee06 	br	1178c <__alt_data_end+0xffff178c>

000117d4 <memmove>:
   117d4:	2005883a 	mov	r2,r4
   117d8:	29000b2e 	bgeu	r5,r4,11808 <memmove+0x34>
   117dc:	298f883a 	add	r7,r5,r6
   117e0:	21c0092e 	bgeu	r4,r7,11808 <memmove+0x34>
   117e4:	2187883a 	add	r3,r4,r6
   117e8:	198bc83a 	sub	r5,r3,r6
   117ec:	30004826 	beq	r6,zero,11910 <memmove+0x13c>
   117f0:	39ffffc4 	addi	r7,r7,-1
   117f4:	39000003 	ldbu	r4,0(r7)
   117f8:	18ffffc4 	addi	r3,r3,-1
   117fc:	19000005 	stb	r4,0(r3)
   11800:	28fffb1e 	bne	r5,r3,117f0 <__alt_data_end+0xffff17f0>
   11804:	f800283a 	ret
   11808:	00c003c4 	movi	r3,15
   1180c:	1980412e 	bgeu	r3,r6,11914 <memmove+0x140>
   11810:	2886b03a 	or	r3,r5,r2
   11814:	18c000cc 	andi	r3,r3,3
   11818:	1800401e 	bne	r3,zero,1191c <memmove+0x148>
   1181c:	33fffc04 	addi	r15,r6,-16
   11820:	781ed13a 	srli	r15,r15,4
   11824:	28c00104 	addi	r3,r5,4
   11828:	13400104 	addi	r13,r2,4
   1182c:	781c913a 	slli	r14,r15,4
   11830:	2b000204 	addi	r12,r5,8
   11834:	12c00204 	addi	r11,r2,8
   11838:	73800504 	addi	r14,r14,20
   1183c:	2a800304 	addi	r10,r5,12
   11840:	12400304 	addi	r9,r2,12
   11844:	2b9d883a 	add	r14,r5,r14
   11848:	2811883a 	mov	r8,r5
   1184c:	100f883a 	mov	r7,r2
   11850:	41000017 	ldw	r4,0(r8)
   11854:	39c00404 	addi	r7,r7,16
   11858:	18c00404 	addi	r3,r3,16
   1185c:	393ffc15 	stw	r4,-16(r7)
   11860:	193ffc17 	ldw	r4,-16(r3)
   11864:	6b400404 	addi	r13,r13,16
   11868:	5ac00404 	addi	r11,r11,16
   1186c:	693ffc15 	stw	r4,-16(r13)
   11870:	61000017 	ldw	r4,0(r12)
   11874:	4a400404 	addi	r9,r9,16
   11878:	42000404 	addi	r8,r8,16
   1187c:	593ffc15 	stw	r4,-16(r11)
   11880:	51000017 	ldw	r4,0(r10)
   11884:	63000404 	addi	r12,r12,16
   11888:	52800404 	addi	r10,r10,16
   1188c:	493ffc15 	stw	r4,-16(r9)
   11890:	1bbfef1e 	bne	r3,r14,11850 <__alt_data_end+0xffff1850>
   11894:	79000044 	addi	r4,r15,1
   11898:	2008913a 	slli	r4,r4,4
   1189c:	328003cc 	andi	r10,r6,15
   118a0:	02c000c4 	movi	r11,3
   118a4:	1107883a 	add	r3,r2,r4
   118a8:	290b883a 	add	r5,r5,r4
   118ac:	5a801e2e 	bgeu	r11,r10,11928 <memmove+0x154>
   118b0:	1813883a 	mov	r9,r3
   118b4:	2811883a 	mov	r8,r5
   118b8:	500f883a 	mov	r7,r10
   118bc:	41000017 	ldw	r4,0(r8)
   118c0:	4a400104 	addi	r9,r9,4
   118c4:	39ffff04 	addi	r7,r7,-4
   118c8:	493fff15 	stw	r4,-4(r9)
   118cc:	42000104 	addi	r8,r8,4
   118d0:	59fffa36 	bltu	r11,r7,118bc <__alt_data_end+0xffff18bc>
   118d4:	513fff04 	addi	r4,r10,-4
   118d8:	2008d0ba 	srli	r4,r4,2
   118dc:	318000cc 	andi	r6,r6,3
   118e0:	21000044 	addi	r4,r4,1
   118e4:	2109883a 	add	r4,r4,r4
   118e8:	2109883a 	add	r4,r4,r4
   118ec:	1907883a 	add	r3,r3,r4
   118f0:	290b883a 	add	r5,r5,r4
   118f4:	30000b26 	beq	r6,zero,11924 <memmove+0x150>
   118f8:	198d883a 	add	r6,r3,r6
   118fc:	29c00003 	ldbu	r7,0(r5)
   11900:	18c00044 	addi	r3,r3,1
   11904:	29400044 	addi	r5,r5,1
   11908:	19ffffc5 	stb	r7,-1(r3)
   1190c:	19bffb1e 	bne	r3,r6,118fc <__alt_data_end+0xffff18fc>
   11910:	f800283a 	ret
   11914:	1007883a 	mov	r3,r2
   11918:	003ff606 	br	118f4 <__alt_data_end+0xffff18f4>
   1191c:	1007883a 	mov	r3,r2
   11920:	003ff506 	br	118f8 <__alt_data_end+0xffff18f8>
   11924:	f800283a 	ret
   11928:	500d883a 	mov	r6,r10
   1192c:	003ff106 	br	118f4 <__alt_data_end+0xffff18f4>

00011930 <memset>:
   11930:	20c000cc 	andi	r3,r4,3
   11934:	2005883a 	mov	r2,r4
   11938:	18004426 	beq	r3,zero,11a4c <memset+0x11c>
   1193c:	31ffffc4 	addi	r7,r6,-1
   11940:	30004026 	beq	r6,zero,11a44 <memset+0x114>
   11944:	2813883a 	mov	r9,r5
   11948:	200d883a 	mov	r6,r4
   1194c:	2007883a 	mov	r3,r4
   11950:	00000406 	br	11964 <memset+0x34>
   11954:	3a3fffc4 	addi	r8,r7,-1
   11958:	31800044 	addi	r6,r6,1
   1195c:	38003926 	beq	r7,zero,11a44 <memset+0x114>
   11960:	400f883a 	mov	r7,r8
   11964:	18c00044 	addi	r3,r3,1
   11968:	32400005 	stb	r9,0(r6)
   1196c:	1a0000cc 	andi	r8,r3,3
   11970:	403ff81e 	bne	r8,zero,11954 <__alt_data_end+0xffff1954>
   11974:	010000c4 	movi	r4,3
   11978:	21c02d2e 	bgeu	r4,r7,11a30 <memset+0x100>
   1197c:	29003fcc 	andi	r4,r5,255
   11980:	200c923a 	slli	r6,r4,8
   11984:	3108b03a 	or	r4,r6,r4
   11988:	200c943a 	slli	r6,r4,16
   1198c:	218cb03a 	or	r6,r4,r6
   11990:	010003c4 	movi	r4,15
   11994:	21c0182e 	bgeu	r4,r7,119f8 <memset+0xc8>
   11998:	3b3ffc04 	addi	r12,r7,-16
   1199c:	6018d13a 	srli	r12,r12,4
   119a0:	1a000104 	addi	r8,r3,4
   119a4:	1ac00204 	addi	r11,r3,8
   119a8:	6008913a 	slli	r4,r12,4
   119ac:	1a800304 	addi	r10,r3,12
   119b0:	1813883a 	mov	r9,r3
   119b4:	21000504 	addi	r4,r4,20
   119b8:	1909883a 	add	r4,r3,r4
   119bc:	49800015 	stw	r6,0(r9)
   119c0:	41800015 	stw	r6,0(r8)
   119c4:	59800015 	stw	r6,0(r11)
   119c8:	51800015 	stw	r6,0(r10)
   119cc:	42000404 	addi	r8,r8,16
   119d0:	4a400404 	addi	r9,r9,16
   119d4:	5ac00404 	addi	r11,r11,16
   119d8:	52800404 	addi	r10,r10,16
   119dc:	413ff71e 	bne	r8,r4,119bc <__alt_data_end+0xffff19bc>
   119e0:	63000044 	addi	r12,r12,1
   119e4:	6018913a 	slli	r12,r12,4
   119e8:	39c003cc 	andi	r7,r7,15
   119ec:	010000c4 	movi	r4,3
   119f0:	1b07883a 	add	r3,r3,r12
   119f4:	21c00e2e 	bgeu	r4,r7,11a30 <memset+0x100>
   119f8:	1813883a 	mov	r9,r3
   119fc:	3811883a 	mov	r8,r7
   11a00:	010000c4 	movi	r4,3
   11a04:	49800015 	stw	r6,0(r9)
   11a08:	423fff04 	addi	r8,r8,-4
   11a0c:	4a400104 	addi	r9,r9,4
   11a10:	223ffc36 	bltu	r4,r8,11a04 <__alt_data_end+0xffff1a04>
   11a14:	393fff04 	addi	r4,r7,-4
   11a18:	2008d0ba 	srli	r4,r4,2
   11a1c:	39c000cc 	andi	r7,r7,3
   11a20:	21000044 	addi	r4,r4,1
   11a24:	2109883a 	add	r4,r4,r4
   11a28:	2109883a 	add	r4,r4,r4
   11a2c:	1907883a 	add	r3,r3,r4
   11a30:	38000526 	beq	r7,zero,11a48 <memset+0x118>
   11a34:	19cf883a 	add	r7,r3,r7
   11a38:	19400005 	stb	r5,0(r3)
   11a3c:	18c00044 	addi	r3,r3,1
   11a40:	38fffd1e 	bne	r7,r3,11a38 <__alt_data_end+0xffff1a38>
   11a44:	f800283a 	ret
   11a48:	f800283a 	ret
   11a4c:	2007883a 	mov	r3,r4
   11a50:	300f883a 	mov	r7,r6
   11a54:	003fc706 	br	11974 <__alt_data_end+0xffff1974>

00011a58 <_realloc_r>:
   11a58:	defff604 	addi	sp,sp,-40
   11a5c:	dc800215 	stw	r18,8(sp)
   11a60:	dfc00915 	stw	ra,36(sp)
   11a64:	df000815 	stw	fp,32(sp)
   11a68:	ddc00715 	stw	r23,28(sp)
   11a6c:	dd800615 	stw	r22,24(sp)
   11a70:	dd400515 	stw	r21,20(sp)
   11a74:	dd000415 	stw	r20,16(sp)
   11a78:	dcc00315 	stw	r19,12(sp)
   11a7c:	dc400115 	stw	r17,4(sp)
   11a80:	dc000015 	stw	r16,0(sp)
   11a84:	3025883a 	mov	r18,r6
   11a88:	2800b726 	beq	r5,zero,11d68 <_realloc_r+0x310>
   11a8c:	282b883a 	mov	r21,r5
   11a90:	2029883a 	mov	r20,r4
   11a94:	00135900 	call	13590 <__malloc_lock>
   11a98:	a8bfff17 	ldw	r2,-4(r21)
   11a9c:	043fff04 	movi	r16,-4
   11aa0:	90c002c4 	addi	r3,r18,11
   11aa4:	01000584 	movi	r4,22
   11aa8:	acfffe04 	addi	r19,r21,-8
   11aac:	1420703a 	and	r16,r2,r16
   11ab0:	20c0332e 	bgeu	r4,r3,11b80 <_realloc_r+0x128>
   11ab4:	047ffe04 	movi	r17,-8
   11ab8:	1c62703a 	and	r17,r3,r17
   11abc:	8807883a 	mov	r3,r17
   11ac0:	88005816 	blt	r17,zero,11c24 <_realloc_r+0x1cc>
   11ac4:	8c805736 	bltu	r17,r18,11c24 <_realloc_r+0x1cc>
   11ac8:	80c0300e 	bge	r16,r3,11b8c <_realloc_r+0x134>
   11acc:	07000074 	movhi	fp,1
   11ad0:	e7148b04 	addi	fp,fp,21036
   11ad4:	e1c00217 	ldw	r7,8(fp)
   11ad8:	9c09883a 	add	r4,r19,r16
   11adc:	22000117 	ldw	r8,4(r4)
   11ae0:	21c06326 	beq	r4,r7,11c70 <_realloc_r+0x218>
   11ae4:	017fff84 	movi	r5,-2
   11ae8:	414a703a 	and	r5,r8,r5
   11aec:	214b883a 	add	r5,r4,r5
   11af0:	29800117 	ldw	r6,4(r5)
   11af4:	3180004c 	andi	r6,r6,1
   11af8:	30003f26 	beq	r6,zero,11bf8 <_realloc_r+0x1a0>
   11afc:	1080004c 	andi	r2,r2,1
   11b00:	10008326 	beq	r2,zero,11d10 <_realloc_r+0x2b8>
   11b04:	900b883a 	mov	r5,r18
   11b08:	a009883a 	mov	r4,r20
   11b0c:	0010d9c0 	call	10d9c <_malloc_r>
   11b10:	1025883a 	mov	r18,r2
   11b14:	10011e26 	beq	r2,zero,11f90 <_realloc_r+0x538>
   11b18:	a93fff17 	ldw	r4,-4(r21)
   11b1c:	10fffe04 	addi	r3,r2,-8
   11b20:	00bfff84 	movi	r2,-2
   11b24:	2084703a 	and	r2,r4,r2
   11b28:	9885883a 	add	r2,r19,r2
   11b2c:	1880ee26 	beq	r3,r2,11ee8 <_realloc_r+0x490>
   11b30:	81bfff04 	addi	r6,r16,-4
   11b34:	00800904 	movi	r2,36
   11b38:	1180b836 	bltu	r2,r6,11e1c <_realloc_r+0x3c4>
   11b3c:	00c004c4 	movi	r3,19
   11b40:	19809636 	bltu	r3,r6,11d9c <_realloc_r+0x344>
   11b44:	9005883a 	mov	r2,r18
   11b48:	a807883a 	mov	r3,r21
   11b4c:	19000017 	ldw	r4,0(r3)
   11b50:	11000015 	stw	r4,0(r2)
   11b54:	19000117 	ldw	r4,4(r3)
   11b58:	11000115 	stw	r4,4(r2)
   11b5c:	18c00217 	ldw	r3,8(r3)
   11b60:	10c00215 	stw	r3,8(r2)
   11b64:	a80b883a 	mov	r5,r21
   11b68:	a009883a 	mov	r4,r20
   11b6c:	00128240 	call	12824 <_free_r>
   11b70:	a009883a 	mov	r4,r20
   11b74:	00135b40 	call	135b4 <__malloc_unlock>
   11b78:	9005883a 	mov	r2,r18
   11b7c:	00001206 	br	11bc8 <_realloc_r+0x170>
   11b80:	00c00404 	movi	r3,16
   11b84:	1823883a 	mov	r17,r3
   11b88:	003fce06 	br	11ac4 <__alt_data_end+0xffff1ac4>
   11b8c:	a825883a 	mov	r18,r21
   11b90:	8445c83a 	sub	r2,r16,r17
   11b94:	00c003c4 	movi	r3,15
   11b98:	18802636 	bltu	r3,r2,11c34 <_realloc_r+0x1dc>
   11b9c:	99800117 	ldw	r6,4(r19)
   11ba0:	9c07883a 	add	r3,r19,r16
   11ba4:	3180004c 	andi	r6,r6,1
   11ba8:	3420b03a 	or	r16,r6,r16
   11bac:	9c000115 	stw	r16,4(r19)
   11bb0:	18800117 	ldw	r2,4(r3)
   11bb4:	10800054 	ori	r2,r2,1
   11bb8:	18800115 	stw	r2,4(r3)
   11bbc:	a009883a 	mov	r4,r20
   11bc0:	00135b40 	call	135b4 <__malloc_unlock>
   11bc4:	9005883a 	mov	r2,r18
   11bc8:	dfc00917 	ldw	ra,36(sp)
   11bcc:	df000817 	ldw	fp,32(sp)
   11bd0:	ddc00717 	ldw	r23,28(sp)
   11bd4:	dd800617 	ldw	r22,24(sp)
   11bd8:	dd400517 	ldw	r21,20(sp)
   11bdc:	dd000417 	ldw	r20,16(sp)
   11be0:	dcc00317 	ldw	r19,12(sp)
   11be4:	dc800217 	ldw	r18,8(sp)
   11be8:	dc400117 	ldw	r17,4(sp)
   11bec:	dc000017 	ldw	r16,0(sp)
   11bf0:	dec00a04 	addi	sp,sp,40
   11bf4:	f800283a 	ret
   11bf8:	017fff04 	movi	r5,-4
   11bfc:	414a703a 	and	r5,r8,r5
   11c00:	814d883a 	add	r6,r16,r5
   11c04:	30c01f16 	blt	r6,r3,11c84 <_realloc_r+0x22c>
   11c08:	20800317 	ldw	r2,12(r4)
   11c0c:	20c00217 	ldw	r3,8(r4)
   11c10:	a825883a 	mov	r18,r21
   11c14:	3021883a 	mov	r16,r6
   11c18:	18800315 	stw	r2,12(r3)
   11c1c:	10c00215 	stw	r3,8(r2)
   11c20:	003fdb06 	br	11b90 <__alt_data_end+0xffff1b90>
   11c24:	00800304 	movi	r2,12
   11c28:	a0800015 	stw	r2,0(r20)
   11c2c:	0005883a 	mov	r2,zero
   11c30:	003fe506 	br	11bc8 <__alt_data_end+0xffff1bc8>
   11c34:	98c00117 	ldw	r3,4(r19)
   11c38:	9c4b883a 	add	r5,r19,r17
   11c3c:	11000054 	ori	r4,r2,1
   11c40:	18c0004c 	andi	r3,r3,1
   11c44:	1c62b03a 	or	r17,r3,r17
   11c48:	9c400115 	stw	r17,4(r19)
   11c4c:	29000115 	stw	r4,4(r5)
   11c50:	2885883a 	add	r2,r5,r2
   11c54:	10c00117 	ldw	r3,4(r2)
   11c58:	29400204 	addi	r5,r5,8
   11c5c:	a009883a 	mov	r4,r20
   11c60:	18c00054 	ori	r3,r3,1
   11c64:	10c00115 	stw	r3,4(r2)
   11c68:	00128240 	call	12824 <_free_r>
   11c6c:	003fd306 	br	11bbc <__alt_data_end+0xffff1bbc>
   11c70:	017fff04 	movi	r5,-4
   11c74:	414a703a 	and	r5,r8,r5
   11c78:	89800404 	addi	r6,r17,16
   11c7c:	8151883a 	add	r8,r16,r5
   11c80:	4180590e 	bge	r8,r6,11de8 <_realloc_r+0x390>
   11c84:	1080004c 	andi	r2,r2,1
   11c88:	103f9e1e 	bne	r2,zero,11b04 <__alt_data_end+0xffff1b04>
   11c8c:	adbffe17 	ldw	r22,-8(r21)
   11c90:	00bfff04 	movi	r2,-4
   11c94:	9dadc83a 	sub	r22,r19,r22
   11c98:	b1800117 	ldw	r6,4(r22)
   11c9c:	3084703a 	and	r2,r6,r2
   11ca0:	20002026 	beq	r4,zero,11d24 <_realloc_r+0x2cc>
   11ca4:	80af883a 	add	r23,r16,r2
   11ca8:	b96f883a 	add	r23,r23,r5
   11cac:	21c05f26 	beq	r4,r7,11e2c <_realloc_r+0x3d4>
   11cb0:	b8c01c16 	blt	r23,r3,11d24 <_realloc_r+0x2cc>
   11cb4:	20800317 	ldw	r2,12(r4)
   11cb8:	20c00217 	ldw	r3,8(r4)
   11cbc:	81bfff04 	addi	r6,r16,-4
   11cc0:	01000904 	movi	r4,36
   11cc4:	18800315 	stw	r2,12(r3)
   11cc8:	10c00215 	stw	r3,8(r2)
   11ccc:	b0c00217 	ldw	r3,8(r22)
   11cd0:	b0800317 	ldw	r2,12(r22)
   11cd4:	b4800204 	addi	r18,r22,8
   11cd8:	18800315 	stw	r2,12(r3)
   11cdc:	10c00215 	stw	r3,8(r2)
   11ce0:	21801b36 	bltu	r4,r6,11d50 <_realloc_r+0x2f8>
   11ce4:	008004c4 	movi	r2,19
   11ce8:	1180352e 	bgeu	r2,r6,11dc0 <_realloc_r+0x368>
   11cec:	a8800017 	ldw	r2,0(r21)
   11cf0:	b0800215 	stw	r2,8(r22)
   11cf4:	a8800117 	ldw	r2,4(r21)
   11cf8:	b0800315 	stw	r2,12(r22)
   11cfc:	008006c4 	movi	r2,27
   11d00:	11807f36 	bltu	r2,r6,11f00 <_realloc_r+0x4a8>
   11d04:	b0800404 	addi	r2,r22,16
   11d08:	ad400204 	addi	r21,r21,8
   11d0c:	00002d06 	br	11dc4 <_realloc_r+0x36c>
   11d10:	adbffe17 	ldw	r22,-8(r21)
   11d14:	00bfff04 	movi	r2,-4
   11d18:	9dadc83a 	sub	r22,r19,r22
   11d1c:	b1000117 	ldw	r4,4(r22)
   11d20:	2084703a 	and	r2,r4,r2
   11d24:	b03f7726 	beq	r22,zero,11b04 <__alt_data_end+0xffff1b04>
   11d28:	80af883a 	add	r23,r16,r2
   11d2c:	b8ff7516 	blt	r23,r3,11b04 <__alt_data_end+0xffff1b04>
   11d30:	b0800317 	ldw	r2,12(r22)
   11d34:	b0c00217 	ldw	r3,8(r22)
   11d38:	81bfff04 	addi	r6,r16,-4
   11d3c:	01000904 	movi	r4,36
   11d40:	18800315 	stw	r2,12(r3)
   11d44:	10c00215 	stw	r3,8(r2)
   11d48:	b4800204 	addi	r18,r22,8
   11d4c:	21bfe52e 	bgeu	r4,r6,11ce4 <__alt_data_end+0xffff1ce4>
   11d50:	a80b883a 	mov	r5,r21
   11d54:	9009883a 	mov	r4,r18
   11d58:	00117d40 	call	117d4 <memmove>
   11d5c:	b821883a 	mov	r16,r23
   11d60:	b027883a 	mov	r19,r22
   11d64:	003f8a06 	br	11b90 <__alt_data_end+0xffff1b90>
   11d68:	300b883a 	mov	r5,r6
   11d6c:	dfc00917 	ldw	ra,36(sp)
   11d70:	df000817 	ldw	fp,32(sp)
   11d74:	ddc00717 	ldw	r23,28(sp)
   11d78:	dd800617 	ldw	r22,24(sp)
   11d7c:	dd400517 	ldw	r21,20(sp)
   11d80:	dd000417 	ldw	r20,16(sp)
   11d84:	dcc00317 	ldw	r19,12(sp)
   11d88:	dc800217 	ldw	r18,8(sp)
   11d8c:	dc400117 	ldw	r17,4(sp)
   11d90:	dc000017 	ldw	r16,0(sp)
   11d94:	dec00a04 	addi	sp,sp,40
   11d98:	0010d9c1 	jmpi	10d9c <_malloc_r>
   11d9c:	a8c00017 	ldw	r3,0(r21)
   11da0:	90c00015 	stw	r3,0(r18)
   11da4:	a8c00117 	ldw	r3,4(r21)
   11da8:	90c00115 	stw	r3,4(r18)
   11dac:	00c006c4 	movi	r3,27
   11db0:	19804536 	bltu	r3,r6,11ec8 <_realloc_r+0x470>
   11db4:	90800204 	addi	r2,r18,8
   11db8:	a8c00204 	addi	r3,r21,8
   11dbc:	003f6306 	br	11b4c <__alt_data_end+0xffff1b4c>
   11dc0:	9005883a 	mov	r2,r18
   11dc4:	a8c00017 	ldw	r3,0(r21)
   11dc8:	b821883a 	mov	r16,r23
   11dcc:	b027883a 	mov	r19,r22
   11dd0:	10c00015 	stw	r3,0(r2)
   11dd4:	a8c00117 	ldw	r3,4(r21)
   11dd8:	10c00115 	stw	r3,4(r2)
   11ddc:	a8c00217 	ldw	r3,8(r21)
   11de0:	10c00215 	stw	r3,8(r2)
   11de4:	003f6a06 	br	11b90 <__alt_data_end+0xffff1b90>
   11de8:	9c67883a 	add	r19,r19,r17
   11dec:	4445c83a 	sub	r2,r8,r17
   11df0:	e4c00215 	stw	r19,8(fp)
   11df4:	10800054 	ori	r2,r2,1
   11df8:	98800115 	stw	r2,4(r19)
   11dfc:	a8bfff17 	ldw	r2,-4(r21)
   11e00:	a009883a 	mov	r4,r20
   11e04:	1080004c 	andi	r2,r2,1
   11e08:	1462b03a 	or	r17,r2,r17
   11e0c:	ac7fff15 	stw	r17,-4(r21)
   11e10:	00135b40 	call	135b4 <__malloc_unlock>
   11e14:	a805883a 	mov	r2,r21
   11e18:	003f6b06 	br	11bc8 <__alt_data_end+0xffff1bc8>
   11e1c:	a80b883a 	mov	r5,r21
   11e20:	9009883a 	mov	r4,r18
   11e24:	00117d40 	call	117d4 <memmove>
   11e28:	003f4e06 	br	11b64 <__alt_data_end+0xffff1b64>
   11e2c:	89000404 	addi	r4,r17,16
   11e30:	b93fbc16 	blt	r23,r4,11d24 <__alt_data_end+0xffff1d24>
   11e34:	b0800317 	ldw	r2,12(r22)
   11e38:	b0c00217 	ldw	r3,8(r22)
   11e3c:	81bfff04 	addi	r6,r16,-4
   11e40:	01000904 	movi	r4,36
   11e44:	18800315 	stw	r2,12(r3)
   11e48:	10c00215 	stw	r3,8(r2)
   11e4c:	b4800204 	addi	r18,r22,8
   11e50:	21804336 	bltu	r4,r6,11f60 <_realloc_r+0x508>
   11e54:	008004c4 	movi	r2,19
   11e58:	11803f2e 	bgeu	r2,r6,11f58 <_realloc_r+0x500>
   11e5c:	a8800017 	ldw	r2,0(r21)
   11e60:	b0800215 	stw	r2,8(r22)
   11e64:	a8800117 	ldw	r2,4(r21)
   11e68:	b0800315 	stw	r2,12(r22)
   11e6c:	008006c4 	movi	r2,27
   11e70:	11803f36 	bltu	r2,r6,11f70 <_realloc_r+0x518>
   11e74:	b0800404 	addi	r2,r22,16
   11e78:	ad400204 	addi	r21,r21,8
   11e7c:	a8c00017 	ldw	r3,0(r21)
   11e80:	10c00015 	stw	r3,0(r2)
   11e84:	a8c00117 	ldw	r3,4(r21)
   11e88:	10c00115 	stw	r3,4(r2)
   11e8c:	a8c00217 	ldw	r3,8(r21)
   11e90:	10c00215 	stw	r3,8(r2)
   11e94:	b447883a 	add	r3,r22,r17
   11e98:	bc45c83a 	sub	r2,r23,r17
   11e9c:	e0c00215 	stw	r3,8(fp)
   11ea0:	10800054 	ori	r2,r2,1
   11ea4:	18800115 	stw	r2,4(r3)
   11ea8:	b0800117 	ldw	r2,4(r22)
   11eac:	a009883a 	mov	r4,r20
   11eb0:	1080004c 	andi	r2,r2,1
   11eb4:	1462b03a 	or	r17,r2,r17
   11eb8:	b4400115 	stw	r17,4(r22)
   11ebc:	00135b40 	call	135b4 <__malloc_unlock>
   11ec0:	9005883a 	mov	r2,r18
   11ec4:	003f4006 	br	11bc8 <__alt_data_end+0xffff1bc8>
   11ec8:	a8c00217 	ldw	r3,8(r21)
   11ecc:	90c00215 	stw	r3,8(r18)
   11ed0:	a8c00317 	ldw	r3,12(r21)
   11ed4:	90c00315 	stw	r3,12(r18)
   11ed8:	30801126 	beq	r6,r2,11f20 <_realloc_r+0x4c8>
   11edc:	90800404 	addi	r2,r18,16
   11ee0:	a8c00404 	addi	r3,r21,16
   11ee4:	003f1906 	br	11b4c <__alt_data_end+0xffff1b4c>
   11ee8:	90ffff17 	ldw	r3,-4(r18)
   11eec:	00bfff04 	movi	r2,-4
   11ef0:	a825883a 	mov	r18,r21
   11ef4:	1884703a 	and	r2,r3,r2
   11ef8:	80a1883a 	add	r16,r16,r2
   11efc:	003f2406 	br	11b90 <__alt_data_end+0xffff1b90>
   11f00:	a8800217 	ldw	r2,8(r21)
   11f04:	b0800415 	stw	r2,16(r22)
   11f08:	a8800317 	ldw	r2,12(r21)
   11f0c:	b0800515 	stw	r2,20(r22)
   11f10:	31000a26 	beq	r6,r4,11f3c <_realloc_r+0x4e4>
   11f14:	b0800604 	addi	r2,r22,24
   11f18:	ad400404 	addi	r21,r21,16
   11f1c:	003fa906 	br	11dc4 <__alt_data_end+0xffff1dc4>
   11f20:	a9000417 	ldw	r4,16(r21)
   11f24:	90800604 	addi	r2,r18,24
   11f28:	a8c00604 	addi	r3,r21,24
   11f2c:	91000415 	stw	r4,16(r18)
   11f30:	a9000517 	ldw	r4,20(r21)
   11f34:	91000515 	stw	r4,20(r18)
   11f38:	003f0406 	br	11b4c <__alt_data_end+0xffff1b4c>
   11f3c:	a8c00417 	ldw	r3,16(r21)
   11f40:	ad400604 	addi	r21,r21,24
   11f44:	b0800804 	addi	r2,r22,32
   11f48:	b0c00615 	stw	r3,24(r22)
   11f4c:	a8ffff17 	ldw	r3,-4(r21)
   11f50:	b0c00715 	stw	r3,28(r22)
   11f54:	003f9b06 	br	11dc4 <__alt_data_end+0xffff1dc4>
   11f58:	9005883a 	mov	r2,r18
   11f5c:	003fc706 	br	11e7c <__alt_data_end+0xffff1e7c>
   11f60:	a80b883a 	mov	r5,r21
   11f64:	9009883a 	mov	r4,r18
   11f68:	00117d40 	call	117d4 <memmove>
   11f6c:	003fc906 	br	11e94 <__alt_data_end+0xffff1e94>
   11f70:	a8800217 	ldw	r2,8(r21)
   11f74:	b0800415 	stw	r2,16(r22)
   11f78:	a8800317 	ldw	r2,12(r21)
   11f7c:	b0800515 	stw	r2,20(r22)
   11f80:	31000726 	beq	r6,r4,11fa0 <_realloc_r+0x548>
   11f84:	b0800604 	addi	r2,r22,24
   11f88:	ad400404 	addi	r21,r21,16
   11f8c:	003fbb06 	br	11e7c <__alt_data_end+0xffff1e7c>
   11f90:	a009883a 	mov	r4,r20
   11f94:	00135b40 	call	135b4 <__malloc_unlock>
   11f98:	0005883a 	mov	r2,zero
   11f9c:	003f0a06 	br	11bc8 <__alt_data_end+0xffff1bc8>
   11fa0:	a8c00417 	ldw	r3,16(r21)
   11fa4:	ad400604 	addi	r21,r21,24
   11fa8:	b0800804 	addi	r2,r22,32
   11fac:	b0c00615 	stw	r3,24(r22)
   11fb0:	a8ffff17 	ldw	r3,-4(r21)
   11fb4:	b0c00715 	stw	r3,28(r22)
   11fb8:	003fb006 	br	11e7c <__alt_data_end+0xffff1e7c>

00011fbc <_sbrk_r>:
   11fbc:	defffd04 	addi	sp,sp,-12
   11fc0:	dc000015 	stw	r16,0(sp)
   11fc4:	04000074 	movhi	r16,1
   11fc8:	dc400115 	stw	r17,4(sp)
   11fcc:	8418a104 	addi	r16,r16,25220
   11fd0:	2023883a 	mov	r17,r4
   11fd4:	2809883a 	mov	r4,r5
   11fd8:	dfc00215 	stw	ra,8(sp)
   11fdc:	80000015 	stw	zero,0(r16)
   11fe0:	00137740 	call	13774 <sbrk>
   11fe4:	00ffffc4 	movi	r3,-1
   11fe8:	10c00526 	beq	r2,r3,12000 <_sbrk_r+0x44>
   11fec:	dfc00217 	ldw	ra,8(sp)
   11ff0:	dc400117 	ldw	r17,4(sp)
   11ff4:	dc000017 	ldw	r16,0(sp)
   11ff8:	dec00304 	addi	sp,sp,12
   11ffc:	f800283a 	ret
   12000:	80c00017 	ldw	r3,0(r16)
   12004:	183ff926 	beq	r3,zero,11fec <__alt_data_end+0xffff1fec>
   12008:	88c00015 	stw	r3,0(r17)
   1200c:	003ff706 	br	11fec <__alt_data_end+0xffff1fec>

00012010 <__sread>:
   12010:	defffe04 	addi	sp,sp,-8
   12014:	dc000015 	stw	r16,0(sp)
   12018:	2821883a 	mov	r16,r5
   1201c:	2940038f 	ldh	r5,14(r5)
   12020:	dfc00115 	stw	ra,4(sp)
   12024:	0012d500 	call	12d50 <_read_r>
   12028:	10000716 	blt	r2,zero,12048 <__sread+0x38>
   1202c:	80c01417 	ldw	r3,80(r16)
   12030:	1887883a 	add	r3,r3,r2
   12034:	80c01415 	stw	r3,80(r16)
   12038:	dfc00117 	ldw	ra,4(sp)
   1203c:	dc000017 	ldw	r16,0(sp)
   12040:	dec00204 	addi	sp,sp,8
   12044:	f800283a 	ret
   12048:	80c0030b 	ldhu	r3,12(r16)
   1204c:	18fbffcc 	andi	r3,r3,61439
   12050:	80c0030d 	sth	r3,12(r16)
   12054:	dfc00117 	ldw	ra,4(sp)
   12058:	dc000017 	ldw	r16,0(sp)
   1205c:	dec00204 	addi	sp,sp,8
   12060:	f800283a 	ret

00012064 <__seofread>:
   12064:	0005883a 	mov	r2,zero
   12068:	f800283a 	ret

0001206c <__swrite>:
   1206c:	2880030b 	ldhu	r2,12(r5)
   12070:	defffb04 	addi	sp,sp,-20
   12074:	dcc00315 	stw	r19,12(sp)
   12078:	dc800215 	stw	r18,8(sp)
   1207c:	dc400115 	stw	r17,4(sp)
   12080:	dc000015 	stw	r16,0(sp)
   12084:	dfc00415 	stw	ra,16(sp)
   12088:	10c0400c 	andi	r3,r2,256
   1208c:	2821883a 	mov	r16,r5
   12090:	2023883a 	mov	r17,r4
   12094:	3025883a 	mov	r18,r6
   12098:	3827883a 	mov	r19,r7
   1209c:	18000526 	beq	r3,zero,120b4 <__swrite+0x48>
   120a0:	2940038f 	ldh	r5,14(r5)
   120a4:	01c00084 	movi	r7,2
   120a8:	000d883a 	mov	r6,zero
   120ac:	0012b340 	call	12b34 <_lseek_r>
   120b0:	8080030b 	ldhu	r2,12(r16)
   120b4:	8140038f 	ldh	r5,14(r16)
   120b8:	10bbffcc 	andi	r2,r2,61439
   120bc:	980f883a 	mov	r7,r19
   120c0:	900d883a 	mov	r6,r18
   120c4:	8809883a 	mov	r4,r17
   120c8:	8080030d 	sth	r2,12(r16)
   120cc:	dfc00417 	ldw	ra,16(sp)
   120d0:	dcc00317 	ldw	r19,12(sp)
   120d4:	dc800217 	ldw	r18,8(sp)
   120d8:	dc400117 	ldw	r17,4(sp)
   120dc:	dc000017 	ldw	r16,0(sp)
   120e0:	dec00504 	addi	sp,sp,20
   120e4:	001214c1 	jmpi	1214c <_write_r>

000120e8 <__sseek>:
   120e8:	defffe04 	addi	sp,sp,-8
   120ec:	dc000015 	stw	r16,0(sp)
   120f0:	2821883a 	mov	r16,r5
   120f4:	2940038f 	ldh	r5,14(r5)
   120f8:	dfc00115 	stw	ra,4(sp)
   120fc:	0012b340 	call	12b34 <_lseek_r>
   12100:	00ffffc4 	movi	r3,-1
   12104:	10c00826 	beq	r2,r3,12128 <__sseek+0x40>
   12108:	80c0030b 	ldhu	r3,12(r16)
   1210c:	80801415 	stw	r2,80(r16)
   12110:	18c40014 	ori	r3,r3,4096
   12114:	80c0030d 	sth	r3,12(r16)
   12118:	dfc00117 	ldw	ra,4(sp)
   1211c:	dc000017 	ldw	r16,0(sp)
   12120:	dec00204 	addi	sp,sp,8
   12124:	f800283a 	ret
   12128:	80c0030b 	ldhu	r3,12(r16)
   1212c:	18fbffcc 	andi	r3,r3,61439
   12130:	80c0030d 	sth	r3,12(r16)
   12134:	dfc00117 	ldw	ra,4(sp)
   12138:	dc000017 	ldw	r16,0(sp)
   1213c:	dec00204 	addi	sp,sp,8
   12140:	f800283a 	ret

00012144 <__sclose>:
   12144:	2940038f 	ldh	r5,14(r5)
   12148:	00123001 	jmpi	12300 <_close_r>

0001214c <_write_r>:
   1214c:	defffd04 	addi	sp,sp,-12
   12150:	2805883a 	mov	r2,r5
   12154:	dc000015 	stw	r16,0(sp)
   12158:	04000074 	movhi	r16,1
   1215c:	dc400115 	stw	r17,4(sp)
   12160:	300b883a 	mov	r5,r6
   12164:	8418a104 	addi	r16,r16,25220
   12168:	2023883a 	mov	r17,r4
   1216c:	380d883a 	mov	r6,r7
   12170:	1009883a 	mov	r4,r2
   12174:	dfc00215 	stw	ra,8(sp)
   12178:	80000015 	stw	zero,0(r16)
   1217c:	00138600 	call	13860 <write>
   12180:	00ffffc4 	movi	r3,-1
   12184:	10c00526 	beq	r2,r3,1219c <_write_r+0x50>
   12188:	dfc00217 	ldw	ra,8(sp)
   1218c:	dc400117 	ldw	r17,4(sp)
   12190:	dc000017 	ldw	r16,0(sp)
   12194:	dec00304 	addi	sp,sp,12
   12198:	f800283a 	ret
   1219c:	80c00017 	ldw	r3,0(r16)
   121a0:	183ff926 	beq	r3,zero,12188 <__alt_data_end+0xffff2188>
   121a4:	88c00015 	stw	r3,0(r17)
   121a8:	003ff706 	br	12188 <__alt_data_end+0xffff2188>

000121ac <__swsetup_r>:
   121ac:	00800074 	movhi	r2,1
   121b0:	defffd04 	addi	sp,sp,-12
   121b4:	10960304 	addi	r2,r2,22540
   121b8:	dc400115 	stw	r17,4(sp)
   121bc:	2023883a 	mov	r17,r4
   121c0:	11000017 	ldw	r4,0(r2)
   121c4:	dc000015 	stw	r16,0(sp)
   121c8:	dfc00215 	stw	ra,8(sp)
   121cc:	2821883a 	mov	r16,r5
   121d0:	20000226 	beq	r4,zero,121dc <__swsetup_r+0x30>
   121d4:	20800e17 	ldw	r2,56(r4)
   121d8:	10003126 	beq	r2,zero,122a0 <__swsetup_r+0xf4>
   121dc:	8080030b 	ldhu	r2,12(r16)
   121e0:	10c0020c 	andi	r3,r2,8
   121e4:	1009883a 	mov	r4,r2
   121e8:	18000f26 	beq	r3,zero,12228 <__swsetup_r+0x7c>
   121ec:	80c00417 	ldw	r3,16(r16)
   121f0:	18001526 	beq	r3,zero,12248 <__swsetup_r+0x9c>
   121f4:	1100004c 	andi	r4,r2,1
   121f8:	20001c1e 	bne	r4,zero,1226c <__swsetup_r+0xc0>
   121fc:	1080008c 	andi	r2,r2,2
   12200:	1000291e 	bne	r2,zero,122a8 <__swsetup_r+0xfc>
   12204:	80800517 	ldw	r2,20(r16)
   12208:	80800215 	stw	r2,8(r16)
   1220c:	18001c26 	beq	r3,zero,12280 <__swsetup_r+0xd4>
   12210:	0005883a 	mov	r2,zero
   12214:	dfc00217 	ldw	ra,8(sp)
   12218:	dc400117 	ldw	r17,4(sp)
   1221c:	dc000017 	ldw	r16,0(sp)
   12220:	dec00304 	addi	sp,sp,12
   12224:	f800283a 	ret
   12228:	2080040c 	andi	r2,r4,16
   1222c:	10002e26 	beq	r2,zero,122e8 <__swsetup_r+0x13c>
   12230:	2080010c 	andi	r2,r4,4
   12234:	10001e1e 	bne	r2,zero,122b0 <__swsetup_r+0x104>
   12238:	80c00417 	ldw	r3,16(r16)
   1223c:	20800214 	ori	r2,r4,8
   12240:	8080030d 	sth	r2,12(r16)
   12244:	183feb1e 	bne	r3,zero,121f4 <__alt_data_end+0xffff21f4>
   12248:	1100a00c 	andi	r4,r2,640
   1224c:	01408004 	movi	r5,512
   12250:	217fe826 	beq	r4,r5,121f4 <__alt_data_end+0xffff21f4>
   12254:	800b883a 	mov	r5,r16
   12258:	8809883a 	mov	r4,r17
   1225c:	0012b940 	call	12b94 <__smakebuf_r>
   12260:	8080030b 	ldhu	r2,12(r16)
   12264:	80c00417 	ldw	r3,16(r16)
   12268:	003fe206 	br	121f4 <__alt_data_end+0xffff21f4>
   1226c:	80800517 	ldw	r2,20(r16)
   12270:	80000215 	stw	zero,8(r16)
   12274:	0085c83a 	sub	r2,zero,r2
   12278:	80800615 	stw	r2,24(r16)
   1227c:	183fe41e 	bne	r3,zero,12210 <__alt_data_end+0xffff2210>
   12280:	80c0030b 	ldhu	r3,12(r16)
   12284:	0005883a 	mov	r2,zero
   12288:	1900200c 	andi	r4,r3,128
   1228c:	203fe126 	beq	r4,zero,12214 <__alt_data_end+0xffff2214>
   12290:	18c01014 	ori	r3,r3,64
   12294:	80c0030d 	sth	r3,12(r16)
   12298:	00bfffc4 	movi	r2,-1
   1229c:	003fdd06 	br	12214 <__alt_data_end+0xffff2214>
   122a0:	00107080 	call	10708 <__sinit>
   122a4:	003fcd06 	br	121dc <__alt_data_end+0xffff21dc>
   122a8:	0005883a 	mov	r2,zero
   122ac:	003fd606 	br	12208 <__alt_data_end+0xffff2208>
   122b0:	81400c17 	ldw	r5,48(r16)
   122b4:	28000626 	beq	r5,zero,122d0 <__swsetup_r+0x124>
   122b8:	80801004 	addi	r2,r16,64
   122bc:	28800326 	beq	r5,r2,122cc <__swsetup_r+0x120>
   122c0:	8809883a 	mov	r4,r17
   122c4:	00128240 	call	12824 <_free_r>
   122c8:	8100030b 	ldhu	r4,12(r16)
   122cc:	80000c15 	stw	zero,48(r16)
   122d0:	80c00417 	ldw	r3,16(r16)
   122d4:	00bff6c4 	movi	r2,-37
   122d8:	1108703a 	and	r4,r2,r4
   122dc:	80000115 	stw	zero,4(r16)
   122e0:	80c00015 	stw	r3,0(r16)
   122e4:	003fd506 	br	1223c <__alt_data_end+0xffff223c>
   122e8:	00800244 	movi	r2,9
   122ec:	88800015 	stw	r2,0(r17)
   122f0:	20801014 	ori	r2,r4,64
   122f4:	8080030d 	sth	r2,12(r16)
   122f8:	00bfffc4 	movi	r2,-1
   122fc:	003fc506 	br	12214 <__alt_data_end+0xffff2214>

00012300 <_close_r>:
   12300:	defffd04 	addi	sp,sp,-12
   12304:	dc000015 	stw	r16,0(sp)
   12308:	04000074 	movhi	r16,1
   1230c:	dc400115 	stw	r17,4(sp)
   12310:	8418a104 	addi	r16,r16,25220
   12314:	2023883a 	mov	r17,r4
   12318:	2809883a 	mov	r4,r5
   1231c:	dfc00215 	stw	ra,8(sp)
   12320:	80000015 	stw	zero,0(r16)
   12324:	00130500 	call	13050 <close>
   12328:	00ffffc4 	movi	r3,-1
   1232c:	10c00526 	beq	r2,r3,12344 <_close_r+0x44>
   12330:	dfc00217 	ldw	ra,8(sp)
   12334:	dc400117 	ldw	r17,4(sp)
   12338:	dc000017 	ldw	r16,0(sp)
   1233c:	dec00304 	addi	sp,sp,12
   12340:	f800283a 	ret
   12344:	80c00017 	ldw	r3,0(r16)
   12348:	183ff926 	beq	r3,zero,12330 <__alt_data_end+0xffff2330>
   1234c:	88c00015 	stw	r3,0(r17)
   12350:	003ff706 	br	12330 <__alt_data_end+0xffff2330>

00012354 <_fclose_r>:
   12354:	28003926 	beq	r5,zero,1243c <_fclose_r+0xe8>
   12358:	defffc04 	addi	sp,sp,-16
   1235c:	dc400115 	stw	r17,4(sp)
   12360:	dc000015 	stw	r16,0(sp)
   12364:	dfc00315 	stw	ra,12(sp)
   12368:	dc800215 	stw	r18,8(sp)
   1236c:	2023883a 	mov	r17,r4
   12370:	2821883a 	mov	r16,r5
   12374:	20000226 	beq	r4,zero,12380 <_fclose_r+0x2c>
   12378:	20800e17 	ldw	r2,56(r4)
   1237c:	10002726 	beq	r2,zero,1241c <_fclose_r+0xc8>
   12380:	8080030f 	ldh	r2,12(r16)
   12384:	1000071e 	bne	r2,zero,123a4 <_fclose_r+0x50>
   12388:	0005883a 	mov	r2,zero
   1238c:	dfc00317 	ldw	ra,12(sp)
   12390:	dc800217 	ldw	r18,8(sp)
   12394:	dc400117 	ldw	r17,4(sp)
   12398:	dc000017 	ldw	r16,0(sp)
   1239c:	dec00404 	addi	sp,sp,16
   123a0:	f800283a 	ret
   123a4:	800b883a 	mov	r5,r16
   123a8:	8809883a 	mov	r4,r17
   123ac:	00124580 	call	12458 <__sflush_r>
   123b0:	1025883a 	mov	r18,r2
   123b4:	80800b17 	ldw	r2,44(r16)
   123b8:	10000426 	beq	r2,zero,123cc <_fclose_r+0x78>
   123bc:	81400717 	ldw	r5,28(r16)
   123c0:	8809883a 	mov	r4,r17
   123c4:	103ee83a 	callr	r2
   123c8:	10001616 	blt	r2,zero,12424 <_fclose_r+0xd0>
   123cc:	8080030b 	ldhu	r2,12(r16)
   123d0:	1080200c 	andi	r2,r2,128
   123d4:	1000151e 	bne	r2,zero,1242c <_fclose_r+0xd8>
   123d8:	81400c17 	ldw	r5,48(r16)
   123dc:	28000526 	beq	r5,zero,123f4 <_fclose_r+0xa0>
   123e0:	80801004 	addi	r2,r16,64
   123e4:	28800226 	beq	r5,r2,123f0 <_fclose_r+0x9c>
   123e8:	8809883a 	mov	r4,r17
   123ec:	00128240 	call	12824 <_free_r>
   123f0:	80000c15 	stw	zero,48(r16)
   123f4:	81401117 	ldw	r5,68(r16)
   123f8:	28000326 	beq	r5,zero,12408 <_fclose_r+0xb4>
   123fc:	8809883a 	mov	r4,r17
   12400:	00128240 	call	12824 <_free_r>
   12404:	80001115 	stw	zero,68(r16)
   12408:	00107180 	call	10718 <__sfp_lock_acquire>
   1240c:	8000030d 	sth	zero,12(r16)
   12410:	001071c0 	call	1071c <__sfp_lock_release>
   12414:	9005883a 	mov	r2,r18
   12418:	003fdc06 	br	1238c <__alt_data_end+0xffff238c>
   1241c:	00107080 	call	10708 <__sinit>
   12420:	003fd706 	br	12380 <__alt_data_end+0xffff2380>
   12424:	04bfffc4 	movi	r18,-1
   12428:	003fe806 	br	123cc <__alt_data_end+0xffff23cc>
   1242c:	81400417 	ldw	r5,16(r16)
   12430:	8809883a 	mov	r4,r17
   12434:	00128240 	call	12824 <_free_r>
   12438:	003fe706 	br	123d8 <__alt_data_end+0xffff23d8>
   1243c:	0005883a 	mov	r2,zero
   12440:	f800283a 	ret

00012444 <fclose>:
   12444:	00800074 	movhi	r2,1
   12448:	10960304 	addi	r2,r2,22540
   1244c:	200b883a 	mov	r5,r4
   12450:	11000017 	ldw	r4,0(r2)
   12454:	00123541 	jmpi	12354 <_fclose_r>

00012458 <__sflush_r>:
   12458:	2880030b 	ldhu	r2,12(r5)
   1245c:	defffb04 	addi	sp,sp,-20
   12460:	dcc00315 	stw	r19,12(sp)
   12464:	dc400115 	stw	r17,4(sp)
   12468:	dfc00415 	stw	ra,16(sp)
   1246c:	dc800215 	stw	r18,8(sp)
   12470:	dc000015 	stw	r16,0(sp)
   12474:	10c0020c 	andi	r3,r2,8
   12478:	2823883a 	mov	r17,r5
   1247c:	2027883a 	mov	r19,r4
   12480:	1800311e 	bne	r3,zero,12548 <__sflush_r+0xf0>
   12484:	28c00117 	ldw	r3,4(r5)
   12488:	10820014 	ori	r2,r2,2048
   1248c:	2880030d 	sth	r2,12(r5)
   12490:	00c04b0e 	bge	zero,r3,125c0 <__sflush_r+0x168>
   12494:	8a000a17 	ldw	r8,40(r17)
   12498:	40002326 	beq	r8,zero,12528 <__sflush_r+0xd0>
   1249c:	9c000017 	ldw	r16,0(r19)
   124a0:	10c4000c 	andi	r3,r2,4096
   124a4:	98000015 	stw	zero,0(r19)
   124a8:	18004826 	beq	r3,zero,125cc <__sflush_r+0x174>
   124ac:	89801417 	ldw	r6,80(r17)
   124b0:	10c0010c 	andi	r3,r2,4
   124b4:	18000626 	beq	r3,zero,124d0 <__sflush_r+0x78>
   124b8:	88c00117 	ldw	r3,4(r17)
   124bc:	88800c17 	ldw	r2,48(r17)
   124c0:	30cdc83a 	sub	r6,r6,r3
   124c4:	10000226 	beq	r2,zero,124d0 <__sflush_r+0x78>
   124c8:	88800f17 	ldw	r2,60(r17)
   124cc:	308dc83a 	sub	r6,r6,r2
   124d0:	89400717 	ldw	r5,28(r17)
   124d4:	000f883a 	mov	r7,zero
   124d8:	9809883a 	mov	r4,r19
   124dc:	403ee83a 	callr	r8
   124e0:	00ffffc4 	movi	r3,-1
   124e4:	10c04426 	beq	r2,r3,125f8 <__sflush_r+0x1a0>
   124e8:	88c0030b 	ldhu	r3,12(r17)
   124ec:	89000417 	ldw	r4,16(r17)
   124f0:	88000115 	stw	zero,4(r17)
   124f4:	197dffcc 	andi	r5,r3,63487
   124f8:	8940030d 	sth	r5,12(r17)
   124fc:	89000015 	stw	r4,0(r17)
   12500:	18c4000c 	andi	r3,r3,4096
   12504:	18002c1e 	bne	r3,zero,125b8 <__sflush_r+0x160>
   12508:	89400c17 	ldw	r5,48(r17)
   1250c:	9c000015 	stw	r16,0(r19)
   12510:	28000526 	beq	r5,zero,12528 <__sflush_r+0xd0>
   12514:	88801004 	addi	r2,r17,64
   12518:	28800226 	beq	r5,r2,12524 <__sflush_r+0xcc>
   1251c:	9809883a 	mov	r4,r19
   12520:	00128240 	call	12824 <_free_r>
   12524:	88000c15 	stw	zero,48(r17)
   12528:	0005883a 	mov	r2,zero
   1252c:	dfc00417 	ldw	ra,16(sp)
   12530:	dcc00317 	ldw	r19,12(sp)
   12534:	dc800217 	ldw	r18,8(sp)
   12538:	dc400117 	ldw	r17,4(sp)
   1253c:	dc000017 	ldw	r16,0(sp)
   12540:	dec00504 	addi	sp,sp,20
   12544:	f800283a 	ret
   12548:	2c800417 	ldw	r18,16(r5)
   1254c:	903ff626 	beq	r18,zero,12528 <__alt_data_end+0xffff2528>
   12550:	2c000017 	ldw	r16,0(r5)
   12554:	108000cc 	andi	r2,r2,3
   12558:	2c800015 	stw	r18,0(r5)
   1255c:	84a1c83a 	sub	r16,r16,r18
   12560:	1000131e 	bne	r2,zero,125b0 <__sflush_r+0x158>
   12564:	28800517 	ldw	r2,20(r5)
   12568:	88800215 	stw	r2,8(r17)
   1256c:	04000316 	blt	zero,r16,1257c <__sflush_r+0x124>
   12570:	003fed06 	br	12528 <__alt_data_end+0xffff2528>
   12574:	90a5883a 	add	r18,r18,r2
   12578:	043feb0e 	bge	zero,r16,12528 <__alt_data_end+0xffff2528>
   1257c:	88800917 	ldw	r2,36(r17)
   12580:	89400717 	ldw	r5,28(r17)
   12584:	800f883a 	mov	r7,r16
   12588:	900d883a 	mov	r6,r18
   1258c:	9809883a 	mov	r4,r19
   12590:	103ee83a 	callr	r2
   12594:	80a1c83a 	sub	r16,r16,r2
   12598:	00bff616 	blt	zero,r2,12574 <__alt_data_end+0xffff2574>
   1259c:	88c0030b 	ldhu	r3,12(r17)
   125a0:	00bfffc4 	movi	r2,-1
   125a4:	18c01014 	ori	r3,r3,64
   125a8:	88c0030d 	sth	r3,12(r17)
   125ac:	003fdf06 	br	1252c <__alt_data_end+0xffff252c>
   125b0:	0005883a 	mov	r2,zero
   125b4:	003fec06 	br	12568 <__alt_data_end+0xffff2568>
   125b8:	88801415 	stw	r2,80(r17)
   125bc:	003fd206 	br	12508 <__alt_data_end+0xffff2508>
   125c0:	28c00f17 	ldw	r3,60(r5)
   125c4:	00ffb316 	blt	zero,r3,12494 <__alt_data_end+0xffff2494>
   125c8:	003fd706 	br	12528 <__alt_data_end+0xffff2528>
   125cc:	89400717 	ldw	r5,28(r17)
   125d0:	000d883a 	mov	r6,zero
   125d4:	01c00044 	movi	r7,1
   125d8:	9809883a 	mov	r4,r19
   125dc:	403ee83a 	callr	r8
   125e0:	100d883a 	mov	r6,r2
   125e4:	00bfffc4 	movi	r2,-1
   125e8:	30801426 	beq	r6,r2,1263c <__sflush_r+0x1e4>
   125ec:	8880030b 	ldhu	r2,12(r17)
   125f0:	8a000a17 	ldw	r8,40(r17)
   125f4:	003fae06 	br	124b0 <__alt_data_end+0xffff24b0>
   125f8:	98c00017 	ldw	r3,0(r19)
   125fc:	183fba26 	beq	r3,zero,124e8 <__alt_data_end+0xffff24e8>
   12600:	01000744 	movi	r4,29
   12604:	19000626 	beq	r3,r4,12620 <__sflush_r+0x1c8>
   12608:	01000584 	movi	r4,22
   1260c:	19000426 	beq	r3,r4,12620 <__sflush_r+0x1c8>
   12610:	88c0030b 	ldhu	r3,12(r17)
   12614:	18c01014 	ori	r3,r3,64
   12618:	88c0030d 	sth	r3,12(r17)
   1261c:	003fc306 	br	1252c <__alt_data_end+0xffff252c>
   12620:	8880030b 	ldhu	r2,12(r17)
   12624:	88c00417 	ldw	r3,16(r17)
   12628:	88000115 	stw	zero,4(r17)
   1262c:	10bdffcc 	andi	r2,r2,63487
   12630:	8880030d 	sth	r2,12(r17)
   12634:	88c00015 	stw	r3,0(r17)
   12638:	003fb306 	br	12508 <__alt_data_end+0xffff2508>
   1263c:	98800017 	ldw	r2,0(r19)
   12640:	103fea26 	beq	r2,zero,125ec <__alt_data_end+0xffff25ec>
   12644:	00c00744 	movi	r3,29
   12648:	10c00226 	beq	r2,r3,12654 <__sflush_r+0x1fc>
   1264c:	00c00584 	movi	r3,22
   12650:	10c0031e 	bne	r2,r3,12660 <__sflush_r+0x208>
   12654:	9c000015 	stw	r16,0(r19)
   12658:	0005883a 	mov	r2,zero
   1265c:	003fb306 	br	1252c <__alt_data_end+0xffff252c>
   12660:	88c0030b 	ldhu	r3,12(r17)
   12664:	3005883a 	mov	r2,r6
   12668:	18c01014 	ori	r3,r3,64
   1266c:	88c0030d 	sth	r3,12(r17)
   12670:	003fae06 	br	1252c <__alt_data_end+0xffff252c>

00012674 <_fflush_r>:
   12674:	defffd04 	addi	sp,sp,-12
   12678:	dc000115 	stw	r16,4(sp)
   1267c:	dfc00215 	stw	ra,8(sp)
   12680:	2021883a 	mov	r16,r4
   12684:	20000226 	beq	r4,zero,12690 <_fflush_r+0x1c>
   12688:	20800e17 	ldw	r2,56(r4)
   1268c:	10000c26 	beq	r2,zero,126c0 <_fflush_r+0x4c>
   12690:	2880030f 	ldh	r2,12(r5)
   12694:	1000051e 	bne	r2,zero,126ac <_fflush_r+0x38>
   12698:	0005883a 	mov	r2,zero
   1269c:	dfc00217 	ldw	ra,8(sp)
   126a0:	dc000117 	ldw	r16,4(sp)
   126a4:	dec00304 	addi	sp,sp,12
   126a8:	f800283a 	ret
   126ac:	8009883a 	mov	r4,r16
   126b0:	dfc00217 	ldw	ra,8(sp)
   126b4:	dc000117 	ldw	r16,4(sp)
   126b8:	dec00304 	addi	sp,sp,12
   126bc:	00124581 	jmpi	12458 <__sflush_r>
   126c0:	d9400015 	stw	r5,0(sp)
   126c4:	00107080 	call	10708 <__sinit>
   126c8:	d9400017 	ldw	r5,0(sp)
   126cc:	003ff006 	br	12690 <__alt_data_end+0xffff2690>

000126d0 <fflush>:
   126d0:	20000526 	beq	r4,zero,126e8 <fflush+0x18>
   126d4:	00800074 	movhi	r2,1
   126d8:	10960304 	addi	r2,r2,22540
   126dc:	200b883a 	mov	r5,r4
   126e0:	11000017 	ldw	r4,0(r2)
   126e4:	00126741 	jmpi	12674 <_fflush_r>
   126e8:	00800074 	movhi	r2,1
   126ec:	10960204 	addi	r2,r2,22536
   126f0:	11000017 	ldw	r4,0(r2)
   126f4:	01400074 	movhi	r5,1
   126f8:	29499d04 	addi	r5,r5,9844
   126fc:	0010cd81 	jmpi	10cd8 <_fwalk_reent>

00012700 <_malloc_trim_r>:
   12700:	defffb04 	addi	sp,sp,-20
   12704:	dcc00315 	stw	r19,12(sp)
   12708:	04c00074 	movhi	r19,1
   1270c:	dc800215 	stw	r18,8(sp)
   12710:	dc400115 	stw	r17,4(sp)
   12714:	dc000015 	stw	r16,0(sp)
   12718:	dfc00415 	stw	ra,16(sp)
   1271c:	2821883a 	mov	r16,r5
   12720:	9cd48b04 	addi	r19,r19,21036
   12724:	2025883a 	mov	r18,r4
   12728:	00135900 	call	13590 <__malloc_lock>
   1272c:	98800217 	ldw	r2,8(r19)
   12730:	14400117 	ldw	r17,4(r2)
   12734:	00bfff04 	movi	r2,-4
   12738:	88a2703a 	and	r17,r17,r2
   1273c:	8c21c83a 	sub	r16,r17,r16
   12740:	8403fbc4 	addi	r16,r16,4079
   12744:	8020d33a 	srli	r16,r16,12
   12748:	0083ffc4 	movi	r2,4095
   1274c:	843fffc4 	addi	r16,r16,-1
   12750:	8020933a 	slli	r16,r16,12
   12754:	1400060e 	bge	r2,r16,12770 <_malloc_trim_r+0x70>
   12758:	000b883a 	mov	r5,zero
   1275c:	9009883a 	mov	r4,r18
   12760:	0011fbc0 	call	11fbc <_sbrk_r>
   12764:	98c00217 	ldw	r3,8(r19)
   12768:	1c47883a 	add	r3,r3,r17
   1276c:	10c00a26 	beq	r2,r3,12798 <_malloc_trim_r+0x98>
   12770:	9009883a 	mov	r4,r18
   12774:	00135b40 	call	135b4 <__malloc_unlock>
   12778:	0005883a 	mov	r2,zero
   1277c:	dfc00417 	ldw	ra,16(sp)
   12780:	dcc00317 	ldw	r19,12(sp)
   12784:	dc800217 	ldw	r18,8(sp)
   12788:	dc400117 	ldw	r17,4(sp)
   1278c:	dc000017 	ldw	r16,0(sp)
   12790:	dec00504 	addi	sp,sp,20
   12794:	f800283a 	ret
   12798:	040bc83a 	sub	r5,zero,r16
   1279c:	9009883a 	mov	r4,r18
   127a0:	0011fbc0 	call	11fbc <_sbrk_r>
   127a4:	00ffffc4 	movi	r3,-1
   127a8:	10c00d26 	beq	r2,r3,127e0 <_malloc_trim_r+0xe0>
   127ac:	00c00074 	movhi	r3,1
   127b0:	18d8a804 	addi	r3,r3,25248
   127b4:	18800017 	ldw	r2,0(r3)
   127b8:	99000217 	ldw	r4,8(r19)
   127bc:	8c23c83a 	sub	r17,r17,r16
   127c0:	8c400054 	ori	r17,r17,1
   127c4:	1421c83a 	sub	r16,r2,r16
   127c8:	24400115 	stw	r17,4(r4)
   127cc:	9009883a 	mov	r4,r18
   127d0:	1c000015 	stw	r16,0(r3)
   127d4:	00135b40 	call	135b4 <__malloc_unlock>
   127d8:	00800044 	movi	r2,1
   127dc:	003fe706 	br	1277c <__alt_data_end+0xffff277c>
   127e0:	000b883a 	mov	r5,zero
   127e4:	9009883a 	mov	r4,r18
   127e8:	0011fbc0 	call	11fbc <_sbrk_r>
   127ec:	99000217 	ldw	r4,8(r19)
   127f0:	014003c4 	movi	r5,15
   127f4:	1107c83a 	sub	r3,r2,r4
   127f8:	28ffdd0e 	bge	r5,r3,12770 <__alt_data_end+0xffff2770>
   127fc:	01400074 	movhi	r5,1
   12800:	29560404 	addi	r5,r5,22544
   12804:	29400017 	ldw	r5,0(r5)
   12808:	18c00054 	ori	r3,r3,1
   1280c:	20c00115 	stw	r3,4(r4)
   12810:	00c00074 	movhi	r3,1
   12814:	1145c83a 	sub	r2,r2,r5
   12818:	18d8a804 	addi	r3,r3,25248
   1281c:	18800015 	stw	r2,0(r3)
   12820:	003fd306 	br	12770 <__alt_data_end+0xffff2770>

00012824 <_free_r>:
   12824:	28004126 	beq	r5,zero,1292c <_free_r+0x108>
   12828:	defffd04 	addi	sp,sp,-12
   1282c:	dc400115 	stw	r17,4(sp)
   12830:	dc000015 	stw	r16,0(sp)
   12834:	2023883a 	mov	r17,r4
   12838:	2821883a 	mov	r16,r5
   1283c:	dfc00215 	stw	ra,8(sp)
   12840:	00135900 	call	13590 <__malloc_lock>
   12844:	81ffff17 	ldw	r7,-4(r16)
   12848:	00bfff84 	movi	r2,-2
   1284c:	01000074 	movhi	r4,1
   12850:	81bffe04 	addi	r6,r16,-8
   12854:	3884703a 	and	r2,r7,r2
   12858:	21148b04 	addi	r4,r4,21036
   1285c:	308b883a 	add	r5,r6,r2
   12860:	2a400117 	ldw	r9,4(r5)
   12864:	22000217 	ldw	r8,8(r4)
   12868:	00ffff04 	movi	r3,-4
   1286c:	48c6703a 	and	r3,r9,r3
   12870:	2a005726 	beq	r5,r8,129d0 <_free_r+0x1ac>
   12874:	28c00115 	stw	r3,4(r5)
   12878:	39c0004c 	andi	r7,r7,1
   1287c:	3800091e 	bne	r7,zero,128a4 <_free_r+0x80>
   12880:	823ffe17 	ldw	r8,-8(r16)
   12884:	22400204 	addi	r9,r4,8
   12888:	320dc83a 	sub	r6,r6,r8
   1288c:	31c00217 	ldw	r7,8(r6)
   12890:	1205883a 	add	r2,r2,r8
   12894:	3a406526 	beq	r7,r9,12a2c <_free_r+0x208>
   12898:	32000317 	ldw	r8,12(r6)
   1289c:	3a000315 	stw	r8,12(r7)
   128a0:	41c00215 	stw	r7,8(r8)
   128a4:	28cf883a 	add	r7,r5,r3
   128a8:	39c00117 	ldw	r7,4(r7)
   128ac:	39c0004c 	andi	r7,r7,1
   128b0:	38003a26 	beq	r7,zero,1299c <_free_r+0x178>
   128b4:	10c00054 	ori	r3,r2,1
   128b8:	30c00115 	stw	r3,4(r6)
   128bc:	3087883a 	add	r3,r6,r2
   128c0:	18800015 	stw	r2,0(r3)
   128c4:	00c07fc4 	movi	r3,511
   128c8:	18801936 	bltu	r3,r2,12930 <_free_r+0x10c>
   128cc:	1004d0fa 	srli	r2,r2,3
   128d0:	01c00044 	movi	r7,1
   128d4:	21400117 	ldw	r5,4(r4)
   128d8:	10c00044 	addi	r3,r2,1
   128dc:	18c7883a 	add	r3,r3,r3
   128e0:	1005d0ba 	srai	r2,r2,2
   128e4:	18c7883a 	add	r3,r3,r3
   128e8:	18c7883a 	add	r3,r3,r3
   128ec:	1907883a 	add	r3,r3,r4
   128f0:	3884983a 	sll	r2,r7,r2
   128f4:	19c00017 	ldw	r7,0(r3)
   128f8:	1a3ffe04 	addi	r8,r3,-8
   128fc:	1144b03a 	or	r2,r2,r5
   12900:	32000315 	stw	r8,12(r6)
   12904:	31c00215 	stw	r7,8(r6)
   12908:	20800115 	stw	r2,4(r4)
   1290c:	19800015 	stw	r6,0(r3)
   12910:	39800315 	stw	r6,12(r7)
   12914:	8809883a 	mov	r4,r17
   12918:	dfc00217 	ldw	ra,8(sp)
   1291c:	dc400117 	ldw	r17,4(sp)
   12920:	dc000017 	ldw	r16,0(sp)
   12924:	dec00304 	addi	sp,sp,12
   12928:	00135b41 	jmpi	135b4 <__malloc_unlock>
   1292c:	f800283a 	ret
   12930:	100ad27a 	srli	r5,r2,9
   12934:	00c00104 	movi	r3,4
   12938:	19404a36 	bltu	r3,r5,12a64 <_free_r+0x240>
   1293c:	100ad1ba 	srli	r5,r2,6
   12940:	28c00e44 	addi	r3,r5,57
   12944:	18c7883a 	add	r3,r3,r3
   12948:	29400e04 	addi	r5,r5,56
   1294c:	18c7883a 	add	r3,r3,r3
   12950:	18c7883a 	add	r3,r3,r3
   12954:	1909883a 	add	r4,r3,r4
   12958:	20c00017 	ldw	r3,0(r4)
   1295c:	01c00074 	movhi	r7,1
   12960:	213ffe04 	addi	r4,r4,-8
   12964:	39d48b04 	addi	r7,r7,21036
   12968:	20c04426 	beq	r4,r3,12a7c <_free_r+0x258>
   1296c:	01ffff04 	movi	r7,-4
   12970:	19400117 	ldw	r5,4(r3)
   12974:	29ca703a 	and	r5,r5,r7
   12978:	1140022e 	bgeu	r2,r5,12984 <_free_r+0x160>
   1297c:	18c00217 	ldw	r3,8(r3)
   12980:	20fffb1e 	bne	r4,r3,12970 <__alt_data_end+0xffff2970>
   12984:	19000317 	ldw	r4,12(r3)
   12988:	31000315 	stw	r4,12(r6)
   1298c:	30c00215 	stw	r3,8(r6)
   12990:	21800215 	stw	r6,8(r4)
   12994:	19800315 	stw	r6,12(r3)
   12998:	003fde06 	br	12914 <__alt_data_end+0xffff2914>
   1299c:	29c00217 	ldw	r7,8(r5)
   129a0:	10c5883a 	add	r2,r2,r3
   129a4:	00c00074 	movhi	r3,1
   129a8:	18d48d04 	addi	r3,r3,21044
   129ac:	38c03b26 	beq	r7,r3,12a9c <_free_r+0x278>
   129b0:	2a000317 	ldw	r8,12(r5)
   129b4:	11400054 	ori	r5,r2,1
   129b8:	3087883a 	add	r3,r6,r2
   129bc:	3a000315 	stw	r8,12(r7)
   129c0:	41c00215 	stw	r7,8(r8)
   129c4:	31400115 	stw	r5,4(r6)
   129c8:	18800015 	stw	r2,0(r3)
   129cc:	003fbd06 	br	128c4 <__alt_data_end+0xffff28c4>
   129d0:	39c0004c 	andi	r7,r7,1
   129d4:	10c5883a 	add	r2,r2,r3
   129d8:	3800071e 	bne	r7,zero,129f8 <_free_r+0x1d4>
   129dc:	81fffe17 	ldw	r7,-8(r16)
   129e0:	31cdc83a 	sub	r6,r6,r7
   129e4:	30c00317 	ldw	r3,12(r6)
   129e8:	31400217 	ldw	r5,8(r6)
   129ec:	11c5883a 	add	r2,r2,r7
   129f0:	28c00315 	stw	r3,12(r5)
   129f4:	19400215 	stw	r5,8(r3)
   129f8:	10c00054 	ori	r3,r2,1
   129fc:	30c00115 	stw	r3,4(r6)
   12a00:	00c00074 	movhi	r3,1
   12a04:	18d60504 	addi	r3,r3,22548
   12a08:	18c00017 	ldw	r3,0(r3)
   12a0c:	21800215 	stw	r6,8(r4)
   12a10:	10ffc036 	bltu	r2,r3,12914 <__alt_data_end+0xffff2914>
   12a14:	00800074 	movhi	r2,1
   12a18:	1098a004 	addi	r2,r2,25216
   12a1c:	11400017 	ldw	r5,0(r2)
   12a20:	8809883a 	mov	r4,r17
   12a24:	00127000 	call	12700 <_malloc_trim_r>
   12a28:	003fba06 	br	12914 <__alt_data_end+0xffff2914>
   12a2c:	28c9883a 	add	r4,r5,r3
   12a30:	21000117 	ldw	r4,4(r4)
   12a34:	2100004c 	andi	r4,r4,1
   12a38:	2000391e 	bne	r4,zero,12b20 <_free_r+0x2fc>
   12a3c:	29c00217 	ldw	r7,8(r5)
   12a40:	29000317 	ldw	r4,12(r5)
   12a44:	1885883a 	add	r2,r3,r2
   12a48:	10c00054 	ori	r3,r2,1
   12a4c:	39000315 	stw	r4,12(r7)
   12a50:	21c00215 	stw	r7,8(r4)
   12a54:	30c00115 	stw	r3,4(r6)
   12a58:	308d883a 	add	r6,r6,r2
   12a5c:	30800015 	stw	r2,0(r6)
   12a60:	003fac06 	br	12914 <__alt_data_end+0xffff2914>
   12a64:	00c00504 	movi	r3,20
   12a68:	19401536 	bltu	r3,r5,12ac0 <_free_r+0x29c>
   12a6c:	28c01704 	addi	r3,r5,92
   12a70:	18c7883a 	add	r3,r3,r3
   12a74:	294016c4 	addi	r5,r5,91
   12a78:	003fb406 	br	1294c <__alt_data_end+0xffff294c>
   12a7c:	280bd0ba 	srai	r5,r5,2
   12a80:	00c00044 	movi	r3,1
   12a84:	38800117 	ldw	r2,4(r7)
   12a88:	194a983a 	sll	r5,r3,r5
   12a8c:	2007883a 	mov	r3,r4
   12a90:	2884b03a 	or	r2,r5,r2
   12a94:	38800115 	stw	r2,4(r7)
   12a98:	003fbb06 	br	12988 <__alt_data_end+0xffff2988>
   12a9c:	21800515 	stw	r6,20(r4)
   12aa0:	21800415 	stw	r6,16(r4)
   12aa4:	10c00054 	ori	r3,r2,1
   12aa8:	31c00315 	stw	r7,12(r6)
   12aac:	31c00215 	stw	r7,8(r6)
   12ab0:	30c00115 	stw	r3,4(r6)
   12ab4:	308d883a 	add	r6,r6,r2
   12ab8:	30800015 	stw	r2,0(r6)
   12abc:	003f9506 	br	12914 <__alt_data_end+0xffff2914>
   12ac0:	00c01504 	movi	r3,84
   12ac4:	19400536 	bltu	r3,r5,12adc <_free_r+0x2b8>
   12ac8:	100ad33a 	srli	r5,r2,12
   12acc:	28c01bc4 	addi	r3,r5,111
   12ad0:	18c7883a 	add	r3,r3,r3
   12ad4:	29401b84 	addi	r5,r5,110
   12ad8:	003f9c06 	br	1294c <__alt_data_end+0xffff294c>
   12adc:	00c05504 	movi	r3,340
   12ae0:	19400536 	bltu	r3,r5,12af8 <_free_r+0x2d4>
   12ae4:	100ad3fa 	srli	r5,r2,15
   12ae8:	28c01e04 	addi	r3,r5,120
   12aec:	18c7883a 	add	r3,r3,r3
   12af0:	29401dc4 	addi	r5,r5,119
   12af4:	003f9506 	br	1294c <__alt_data_end+0xffff294c>
   12af8:	00c15504 	movi	r3,1364
   12afc:	19400536 	bltu	r3,r5,12b14 <_free_r+0x2f0>
   12b00:	100ad4ba 	srli	r5,r2,18
   12b04:	28c01f44 	addi	r3,r5,125
   12b08:	18c7883a 	add	r3,r3,r3
   12b0c:	29401f04 	addi	r5,r5,124
   12b10:	003f8e06 	br	1294c <__alt_data_end+0xffff294c>
   12b14:	00c03f84 	movi	r3,254
   12b18:	01401f84 	movi	r5,126
   12b1c:	003f8b06 	br	1294c <__alt_data_end+0xffff294c>
   12b20:	10c00054 	ori	r3,r2,1
   12b24:	30c00115 	stw	r3,4(r6)
   12b28:	308d883a 	add	r6,r6,r2
   12b2c:	30800015 	stw	r2,0(r6)
   12b30:	003f7806 	br	12914 <__alt_data_end+0xffff2914>

00012b34 <_lseek_r>:
   12b34:	defffd04 	addi	sp,sp,-12
   12b38:	2805883a 	mov	r2,r5
   12b3c:	dc000015 	stw	r16,0(sp)
   12b40:	04000074 	movhi	r16,1
   12b44:	dc400115 	stw	r17,4(sp)
   12b48:	300b883a 	mov	r5,r6
   12b4c:	8418a104 	addi	r16,r16,25220
   12b50:	2023883a 	mov	r17,r4
   12b54:	380d883a 	mov	r6,r7
   12b58:	1009883a 	mov	r4,r2
   12b5c:	dfc00215 	stw	ra,8(sp)
   12b60:	80000015 	stw	zero,0(r16)
   12b64:	00134400 	call	13440 <lseek>
   12b68:	00ffffc4 	movi	r3,-1
   12b6c:	10c00526 	beq	r2,r3,12b84 <_lseek_r+0x50>
   12b70:	dfc00217 	ldw	ra,8(sp)
   12b74:	dc400117 	ldw	r17,4(sp)
   12b78:	dc000017 	ldw	r16,0(sp)
   12b7c:	dec00304 	addi	sp,sp,12
   12b80:	f800283a 	ret
   12b84:	80c00017 	ldw	r3,0(r16)
   12b88:	183ff926 	beq	r3,zero,12b70 <__alt_data_end+0xffff2b70>
   12b8c:	88c00015 	stw	r3,0(r17)
   12b90:	003ff706 	br	12b70 <__alt_data_end+0xffff2b70>

00012b94 <__smakebuf_r>:
   12b94:	2880030b 	ldhu	r2,12(r5)
   12b98:	10c0008c 	andi	r3,r2,2
   12b9c:	1800411e 	bne	r3,zero,12ca4 <__smakebuf_r+0x110>
   12ba0:	deffec04 	addi	sp,sp,-80
   12ba4:	dc000f15 	stw	r16,60(sp)
   12ba8:	2821883a 	mov	r16,r5
   12bac:	2940038f 	ldh	r5,14(r5)
   12bb0:	dc401015 	stw	r17,64(sp)
   12bb4:	dfc01315 	stw	ra,76(sp)
   12bb8:	dcc01215 	stw	r19,72(sp)
   12bbc:	dc801115 	stw	r18,68(sp)
   12bc0:	2023883a 	mov	r17,r4
   12bc4:	28001c16 	blt	r5,zero,12c38 <__smakebuf_r+0xa4>
   12bc8:	d80d883a 	mov	r6,sp
   12bcc:	0012db00 	call	12db0 <_fstat_r>
   12bd0:	10001816 	blt	r2,zero,12c34 <__smakebuf_r+0xa0>
   12bd4:	d8800117 	ldw	r2,4(sp)
   12bd8:	00e00014 	movui	r3,32768
   12bdc:	10bc000c 	andi	r2,r2,61440
   12be0:	14c80020 	cmpeqi	r19,r2,8192
   12be4:	10c03726 	beq	r2,r3,12cc4 <__smakebuf_r+0x130>
   12be8:	80c0030b 	ldhu	r3,12(r16)
   12bec:	18c20014 	ori	r3,r3,2048
   12bf0:	80c0030d 	sth	r3,12(r16)
   12bf4:	00c80004 	movi	r3,8192
   12bf8:	10c0521e 	bne	r2,r3,12d44 <__smakebuf_r+0x1b0>
   12bfc:	8140038f 	ldh	r5,14(r16)
   12c00:	8809883a 	mov	r4,r17
   12c04:	0012e0c0 	call	12e0c <_isatty_r>
   12c08:	10004c26 	beq	r2,zero,12d3c <__smakebuf_r+0x1a8>
   12c0c:	8080030b 	ldhu	r2,12(r16)
   12c10:	80c010c4 	addi	r3,r16,67
   12c14:	80c00015 	stw	r3,0(r16)
   12c18:	10800054 	ori	r2,r2,1
   12c1c:	8080030d 	sth	r2,12(r16)
   12c20:	00800044 	movi	r2,1
   12c24:	80c00415 	stw	r3,16(r16)
   12c28:	80800515 	stw	r2,20(r16)
   12c2c:	04810004 	movi	r18,1024
   12c30:	00000706 	br	12c50 <__smakebuf_r+0xbc>
   12c34:	8080030b 	ldhu	r2,12(r16)
   12c38:	10c0200c 	andi	r3,r2,128
   12c3c:	18001f1e 	bne	r3,zero,12cbc <__smakebuf_r+0x128>
   12c40:	04810004 	movi	r18,1024
   12c44:	10820014 	ori	r2,r2,2048
   12c48:	8080030d 	sth	r2,12(r16)
   12c4c:	0027883a 	mov	r19,zero
   12c50:	900b883a 	mov	r5,r18
   12c54:	8809883a 	mov	r4,r17
   12c58:	0010d9c0 	call	10d9c <_malloc_r>
   12c5c:	10002c26 	beq	r2,zero,12d10 <__smakebuf_r+0x17c>
   12c60:	80c0030b 	ldhu	r3,12(r16)
   12c64:	01000074 	movhi	r4,1
   12c68:	2100f004 	addi	r4,r4,960
   12c6c:	89000f15 	stw	r4,60(r17)
   12c70:	18c02014 	ori	r3,r3,128
   12c74:	80c0030d 	sth	r3,12(r16)
   12c78:	80800015 	stw	r2,0(r16)
   12c7c:	80800415 	stw	r2,16(r16)
   12c80:	84800515 	stw	r18,20(r16)
   12c84:	98001a1e 	bne	r19,zero,12cf0 <__smakebuf_r+0x15c>
   12c88:	dfc01317 	ldw	ra,76(sp)
   12c8c:	dcc01217 	ldw	r19,72(sp)
   12c90:	dc801117 	ldw	r18,68(sp)
   12c94:	dc401017 	ldw	r17,64(sp)
   12c98:	dc000f17 	ldw	r16,60(sp)
   12c9c:	dec01404 	addi	sp,sp,80
   12ca0:	f800283a 	ret
   12ca4:	288010c4 	addi	r2,r5,67
   12ca8:	28800015 	stw	r2,0(r5)
   12cac:	28800415 	stw	r2,16(r5)
   12cb0:	00800044 	movi	r2,1
   12cb4:	28800515 	stw	r2,20(r5)
   12cb8:	f800283a 	ret
   12cbc:	04801004 	movi	r18,64
   12cc0:	003fe006 	br	12c44 <__alt_data_end+0xffff2c44>
   12cc4:	81000a17 	ldw	r4,40(r16)
   12cc8:	00c00074 	movhi	r3,1
   12ccc:	18c83a04 	addi	r3,r3,8424
   12cd0:	20ffc51e 	bne	r4,r3,12be8 <__alt_data_end+0xffff2be8>
   12cd4:	8080030b 	ldhu	r2,12(r16)
   12cd8:	04810004 	movi	r18,1024
   12cdc:	84801315 	stw	r18,76(r16)
   12ce0:	1484b03a 	or	r2,r2,r18
   12ce4:	8080030d 	sth	r2,12(r16)
   12ce8:	0027883a 	mov	r19,zero
   12cec:	003fd806 	br	12c50 <__alt_data_end+0xffff2c50>
   12cf0:	8140038f 	ldh	r5,14(r16)
   12cf4:	8809883a 	mov	r4,r17
   12cf8:	0012e0c0 	call	12e0c <_isatty_r>
   12cfc:	103fe226 	beq	r2,zero,12c88 <__alt_data_end+0xffff2c88>
   12d00:	8080030b 	ldhu	r2,12(r16)
   12d04:	10800054 	ori	r2,r2,1
   12d08:	8080030d 	sth	r2,12(r16)
   12d0c:	003fde06 	br	12c88 <__alt_data_end+0xffff2c88>
   12d10:	8080030b 	ldhu	r2,12(r16)
   12d14:	10c0800c 	andi	r3,r2,512
   12d18:	183fdb1e 	bne	r3,zero,12c88 <__alt_data_end+0xffff2c88>
   12d1c:	10800094 	ori	r2,r2,2
   12d20:	80c010c4 	addi	r3,r16,67
   12d24:	8080030d 	sth	r2,12(r16)
   12d28:	00800044 	movi	r2,1
   12d2c:	80c00015 	stw	r3,0(r16)
   12d30:	80c00415 	stw	r3,16(r16)
   12d34:	80800515 	stw	r2,20(r16)
   12d38:	003fd306 	br	12c88 <__alt_data_end+0xffff2c88>
   12d3c:	04810004 	movi	r18,1024
   12d40:	003fc306 	br	12c50 <__alt_data_end+0xffff2c50>
   12d44:	0027883a 	mov	r19,zero
   12d48:	04810004 	movi	r18,1024
   12d4c:	003fc006 	br	12c50 <__alt_data_end+0xffff2c50>

00012d50 <_read_r>:
   12d50:	defffd04 	addi	sp,sp,-12
   12d54:	2805883a 	mov	r2,r5
   12d58:	dc000015 	stw	r16,0(sp)
   12d5c:	04000074 	movhi	r16,1
   12d60:	dc400115 	stw	r17,4(sp)
   12d64:	300b883a 	mov	r5,r6
   12d68:	8418a104 	addi	r16,r16,25220
   12d6c:	2023883a 	mov	r17,r4
   12d70:	380d883a 	mov	r6,r7
   12d74:	1009883a 	mov	r4,r2
   12d78:	dfc00215 	stw	ra,8(sp)
   12d7c:	80000015 	stw	zero,0(r16)
   12d80:	00136140 	call	13614 <read>
   12d84:	00ffffc4 	movi	r3,-1
   12d88:	10c00526 	beq	r2,r3,12da0 <_read_r+0x50>
   12d8c:	dfc00217 	ldw	ra,8(sp)
   12d90:	dc400117 	ldw	r17,4(sp)
   12d94:	dc000017 	ldw	r16,0(sp)
   12d98:	dec00304 	addi	sp,sp,12
   12d9c:	f800283a 	ret
   12da0:	80c00017 	ldw	r3,0(r16)
   12da4:	183ff926 	beq	r3,zero,12d8c <__alt_data_end+0xffff2d8c>
   12da8:	88c00015 	stw	r3,0(r17)
   12dac:	003ff706 	br	12d8c <__alt_data_end+0xffff2d8c>

00012db0 <_fstat_r>:
   12db0:	defffd04 	addi	sp,sp,-12
   12db4:	2805883a 	mov	r2,r5
   12db8:	dc000015 	stw	r16,0(sp)
   12dbc:	04000074 	movhi	r16,1
   12dc0:	dc400115 	stw	r17,4(sp)
   12dc4:	8418a104 	addi	r16,r16,25220
   12dc8:	2023883a 	mov	r17,r4
   12dcc:	300b883a 	mov	r5,r6
   12dd0:	1009883a 	mov	r4,r2
   12dd4:	dfc00215 	stw	ra,8(sp)
   12dd8:	80000015 	stw	zero,0(r16)
   12ddc:	00131880 	call	13188 <fstat>
   12de0:	00ffffc4 	movi	r3,-1
   12de4:	10c00526 	beq	r2,r3,12dfc <_fstat_r+0x4c>
   12de8:	dfc00217 	ldw	ra,8(sp)
   12dec:	dc400117 	ldw	r17,4(sp)
   12df0:	dc000017 	ldw	r16,0(sp)
   12df4:	dec00304 	addi	sp,sp,12
   12df8:	f800283a 	ret
   12dfc:	80c00017 	ldw	r3,0(r16)
   12e00:	183ff926 	beq	r3,zero,12de8 <__alt_data_end+0xffff2de8>
   12e04:	88c00015 	stw	r3,0(r17)
   12e08:	003ff706 	br	12de8 <__alt_data_end+0xffff2de8>

00012e0c <_isatty_r>:
   12e0c:	defffd04 	addi	sp,sp,-12
   12e10:	dc000015 	stw	r16,0(sp)
   12e14:	04000074 	movhi	r16,1
   12e18:	dc400115 	stw	r17,4(sp)
   12e1c:	8418a104 	addi	r16,r16,25220
   12e20:	2023883a 	mov	r17,r4
   12e24:	2809883a 	mov	r4,r5
   12e28:	dfc00215 	stw	ra,8(sp)
   12e2c:	80000015 	stw	zero,0(r16)
   12e30:	00132740 	call	13274 <isatty>
   12e34:	00ffffc4 	movi	r3,-1
   12e38:	10c00526 	beq	r2,r3,12e50 <_isatty_r+0x44>
   12e3c:	dfc00217 	ldw	ra,8(sp)
   12e40:	dc400117 	ldw	r17,4(sp)
   12e44:	dc000017 	ldw	r16,0(sp)
   12e48:	dec00304 	addi	sp,sp,12
   12e4c:	f800283a 	ret
   12e50:	80c00017 	ldw	r3,0(r16)
   12e54:	183ff926 	beq	r3,zero,12e3c <__alt_data_end+0xffff2e3c>
   12e58:	88c00015 	stw	r3,0(r17)
   12e5c:	003ff706 	br	12e3c <__alt_data_end+0xffff2e3c>

00012e60 <__divsi3>:
   12e60:	20001b16 	blt	r4,zero,12ed0 <__divsi3+0x70>
   12e64:	000f883a 	mov	r7,zero
   12e68:	28001616 	blt	r5,zero,12ec4 <__divsi3+0x64>
   12e6c:	200d883a 	mov	r6,r4
   12e70:	29001a2e 	bgeu	r5,r4,12edc <__divsi3+0x7c>
   12e74:	00800804 	movi	r2,32
   12e78:	00c00044 	movi	r3,1
   12e7c:	00000106 	br	12e84 <__divsi3+0x24>
   12e80:	10000d26 	beq	r2,zero,12eb8 <__divsi3+0x58>
   12e84:	294b883a 	add	r5,r5,r5
   12e88:	10bfffc4 	addi	r2,r2,-1
   12e8c:	18c7883a 	add	r3,r3,r3
   12e90:	293ffb36 	bltu	r5,r4,12e80 <__alt_data_end+0xffff2e80>
   12e94:	0005883a 	mov	r2,zero
   12e98:	18000726 	beq	r3,zero,12eb8 <__divsi3+0x58>
   12e9c:	0005883a 	mov	r2,zero
   12ea0:	31400236 	bltu	r6,r5,12eac <__divsi3+0x4c>
   12ea4:	314dc83a 	sub	r6,r6,r5
   12ea8:	10c4b03a 	or	r2,r2,r3
   12eac:	1806d07a 	srli	r3,r3,1
   12eb0:	280ad07a 	srli	r5,r5,1
   12eb4:	183ffa1e 	bne	r3,zero,12ea0 <__alt_data_end+0xffff2ea0>
   12eb8:	38000126 	beq	r7,zero,12ec0 <__divsi3+0x60>
   12ebc:	0085c83a 	sub	r2,zero,r2
   12ec0:	f800283a 	ret
   12ec4:	014bc83a 	sub	r5,zero,r5
   12ec8:	39c0005c 	xori	r7,r7,1
   12ecc:	003fe706 	br	12e6c <__alt_data_end+0xffff2e6c>
   12ed0:	0109c83a 	sub	r4,zero,r4
   12ed4:	01c00044 	movi	r7,1
   12ed8:	003fe306 	br	12e68 <__alt_data_end+0xffff2e68>
   12edc:	00c00044 	movi	r3,1
   12ee0:	003fee06 	br	12e9c <__alt_data_end+0xffff2e9c>

00012ee4 <__modsi3>:
   12ee4:	20001716 	blt	r4,zero,12f44 <__modsi3+0x60>
   12ee8:	000f883a 	mov	r7,zero
   12eec:	2005883a 	mov	r2,r4
   12ef0:	28001216 	blt	r5,zero,12f3c <__modsi3+0x58>
   12ef4:	2900162e 	bgeu	r5,r4,12f50 <__modsi3+0x6c>
   12ef8:	01800804 	movi	r6,32
   12efc:	00c00044 	movi	r3,1
   12f00:	00000106 	br	12f08 <__modsi3+0x24>
   12f04:	30000a26 	beq	r6,zero,12f30 <__modsi3+0x4c>
   12f08:	294b883a 	add	r5,r5,r5
   12f0c:	31bfffc4 	addi	r6,r6,-1
   12f10:	18c7883a 	add	r3,r3,r3
   12f14:	293ffb36 	bltu	r5,r4,12f04 <__alt_data_end+0xffff2f04>
   12f18:	18000526 	beq	r3,zero,12f30 <__modsi3+0x4c>
   12f1c:	1806d07a 	srli	r3,r3,1
   12f20:	11400136 	bltu	r2,r5,12f28 <__modsi3+0x44>
   12f24:	1145c83a 	sub	r2,r2,r5
   12f28:	280ad07a 	srli	r5,r5,1
   12f2c:	183ffb1e 	bne	r3,zero,12f1c <__alt_data_end+0xffff2f1c>
   12f30:	38000126 	beq	r7,zero,12f38 <__modsi3+0x54>
   12f34:	0085c83a 	sub	r2,zero,r2
   12f38:	f800283a 	ret
   12f3c:	014bc83a 	sub	r5,zero,r5
   12f40:	003fec06 	br	12ef4 <__alt_data_end+0xffff2ef4>
   12f44:	0109c83a 	sub	r4,zero,r4
   12f48:	01c00044 	movi	r7,1
   12f4c:	003fe706 	br	12eec <__alt_data_end+0xffff2eec>
   12f50:	00c00044 	movi	r3,1
   12f54:	003ff106 	br	12f1c <__alt_data_end+0xffff2f1c>

00012f58 <__udivsi3>:
   12f58:	200d883a 	mov	r6,r4
   12f5c:	2900152e 	bgeu	r5,r4,12fb4 <__udivsi3+0x5c>
   12f60:	28001416 	blt	r5,zero,12fb4 <__udivsi3+0x5c>
   12f64:	00800804 	movi	r2,32
   12f68:	00c00044 	movi	r3,1
   12f6c:	00000206 	br	12f78 <__udivsi3+0x20>
   12f70:	10000e26 	beq	r2,zero,12fac <__udivsi3+0x54>
   12f74:	28000516 	blt	r5,zero,12f8c <__udivsi3+0x34>
   12f78:	294b883a 	add	r5,r5,r5
   12f7c:	10bfffc4 	addi	r2,r2,-1
   12f80:	18c7883a 	add	r3,r3,r3
   12f84:	293ffa36 	bltu	r5,r4,12f70 <__alt_data_end+0xffff2f70>
   12f88:	18000826 	beq	r3,zero,12fac <__udivsi3+0x54>
   12f8c:	0005883a 	mov	r2,zero
   12f90:	31400236 	bltu	r6,r5,12f9c <__udivsi3+0x44>
   12f94:	314dc83a 	sub	r6,r6,r5
   12f98:	10c4b03a 	or	r2,r2,r3
   12f9c:	1806d07a 	srli	r3,r3,1
   12fa0:	280ad07a 	srli	r5,r5,1
   12fa4:	183ffa1e 	bne	r3,zero,12f90 <__alt_data_end+0xffff2f90>
   12fa8:	f800283a 	ret
   12fac:	0005883a 	mov	r2,zero
   12fb0:	f800283a 	ret
   12fb4:	00c00044 	movi	r3,1
   12fb8:	003ff406 	br	12f8c <__alt_data_end+0xffff2f8c>

00012fbc <__umodsi3>:
   12fbc:	2005883a 	mov	r2,r4
   12fc0:	2900122e 	bgeu	r5,r4,1300c <__umodsi3+0x50>
   12fc4:	28001116 	blt	r5,zero,1300c <__umodsi3+0x50>
   12fc8:	01800804 	movi	r6,32
   12fcc:	00c00044 	movi	r3,1
   12fd0:	00000206 	br	12fdc <__umodsi3+0x20>
   12fd4:	30000c26 	beq	r6,zero,13008 <__umodsi3+0x4c>
   12fd8:	28000516 	blt	r5,zero,12ff0 <__umodsi3+0x34>
   12fdc:	294b883a 	add	r5,r5,r5
   12fe0:	31bfffc4 	addi	r6,r6,-1
   12fe4:	18c7883a 	add	r3,r3,r3
   12fe8:	293ffa36 	bltu	r5,r4,12fd4 <__alt_data_end+0xffff2fd4>
   12fec:	18000626 	beq	r3,zero,13008 <__umodsi3+0x4c>
   12ff0:	1806d07a 	srli	r3,r3,1
   12ff4:	11400136 	bltu	r2,r5,12ffc <__umodsi3+0x40>
   12ff8:	1145c83a 	sub	r2,r2,r5
   12ffc:	280ad07a 	srli	r5,r5,1
   13000:	183ffb1e 	bne	r3,zero,12ff0 <__alt_data_end+0xffff2ff0>
   13004:	f800283a 	ret
   13008:	f800283a 	ret
   1300c:	00c00044 	movi	r3,1
   13010:	003ff706 	br	12ff0 <__alt_data_end+0xffff2ff0>

00013014 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13014:	defffe04 	addi	sp,sp,-8
   13018:	dfc00115 	stw	ra,4(sp)
   1301c:	df000015 	stw	fp,0(sp)
   13020:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13024:	d0a00917 	ldw	r2,-32732(gp)
   13028:	10000326 	beq	r2,zero,13038 <alt_get_errno+0x24>
   1302c:	d0a00917 	ldw	r2,-32732(gp)
   13030:	103ee83a 	callr	r2
   13034:	00000106 	br	1303c <alt_get_errno+0x28>
   13038:	d0a29f04 	addi	r2,gp,-30084
}
   1303c:	e037883a 	mov	sp,fp
   13040:	dfc00117 	ldw	ra,4(sp)
   13044:	df000017 	ldw	fp,0(sp)
   13048:	dec00204 	addi	sp,sp,8
   1304c:	f800283a 	ret

00013050 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   13050:	defffb04 	addi	sp,sp,-20
   13054:	dfc00415 	stw	ra,16(sp)
   13058:	df000315 	stw	fp,12(sp)
   1305c:	df000304 	addi	fp,sp,12
   13060:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   13064:	e0bfff17 	ldw	r2,-4(fp)
   13068:	10000616 	blt	r2,zero,13084 <close+0x34>
   1306c:	e0bfff17 	ldw	r2,-4(fp)
   13070:	10c00324 	muli	r3,r2,12
   13074:	00800074 	movhi	r2,1
   13078:	10959704 	addi	r2,r2,22108
   1307c:	1885883a 	add	r2,r3,r2
   13080:	00000106 	br	13088 <close+0x38>
   13084:	0005883a 	mov	r2,zero
   13088:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1308c:	e0bffd17 	ldw	r2,-12(fp)
   13090:	10001926 	beq	r2,zero,130f8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13094:	e0bffd17 	ldw	r2,-12(fp)
   13098:	10800017 	ldw	r2,0(r2)
   1309c:	10800417 	ldw	r2,16(r2)
   130a0:	10000626 	beq	r2,zero,130bc <close+0x6c>
   130a4:	e0bffd17 	ldw	r2,-12(fp)
   130a8:	10800017 	ldw	r2,0(r2)
   130ac:	10800417 	ldw	r2,16(r2)
   130b0:	e13ffd17 	ldw	r4,-12(fp)
   130b4:	103ee83a 	callr	r2
   130b8:	00000106 	br	130c0 <close+0x70>
   130bc:	0005883a 	mov	r2,zero
   130c0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   130c4:	e13fff17 	ldw	r4,-4(fp)
   130c8:	00137100 	call	13710 <alt_release_fd>
    if (rval < 0)
   130cc:	e0bffe17 	ldw	r2,-8(fp)
   130d0:	1000070e 	bge	r2,zero,130f0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   130d4:	00130140 	call	13014 <alt_get_errno>
   130d8:	1007883a 	mov	r3,r2
   130dc:	e0bffe17 	ldw	r2,-8(fp)
   130e0:	0085c83a 	sub	r2,zero,r2
   130e4:	18800015 	stw	r2,0(r3)
      return -1;
   130e8:	00bfffc4 	movi	r2,-1
   130ec:	00000706 	br	1310c <close+0xbc>
    }
    return 0;
   130f0:	0005883a 	mov	r2,zero
   130f4:	00000506 	br	1310c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   130f8:	00130140 	call	13014 <alt_get_errno>
   130fc:	1007883a 	mov	r3,r2
   13100:	00801444 	movi	r2,81
   13104:	18800015 	stw	r2,0(r3)
    return -1;
   13108:	00bfffc4 	movi	r2,-1
  }
}
   1310c:	e037883a 	mov	sp,fp
   13110:	dfc00117 	ldw	ra,4(sp)
   13114:	df000017 	ldw	fp,0(sp)
   13118:	dec00204 	addi	sp,sp,8
   1311c:	f800283a 	ret

00013120 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   13120:	defffc04 	addi	sp,sp,-16
   13124:	df000315 	stw	fp,12(sp)
   13128:	df000304 	addi	fp,sp,12
   1312c:	e13ffd15 	stw	r4,-12(fp)
   13130:	e17ffe15 	stw	r5,-8(fp)
   13134:	e1bfff15 	stw	r6,-4(fp)
  return len;
   13138:	e0bfff17 	ldw	r2,-4(fp)
}
   1313c:	e037883a 	mov	sp,fp
   13140:	df000017 	ldw	fp,0(sp)
   13144:	dec00104 	addi	sp,sp,4
   13148:	f800283a 	ret

0001314c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1314c:	defffe04 	addi	sp,sp,-8
   13150:	dfc00115 	stw	ra,4(sp)
   13154:	df000015 	stw	fp,0(sp)
   13158:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1315c:	d0a00917 	ldw	r2,-32732(gp)
   13160:	10000326 	beq	r2,zero,13170 <alt_get_errno+0x24>
   13164:	d0a00917 	ldw	r2,-32732(gp)
   13168:	103ee83a 	callr	r2
   1316c:	00000106 	br	13174 <alt_get_errno+0x28>
   13170:	d0a29f04 	addi	r2,gp,-30084
}
   13174:	e037883a 	mov	sp,fp
   13178:	dfc00117 	ldw	ra,4(sp)
   1317c:	df000017 	ldw	fp,0(sp)
   13180:	dec00204 	addi	sp,sp,8
   13184:	f800283a 	ret

00013188 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13188:	defffb04 	addi	sp,sp,-20
   1318c:	dfc00415 	stw	ra,16(sp)
   13190:	df000315 	stw	fp,12(sp)
   13194:	df000304 	addi	fp,sp,12
   13198:	e13ffe15 	stw	r4,-8(fp)
   1319c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   131a0:	e0bffe17 	ldw	r2,-8(fp)
   131a4:	10000616 	blt	r2,zero,131c0 <fstat+0x38>
   131a8:	e0bffe17 	ldw	r2,-8(fp)
   131ac:	10c00324 	muli	r3,r2,12
   131b0:	00800074 	movhi	r2,1
   131b4:	10959704 	addi	r2,r2,22108
   131b8:	1885883a 	add	r2,r3,r2
   131bc:	00000106 	br	131c4 <fstat+0x3c>
   131c0:	0005883a 	mov	r2,zero
   131c4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   131c8:	e0bffd17 	ldw	r2,-12(fp)
   131cc:	10001026 	beq	r2,zero,13210 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   131d0:	e0bffd17 	ldw	r2,-12(fp)
   131d4:	10800017 	ldw	r2,0(r2)
   131d8:	10800817 	ldw	r2,32(r2)
   131dc:	10000726 	beq	r2,zero,131fc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   131e0:	e0bffd17 	ldw	r2,-12(fp)
   131e4:	10800017 	ldw	r2,0(r2)
   131e8:	10800817 	ldw	r2,32(r2)
   131ec:	e17fff17 	ldw	r5,-4(fp)
   131f0:	e13ffd17 	ldw	r4,-12(fp)
   131f4:	103ee83a 	callr	r2
   131f8:	00000a06 	br	13224 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   131fc:	e0bfff17 	ldw	r2,-4(fp)
   13200:	00c80004 	movi	r3,8192
   13204:	10c00115 	stw	r3,4(r2)
      return 0;
   13208:	0005883a 	mov	r2,zero
   1320c:	00000506 	br	13224 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13210:	001314c0 	call	1314c <alt_get_errno>
   13214:	1007883a 	mov	r3,r2
   13218:	00801444 	movi	r2,81
   1321c:	18800015 	stw	r2,0(r3)
    return -1;
   13220:	00bfffc4 	movi	r2,-1
  }
}
   13224:	e037883a 	mov	sp,fp
   13228:	dfc00117 	ldw	ra,4(sp)
   1322c:	df000017 	ldw	fp,0(sp)
   13230:	dec00204 	addi	sp,sp,8
   13234:	f800283a 	ret

00013238 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13238:	defffe04 	addi	sp,sp,-8
   1323c:	dfc00115 	stw	ra,4(sp)
   13240:	df000015 	stw	fp,0(sp)
   13244:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13248:	d0a00917 	ldw	r2,-32732(gp)
   1324c:	10000326 	beq	r2,zero,1325c <alt_get_errno+0x24>
   13250:	d0a00917 	ldw	r2,-32732(gp)
   13254:	103ee83a 	callr	r2
   13258:	00000106 	br	13260 <alt_get_errno+0x28>
   1325c:	d0a29f04 	addi	r2,gp,-30084
}
   13260:	e037883a 	mov	sp,fp
   13264:	dfc00117 	ldw	ra,4(sp)
   13268:	df000017 	ldw	fp,0(sp)
   1326c:	dec00204 	addi	sp,sp,8
   13270:	f800283a 	ret

00013274 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13274:	deffed04 	addi	sp,sp,-76
   13278:	dfc01215 	stw	ra,72(sp)
   1327c:	df001115 	stw	fp,68(sp)
   13280:	df001104 	addi	fp,sp,68
   13284:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13288:	e0bfff17 	ldw	r2,-4(fp)
   1328c:	10000616 	blt	r2,zero,132a8 <isatty+0x34>
   13290:	e0bfff17 	ldw	r2,-4(fp)
   13294:	10c00324 	muli	r3,r2,12
   13298:	00800074 	movhi	r2,1
   1329c:	10959704 	addi	r2,r2,22108
   132a0:	1885883a 	add	r2,r3,r2
   132a4:	00000106 	br	132ac <isatty+0x38>
   132a8:	0005883a 	mov	r2,zero
   132ac:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   132b0:	e0bfef17 	ldw	r2,-68(fp)
   132b4:	10000e26 	beq	r2,zero,132f0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   132b8:	e0bfef17 	ldw	r2,-68(fp)
   132bc:	10800017 	ldw	r2,0(r2)
   132c0:	10800817 	ldw	r2,32(r2)
   132c4:	1000021e 	bne	r2,zero,132d0 <isatty+0x5c>
    {
      return 1;
   132c8:	00800044 	movi	r2,1
   132cc:	00000d06 	br	13304 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   132d0:	e0bff004 	addi	r2,fp,-64
   132d4:	100b883a 	mov	r5,r2
   132d8:	e13fff17 	ldw	r4,-4(fp)
   132dc:	00131880 	call	13188 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   132e0:	e0bff117 	ldw	r2,-60(fp)
   132e4:	10880020 	cmpeqi	r2,r2,8192
   132e8:	10803fcc 	andi	r2,r2,255
   132ec:	00000506 	br	13304 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   132f0:	00132380 	call	13238 <alt_get_errno>
   132f4:	1007883a 	mov	r3,r2
   132f8:	00801444 	movi	r2,81
   132fc:	18800015 	stw	r2,0(r3)
    return 0;
   13300:	0005883a 	mov	r2,zero
  }
}
   13304:	e037883a 	mov	sp,fp
   13308:	dfc00117 	ldw	ra,4(sp)
   1330c:	df000017 	ldw	fp,0(sp)
   13310:	dec00204 	addi	sp,sp,8
   13314:	f800283a 	ret

00013318 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   13318:	defffc04 	addi	sp,sp,-16
   1331c:	df000315 	stw	fp,12(sp)
   13320:	df000304 	addi	fp,sp,12
   13324:	e13ffd15 	stw	r4,-12(fp)
   13328:	e17ffe15 	stw	r5,-8(fp)
   1332c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   13330:	e0fffe17 	ldw	r3,-8(fp)
   13334:	e0bffd17 	ldw	r2,-12(fp)
   13338:	18800c26 	beq	r3,r2,1336c <alt_load_section+0x54>
  {
    while( to != end )
   1333c:	00000806 	br	13360 <alt_load_section+0x48>
    {
      *to++ = *from++;
   13340:	e0bffe17 	ldw	r2,-8(fp)
   13344:	10c00104 	addi	r3,r2,4
   13348:	e0fffe15 	stw	r3,-8(fp)
   1334c:	e0fffd17 	ldw	r3,-12(fp)
   13350:	19000104 	addi	r4,r3,4
   13354:	e13ffd15 	stw	r4,-12(fp)
   13358:	18c00017 	ldw	r3,0(r3)
   1335c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   13360:	e0fffe17 	ldw	r3,-8(fp)
   13364:	e0bfff17 	ldw	r2,-4(fp)
   13368:	18bff51e 	bne	r3,r2,13340 <__alt_data_end+0xffff3340>
    {
      *to++ = *from++;
    }
  }
}
   1336c:	0001883a 	nop
   13370:	e037883a 	mov	sp,fp
   13374:	df000017 	ldw	fp,0(sp)
   13378:	dec00104 	addi	sp,sp,4
   1337c:	f800283a 	ret

00013380 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13380:	defffe04 	addi	sp,sp,-8
   13384:	dfc00115 	stw	ra,4(sp)
   13388:	df000015 	stw	fp,0(sp)
   1338c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   13390:	01800074 	movhi	r6,1
   13394:	31961004 	addi	r6,r6,22592
   13398:	01400074 	movhi	r5,1
   1339c:	29538204 	addi	r5,r5,19976
   133a0:	01000074 	movhi	r4,1
   133a4:	21161004 	addi	r4,r4,22592
   133a8:	00133180 	call	13318 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   133ac:	01800074 	movhi	r6,1
   133b0:	31807004 	addi	r6,r6,448
   133b4:	01400074 	movhi	r5,1
   133b8:	29400804 	addi	r5,r5,32
   133bc:	01000074 	movhi	r4,1
   133c0:	21000804 	addi	r4,r4,32
   133c4:	00133180 	call	13318 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   133c8:	01800074 	movhi	r6,1
   133cc:	31938204 	addi	r6,r6,19976
   133d0:	01400074 	movhi	r5,1
   133d4:	29536f04 	addi	r5,r5,19900
   133d8:	01000074 	movhi	r4,1
   133dc:	21136f04 	addi	r4,r4,19900
   133e0:	00133180 	call	13318 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   133e4:	0013d440 	call	13d44 <alt_dcache_flush_all>
  alt_icache_flush_all();
   133e8:	0013f2c0 	call	13f2c <alt_icache_flush_all>
}
   133ec:	0001883a 	nop
   133f0:	e037883a 	mov	sp,fp
   133f4:	dfc00117 	ldw	ra,4(sp)
   133f8:	df000017 	ldw	fp,0(sp)
   133fc:	dec00204 	addi	sp,sp,8
   13400:	f800283a 	ret

00013404 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13404:	defffe04 	addi	sp,sp,-8
   13408:	dfc00115 	stw	ra,4(sp)
   1340c:	df000015 	stw	fp,0(sp)
   13410:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13414:	d0a00917 	ldw	r2,-32732(gp)
   13418:	10000326 	beq	r2,zero,13428 <alt_get_errno+0x24>
   1341c:	d0a00917 	ldw	r2,-32732(gp)
   13420:	103ee83a 	callr	r2
   13424:	00000106 	br	1342c <alt_get_errno+0x28>
   13428:	d0a29f04 	addi	r2,gp,-30084
}
   1342c:	e037883a 	mov	sp,fp
   13430:	dfc00117 	ldw	ra,4(sp)
   13434:	df000017 	ldw	fp,0(sp)
   13438:	dec00204 	addi	sp,sp,8
   1343c:	f800283a 	ret

00013440 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   13440:	defff904 	addi	sp,sp,-28
   13444:	dfc00615 	stw	ra,24(sp)
   13448:	df000515 	stw	fp,20(sp)
   1344c:	df000504 	addi	fp,sp,20
   13450:	e13ffd15 	stw	r4,-12(fp)
   13454:	e17ffe15 	stw	r5,-8(fp)
   13458:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1345c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13460:	e0bffd17 	ldw	r2,-12(fp)
   13464:	10000616 	blt	r2,zero,13480 <lseek+0x40>
   13468:	e0bffd17 	ldw	r2,-12(fp)
   1346c:	10c00324 	muli	r3,r2,12
   13470:	00800074 	movhi	r2,1
   13474:	10959704 	addi	r2,r2,22108
   13478:	1885883a 	add	r2,r3,r2
   1347c:	00000106 	br	13484 <lseek+0x44>
   13480:	0005883a 	mov	r2,zero
   13484:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   13488:	e0bffc17 	ldw	r2,-16(fp)
   1348c:	10001026 	beq	r2,zero,134d0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   13490:	e0bffc17 	ldw	r2,-16(fp)
   13494:	10800017 	ldw	r2,0(r2)
   13498:	10800717 	ldw	r2,28(r2)
   1349c:	10000926 	beq	r2,zero,134c4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   134a0:	e0bffc17 	ldw	r2,-16(fp)
   134a4:	10800017 	ldw	r2,0(r2)
   134a8:	10800717 	ldw	r2,28(r2)
   134ac:	e1bfff17 	ldw	r6,-4(fp)
   134b0:	e17ffe17 	ldw	r5,-8(fp)
   134b4:	e13ffc17 	ldw	r4,-16(fp)
   134b8:	103ee83a 	callr	r2
   134bc:	e0bffb15 	stw	r2,-20(fp)
   134c0:	00000506 	br	134d8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   134c4:	00bfde84 	movi	r2,-134
   134c8:	e0bffb15 	stw	r2,-20(fp)
   134cc:	00000206 	br	134d8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   134d0:	00bfebc4 	movi	r2,-81
   134d4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   134d8:	e0bffb17 	ldw	r2,-20(fp)
   134dc:	1000070e 	bge	r2,zero,134fc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   134e0:	00134040 	call	13404 <alt_get_errno>
   134e4:	1007883a 	mov	r3,r2
   134e8:	e0bffb17 	ldw	r2,-20(fp)
   134ec:	0085c83a 	sub	r2,zero,r2
   134f0:	18800015 	stw	r2,0(r3)
    rc = -1;
   134f4:	00bfffc4 	movi	r2,-1
   134f8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   134fc:	e0bffb17 	ldw	r2,-20(fp)
}
   13500:	e037883a 	mov	sp,fp
   13504:	dfc00117 	ldw	ra,4(sp)
   13508:	df000017 	ldw	fp,0(sp)
   1350c:	dec00204 	addi	sp,sp,8
   13510:	f800283a 	ret

00013514 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   13514:	defffd04 	addi	sp,sp,-12
   13518:	dfc00215 	stw	ra,8(sp)
   1351c:	df000115 	stw	fp,4(sp)
   13520:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   13524:	0009883a 	mov	r4,zero
   13528:	001398c0 	call	1398c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1352c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13530:	00139c40 	call	139c4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13534:	01800074 	movhi	r6,1
   13538:	31937804 	addi	r6,r6,19936
   1353c:	01400074 	movhi	r5,1
   13540:	29537804 	addi	r5,r5,19936
   13544:	01000074 	movhi	r4,1
   13548:	21137804 	addi	r4,r4,19936
   1354c:	00142c40 	call	142c4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13550:	0013e6c0 	call	13e6c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   13554:	01000074 	movhi	r4,1
   13558:	210fb304 	addi	r4,r4,16076
   1355c:	0014a280 	call	14a28 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13560:	d0a2a017 	ldw	r2,-30080(gp)
   13564:	d0e2a117 	ldw	r3,-30076(gp)
   13568:	d122a217 	ldw	r4,-30072(gp)
   1356c:	200d883a 	mov	r6,r4
   13570:	180b883a 	mov	r5,r3
   13574:	1009883a 	mov	r4,r2
   13578:	001020c0 	call	1020c <main>
   1357c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   13580:	01000044 	movi	r4,1
   13584:	00130500 	call	13050 <close>
  exit (result);
   13588:	e13fff17 	ldw	r4,-4(fp)
   1358c:	0014a3c0 	call	14a3c <exit>

00013590 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   13590:	defffe04 	addi	sp,sp,-8
   13594:	df000115 	stw	fp,4(sp)
   13598:	df000104 	addi	fp,sp,4
   1359c:	e13fff15 	stw	r4,-4(fp)
}
   135a0:	0001883a 	nop
   135a4:	e037883a 	mov	sp,fp
   135a8:	df000017 	ldw	fp,0(sp)
   135ac:	dec00104 	addi	sp,sp,4
   135b0:	f800283a 	ret

000135b4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   135b4:	defffe04 	addi	sp,sp,-8
   135b8:	df000115 	stw	fp,4(sp)
   135bc:	df000104 	addi	fp,sp,4
   135c0:	e13fff15 	stw	r4,-4(fp)
}
   135c4:	0001883a 	nop
   135c8:	e037883a 	mov	sp,fp
   135cc:	df000017 	ldw	fp,0(sp)
   135d0:	dec00104 	addi	sp,sp,4
   135d4:	f800283a 	ret

000135d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   135d8:	defffe04 	addi	sp,sp,-8
   135dc:	dfc00115 	stw	ra,4(sp)
   135e0:	df000015 	stw	fp,0(sp)
   135e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   135e8:	d0a00917 	ldw	r2,-32732(gp)
   135ec:	10000326 	beq	r2,zero,135fc <alt_get_errno+0x24>
   135f0:	d0a00917 	ldw	r2,-32732(gp)
   135f4:	103ee83a 	callr	r2
   135f8:	00000106 	br	13600 <alt_get_errno+0x28>
   135fc:	d0a29f04 	addi	r2,gp,-30084
}
   13600:	e037883a 	mov	sp,fp
   13604:	dfc00117 	ldw	ra,4(sp)
   13608:	df000017 	ldw	fp,0(sp)
   1360c:	dec00204 	addi	sp,sp,8
   13610:	f800283a 	ret

00013614 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   13614:	defff904 	addi	sp,sp,-28
   13618:	dfc00615 	stw	ra,24(sp)
   1361c:	df000515 	stw	fp,20(sp)
   13620:	df000504 	addi	fp,sp,20
   13624:	e13ffd15 	stw	r4,-12(fp)
   13628:	e17ffe15 	stw	r5,-8(fp)
   1362c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13630:	e0bffd17 	ldw	r2,-12(fp)
   13634:	10000616 	blt	r2,zero,13650 <read+0x3c>
   13638:	e0bffd17 	ldw	r2,-12(fp)
   1363c:	10c00324 	muli	r3,r2,12
   13640:	00800074 	movhi	r2,1
   13644:	10959704 	addi	r2,r2,22108
   13648:	1885883a 	add	r2,r3,r2
   1364c:	00000106 	br	13654 <read+0x40>
   13650:	0005883a 	mov	r2,zero
   13654:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13658:	e0bffb17 	ldw	r2,-20(fp)
   1365c:	10002226 	beq	r2,zero,136e8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13660:	e0bffb17 	ldw	r2,-20(fp)
   13664:	10800217 	ldw	r2,8(r2)
   13668:	108000cc 	andi	r2,r2,3
   1366c:	10800060 	cmpeqi	r2,r2,1
   13670:	1000181e 	bne	r2,zero,136d4 <read+0xc0>
        (fd->dev->read))
   13674:	e0bffb17 	ldw	r2,-20(fp)
   13678:	10800017 	ldw	r2,0(r2)
   1367c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13680:	10001426 	beq	r2,zero,136d4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13684:	e0bffb17 	ldw	r2,-20(fp)
   13688:	10800017 	ldw	r2,0(r2)
   1368c:	10800517 	ldw	r2,20(r2)
   13690:	e0ffff17 	ldw	r3,-4(fp)
   13694:	180d883a 	mov	r6,r3
   13698:	e17ffe17 	ldw	r5,-8(fp)
   1369c:	e13ffb17 	ldw	r4,-20(fp)
   136a0:	103ee83a 	callr	r2
   136a4:	e0bffc15 	stw	r2,-16(fp)
   136a8:	e0bffc17 	ldw	r2,-16(fp)
   136ac:	1000070e 	bge	r2,zero,136cc <read+0xb8>
        {
          ALT_ERRNO = -rval;
   136b0:	00135d80 	call	135d8 <alt_get_errno>
   136b4:	1007883a 	mov	r3,r2
   136b8:	e0bffc17 	ldw	r2,-16(fp)
   136bc:	0085c83a 	sub	r2,zero,r2
   136c0:	18800015 	stw	r2,0(r3)
          return -1;
   136c4:	00bfffc4 	movi	r2,-1
   136c8:	00000c06 	br	136fc <read+0xe8>
        }
        return rval;
   136cc:	e0bffc17 	ldw	r2,-16(fp)
   136d0:	00000a06 	br	136fc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   136d4:	00135d80 	call	135d8 <alt_get_errno>
   136d8:	1007883a 	mov	r3,r2
   136dc:	00800344 	movi	r2,13
   136e0:	18800015 	stw	r2,0(r3)
   136e4:	00000406 	br	136f8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   136e8:	00135d80 	call	135d8 <alt_get_errno>
   136ec:	1007883a 	mov	r3,r2
   136f0:	00801444 	movi	r2,81
   136f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   136f8:	00bfffc4 	movi	r2,-1
}
   136fc:	e037883a 	mov	sp,fp
   13700:	dfc00117 	ldw	ra,4(sp)
   13704:	df000017 	ldw	fp,0(sp)
   13708:	dec00204 	addi	sp,sp,8
   1370c:	f800283a 	ret

00013710 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13710:	defffe04 	addi	sp,sp,-8
   13714:	df000115 	stw	fp,4(sp)
   13718:	df000104 	addi	fp,sp,4
   1371c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   13720:	e0bfff17 	ldw	r2,-4(fp)
   13724:	108000d0 	cmplti	r2,r2,3
   13728:	10000d1e 	bne	r2,zero,13760 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   1372c:	00800074 	movhi	r2,1
   13730:	10959704 	addi	r2,r2,22108
   13734:	e0ffff17 	ldw	r3,-4(fp)
   13738:	18c00324 	muli	r3,r3,12
   1373c:	10c5883a 	add	r2,r2,r3
   13740:	10800204 	addi	r2,r2,8
   13744:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   13748:	00800074 	movhi	r2,1
   1374c:	10959704 	addi	r2,r2,22108
   13750:	e0ffff17 	ldw	r3,-4(fp)
   13754:	18c00324 	muli	r3,r3,12
   13758:	10c5883a 	add	r2,r2,r3
   1375c:	10000015 	stw	zero,0(r2)
  }
}
   13760:	0001883a 	nop
   13764:	e037883a 	mov	sp,fp
   13768:	df000017 	ldw	fp,0(sp)
   1376c:	dec00104 	addi	sp,sp,4
   13770:	f800283a 	ret

00013774 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13774:	defff904 	addi	sp,sp,-28
   13778:	df000615 	stw	fp,24(sp)
   1377c:	df000604 	addi	fp,sp,24
   13780:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13784:	0005303a 	rdctl	r2,status
   13788:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1378c:	e0fffe17 	ldw	r3,-8(fp)
   13790:	00bfff84 	movi	r2,-2
   13794:	1884703a 	and	r2,r3,r2
   13798:	1001703a 	wrctl	status,r2
  
  return context;
   1379c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   137a0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   137a4:	d0a00a17 	ldw	r2,-32728(gp)
   137a8:	10c000c4 	addi	r3,r2,3
   137ac:	00bfff04 	movi	r2,-4
   137b0:	1884703a 	and	r2,r3,r2
   137b4:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   137b8:	d0e00a17 	ldw	r3,-32728(gp)
   137bc:	e0bfff17 	ldw	r2,-4(fp)
   137c0:	1887883a 	add	r3,r3,r2
   137c4:	008000b4 	movhi	r2,2
   137c8:	10800004 	addi	r2,r2,0
   137cc:	10c0062e 	bgeu	r2,r3,137e8 <sbrk+0x74>
   137d0:	e0bffb17 	ldw	r2,-20(fp)
   137d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   137d8:	e0bffa17 	ldw	r2,-24(fp)
   137dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   137e0:	00bfffc4 	movi	r2,-1
   137e4:	00000b06 	br	13814 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   137e8:	d0a00a17 	ldw	r2,-32728(gp)
   137ec:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   137f0:	d0e00a17 	ldw	r3,-32728(gp)
   137f4:	e0bfff17 	ldw	r2,-4(fp)
   137f8:	1885883a 	add	r2,r3,r2
   137fc:	d0a00a15 	stw	r2,-32728(gp)
   13800:	e0bffb17 	ldw	r2,-20(fp)
   13804:	e0bffc15 	stw	r2,-16(fp)
   13808:	e0bffc17 	ldw	r2,-16(fp)
   1380c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   13810:	e0bffd17 	ldw	r2,-12(fp)
} 
   13814:	e037883a 	mov	sp,fp
   13818:	df000017 	ldw	fp,0(sp)
   1381c:	dec00104 	addi	sp,sp,4
   13820:	f800283a 	ret

00013824 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13824:	defffe04 	addi	sp,sp,-8
   13828:	dfc00115 	stw	ra,4(sp)
   1382c:	df000015 	stw	fp,0(sp)
   13830:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13834:	d0a00917 	ldw	r2,-32732(gp)
   13838:	10000326 	beq	r2,zero,13848 <alt_get_errno+0x24>
   1383c:	d0a00917 	ldw	r2,-32732(gp)
   13840:	103ee83a 	callr	r2
   13844:	00000106 	br	1384c <alt_get_errno+0x28>
   13848:	d0a29f04 	addi	r2,gp,-30084
}
   1384c:	e037883a 	mov	sp,fp
   13850:	dfc00117 	ldw	ra,4(sp)
   13854:	df000017 	ldw	fp,0(sp)
   13858:	dec00204 	addi	sp,sp,8
   1385c:	f800283a 	ret

00013860 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13860:	defff904 	addi	sp,sp,-28
   13864:	dfc00615 	stw	ra,24(sp)
   13868:	df000515 	stw	fp,20(sp)
   1386c:	df000504 	addi	fp,sp,20
   13870:	e13ffd15 	stw	r4,-12(fp)
   13874:	e17ffe15 	stw	r5,-8(fp)
   13878:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1387c:	e0bffd17 	ldw	r2,-12(fp)
   13880:	10000616 	blt	r2,zero,1389c <write+0x3c>
   13884:	e0bffd17 	ldw	r2,-12(fp)
   13888:	10c00324 	muli	r3,r2,12
   1388c:	00800074 	movhi	r2,1
   13890:	10959704 	addi	r2,r2,22108
   13894:	1885883a 	add	r2,r3,r2
   13898:	00000106 	br	138a0 <write+0x40>
   1389c:	0005883a 	mov	r2,zero
   138a0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   138a4:	e0bffb17 	ldw	r2,-20(fp)
   138a8:	10002126 	beq	r2,zero,13930 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   138ac:	e0bffb17 	ldw	r2,-20(fp)
   138b0:	10800217 	ldw	r2,8(r2)
   138b4:	108000cc 	andi	r2,r2,3
   138b8:	10001826 	beq	r2,zero,1391c <write+0xbc>
   138bc:	e0bffb17 	ldw	r2,-20(fp)
   138c0:	10800017 	ldw	r2,0(r2)
   138c4:	10800617 	ldw	r2,24(r2)
   138c8:	10001426 	beq	r2,zero,1391c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   138cc:	e0bffb17 	ldw	r2,-20(fp)
   138d0:	10800017 	ldw	r2,0(r2)
   138d4:	10800617 	ldw	r2,24(r2)
   138d8:	e0ffff17 	ldw	r3,-4(fp)
   138dc:	180d883a 	mov	r6,r3
   138e0:	e17ffe17 	ldw	r5,-8(fp)
   138e4:	e13ffb17 	ldw	r4,-20(fp)
   138e8:	103ee83a 	callr	r2
   138ec:	e0bffc15 	stw	r2,-16(fp)
   138f0:	e0bffc17 	ldw	r2,-16(fp)
   138f4:	1000070e 	bge	r2,zero,13914 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   138f8:	00138240 	call	13824 <alt_get_errno>
   138fc:	1007883a 	mov	r3,r2
   13900:	e0bffc17 	ldw	r2,-16(fp)
   13904:	0085c83a 	sub	r2,zero,r2
   13908:	18800015 	stw	r2,0(r3)
        return -1;
   1390c:	00bfffc4 	movi	r2,-1
   13910:	00000c06 	br	13944 <write+0xe4>
      }
      return rval;
   13914:	e0bffc17 	ldw	r2,-16(fp)
   13918:	00000a06 	br	13944 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1391c:	00138240 	call	13824 <alt_get_errno>
   13920:	1007883a 	mov	r3,r2
   13924:	00800344 	movi	r2,13
   13928:	18800015 	stw	r2,0(r3)
   1392c:	00000406 	br	13940 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   13930:	00138240 	call	13824 <alt_get_errno>
   13934:	1007883a 	mov	r3,r2
   13938:	00801444 	movi	r2,81
   1393c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13940:	00bfffc4 	movi	r2,-1
}
   13944:	e037883a 	mov	sp,fp
   13948:	dfc00117 	ldw	ra,4(sp)
   1394c:	df000017 	ldw	fp,0(sp)
   13950:	dec00204 	addi	sp,sp,8
   13954:	f800283a 	ret

00013958 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   13958:	defffd04 	addi	sp,sp,-12
   1395c:	dfc00215 	stw	ra,8(sp)
   13960:	df000115 	stw	fp,4(sp)
   13964:	df000104 	addi	fp,sp,4
   13968:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1396c:	d1600604 	addi	r5,gp,-32744
   13970:	e13fff17 	ldw	r4,-4(fp)
   13974:	0013dc80 	call	13dc8 <alt_dev_llist_insert>
}
   13978:	e037883a 	mov	sp,fp
   1397c:	dfc00117 	ldw	ra,4(sp)
   13980:	df000017 	ldw	fp,0(sp)
   13984:	dec00204 	addi	sp,sp,8
   13988:	f800283a 	ret

0001398c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1398c:	defffd04 	addi	sp,sp,-12
   13990:	dfc00215 	stw	ra,8(sp)
   13994:	df000115 	stw	fp,4(sp)
   13998:	df000104 	addi	fp,sp,4
   1399c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   139a0:	00147380 	call	14738 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   139a4:	00800044 	movi	r2,1
   139a8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   139ac:	0001883a 	nop
   139b0:	e037883a 	mov	sp,fp
   139b4:	dfc00117 	ldw	ra,4(sp)
   139b8:	df000017 	ldw	fp,0(sp)
   139bc:	dec00204 	addi	sp,sp,8
   139c0:	f800283a 	ret

000139c4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   139c4:	defffe04 	addi	sp,sp,-8
   139c8:	dfc00115 	stw	ra,4(sp)
   139cc:	df000015 	stw	fp,0(sp)
   139d0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   139d4:	01c0fa04 	movi	r7,1000
   139d8:	01800084 	movi	r6,2
   139dc:	000b883a 	mov	r5,zero
   139e0:	010000b4 	movhi	r4,2
   139e4:	21041004 	addi	r4,r4,4160
   139e8:	0013cc80 	call	13cc8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   139ec:	01000074 	movhi	r4,1
   139f0:	2115f704 	addi	r4,r4,22492
   139f4:	00139580 	call	13958 <alt_dev_reg>
}
   139f8:	0001883a 	nop
   139fc:	e037883a 	mov	sp,fp
   13a00:	dfc00117 	ldw	ra,4(sp)
   13a04:	df000017 	ldw	fp,0(sp)
   13a08:	dec00204 	addi	sp,sp,8
   13a0c:	f800283a 	ret

00013a10 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   13a10:	defffa04 	addi	sp,sp,-24
   13a14:	dfc00515 	stw	ra,20(sp)
   13a18:	df000415 	stw	fp,16(sp)
   13a1c:	df000404 	addi	fp,sp,16
   13a20:	e13ffd15 	stw	r4,-12(fp)
   13a24:	e17ffe15 	stw	r5,-8(fp)
   13a28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13a2c:	e0bffd17 	ldw	r2,-12(fp)
   13a30:	10800017 	ldw	r2,0(r2)
   13a34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   13a38:	e0bffc17 	ldw	r2,-16(fp)
   13a3c:	10c00a04 	addi	r3,r2,40
   13a40:	e0bffd17 	ldw	r2,-12(fp)
   13a44:	10800217 	ldw	r2,8(r2)
   13a48:	100f883a 	mov	r7,r2
   13a4c:	e1bfff17 	ldw	r6,-4(fp)
   13a50:	e17ffe17 	ldw	r5,-8(fp)
   13a54:	1809883a 	mov	r4,r3
   13a58:	0013ad00 	call	13ad0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13a5c:	e037883a 	mov	sp,fp
   13a60:	dfc00117 	ldw	ra,4(sp)
   13a64:	df000017 	ldw	fp,0(sp)
   13a68:	dec00204 	addi	sp,sp,8
   13a6c:	f800283a 	ret

00013a70 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13a70:	defffa04 	addi	sp,sp,-24
   13a74:	dfc00515 	stw	ra,20(sp)
   13a78:	df000415 	stw	fp,16(sp)
   13a7c:	df000404 	addi	fp,sp,16
   13a80:	e13ffd15 	stw	r4,-12(fp)
   13a84:	e17ffe15 	stw	r5,-8(fp)
   13a88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13a8c:	e0bffd17 	ldw	r2,-12(fp)
   13a90:	10800017 	ldw	r2,0(r2)
   13a94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13a98:	e0bffc17 	ldw	r2,-16(fp)
   13a9c:	10c00a04 	addi	r3,r2,40
   13aa0:	e0bffd17 	ldw	r2,-12(fp)
   13aa4:	10800217 	ldw	r2,8(r2)
   13aa8:	100f883a 	mov	r7,r2
   13aac:	e1bfff17 	ldw	r6,-4(fp)
   13ab0:	e17ffe17 	ldw	r5,-8(fp)
   13ab4:	1809883a 	mov	r4,r3
   13ab8:	0013bbc0 	call	13bbc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13abc:	e037883a 	mov	sp,fp
   13ac0:	dfc00117 	ldw	ra,4(sp)
   13ac4:	df000017 	ldw	fp,0(sp)
   13ac8:	dec00204 	addi	sp,sp,8
   13acc:	f800283a 	ret

00013ad0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   13ad0:	defff704 	addi	sp,sp,-36
   13ad4:	df000815 	stw	fp,32(sp)
   13ad8:	df000804 	addi	fp,sp,32
   13adc:	e13ffc15 	stw	r4,-16(fp)
   13ae0:	e17ffd15 	stw	r5,-12(fp)
   13ae4:	e1bffe15 	stw	r6,-8(fp)
   13ae8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   13aec:	e0bffc17 	ldw	r2,-16(fp)
   13af0:	10800017 	ldw	r2,0(r2)
   13af4:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   13af8:	e0bffd17 	ldw	r2,-12(fp)
   13afc:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   13b00:	e0bffe17 	ldw	r2,-8(fp)
   13b04:	e0fffd17 	ldw	r3,-12(fp)
   13b08:	1885883a 	add	r2,r3,r2
   13b0c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   13b10:	00001206 	br	13b5c <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   13b14:	e0bff917 	ldw	r2,-28(fp)
   13b18:	10800037 	ldwio	r2,0(r2)
   13b1c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   13b20:	e0bffb17 	ldw	r2,-20(fp)
   13b24:	10a0000c 	andi	r2,r2,32768
   13b28:	10000626 	beq	r2,zero,13b44 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   13b2c:	e0bff817 	ldw	r2,-32(fp)
   13b30:	10c00044 	addi	r3,r2,1
   13b34:	e0fff815 	stw	r3,-32(fp)
   13b38:	e0fffb17 	ldw	r3,-20(fp)
   13b3c:	10c00005 	stb	r3,0(r2)
   13b40:	00000606 	br	13b5c <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   13b44:	e0fff817 	ldw	r3,-32(fp)
   13b48:	e0bffd17 	ldw	r2,-12(fp)
   13b4c:	1880071e 	bne	r3,r2,13b6c <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   13b50:	e0bfff17 	ldw	r2,-4(fp)
   13b54:	1090000c 	andi	r2,r2,16384
   13b58:	1000061e 	bne	r2,zero,13b74 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   13b5c:	e0fff817 	ldw	r3,-32(fp)
   13b60:	e0bffa17 	ldw	r2,-24(fp)
   13b64:	18bfeb36 	bltu	r3,r2,13b14 <__alt_data_end+0xffff3b14>
   13b68:	00000306 	br	13b78 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   13b6c:	0001883a 	nop
   13b70:	00000106 	br	13b78 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   13b74:	0001883a 	nop
    
  }

  if (ptr != buffer)
   13b78:	e0fff817 	ldw	r3,-32(fp)
   13b7c:	e0bffd17 	ldw	r2,-12(fp)
   13b80:	18800426 	beq	r3,r2,13b94 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   13b84:	e0fff817 	ldw	r3,-32(fp)
   13b88:	e0bffd17 	ldw	r2,-12(fp)
   13b8c:	1885c83a 	sub	r2,r3,r2
   13b90:	00000606 	br	13bac <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   13b94:	e0bfff17 	ldw	r2,-4(fp)
   13b98:	1090000c 	andi	r2,r2,16384
   13b9c:	10000226 	beq	r2,zero,13ba8 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   13ba0:	00bffd44 	movi	r2,-11
   13ba4:	00000106 	br	13bac <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   13ba8:	00bffec4 	movi	r2,-5
}
   13bac:	e037883a 	mov	sp,fp
   13bb0:	df000017 	ldw	fp,0(sp)
   13bb4:	dec00104 	addi	sp,sp,4
   13bb8:	f800283a 	ret

00013bbc <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   13bbc:	defff904 	addi	sp,sp,-28
   13bc0:	df000615 	stw	fp,24(sp)
   13bc4:	df000604 	addi	fp,sp,24
   13bc8:	e13ffc15 	stw	r4,-16(fp)
   13bcc:	e17ffd15 	stw	r5,-12(fp)
   13bd0:	e1bffe15 	stw	r6,-8(fp)
   13bd4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   13bd8:	e0bffc17 	ldw	r2,-16(fp)
   13bdc:	10800017 	ldw	r2,0(r2)
   13be0:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   13be4:	e0bffe17 	ldw	r2,-8(fp)
   13be8:	e0fffd17 	ldw	r3,-12(fp)
   13bec:	1885883a 	add	r2,r3,r2
   13bf0:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   13bf4:	00000e06 	br	13c30 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   13bf8:	e0bffa17 	ldw	r2,-24(fp)
   13bfc:	10800104 	addi	r2,r2,4
   13c00:	10800037 	ldwio	r2,0(r2)
   13c04:	10bfffec 	andhi	r2,r2,65535
   13c08:	10000926 	beq	r2,zero,13c30 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   13c0c:	e0fffa17 	ldw	r3,-24(fp)
   13c10:	e0bffd17 	ldw	r2,-12(fp)
   13c14:	11000044 	addi	r4,r2,1
   13c18:	e13ffd15 	stw	r4,-12(fp)
   13c1c:	10800003 	ldbu	r2,0(r2)
   13c20:	10803fcc 	andi	r2,r2,255
   13c24:	1080201c 	xori	r2,r2,128
   13c28:	10bfe004 	addi	r2,r2,-128
   13c2c:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   13c30:	e0fffd17 	ldw	r3,-12(fp)
   13c34:	e0bffb17 	ldw	r2,-20(fp)
   13c38:	18bfef36 	bltu	r3,r2,13bf8 <__alt_data_end+0xffff3bf8>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   13c3c:	e0bffe17 	ldw	r2,-8(fp)
}
   13c40:	e037883a 	mov	sp,fp
   13c44:	df000017 	ldw	fp,0(sp)
   13c48:	dec00104 	addi	sp,sp,4
   13c4c:	f800283a 	ret

00013c50 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   13c50:	defffa04 	addi	sp,sp,-24
   13c54:	dfc00515 	stw	ra,20(sp)
   13c58:	df000415 	stw	fp,16(sp)
   13c5c:	df000404 	addi	fp,sp,16
   13c60:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   13c64:	0007883a 	mov	r3,zero
   13c68:	e0bfff17 	ldw	r2,-4(fp)
   13c6c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   13c70:	e0bfff17 	ldw	r2,-4(fp)
   13c74:	10800104 	addi	r2,r2,4
   13c78:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c7c:	0005303a 	rdctl	r2,status
   13c80:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c84:	e0fffd17 	ldw	r3,-12(fp)
   13c88:	00bfff84 	movi	r2,-2
   13c8c:	1884703a 	and	r2,r3,r2
   13c90:	1001703a 	wrctl	status,r2
  
  return context;
   13c94:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   13c98:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   13c9c:	00146300 	call	14630 <alt_tick>
   13ca0:	e0bffc17 	ldw	r2,-16(fp)
   13ca4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ca8:	e0bffe17 	ldw	r2,-8(fp)
   13cac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   13cb0:	0001883a 	nop
   13cb4:	e037883a 	mov	sp,fp
   13cb8:	dfc00117 	ldw	ra,4(sp)
   13cbc:	df000017 	ldw	fp,0(sp)
   13cc0:	dec00204 	addi	sp,sp,8
   13cc4:	f800283a 	ret

00013cc8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   13cc8:	defff804 	addi	sp,sp,-32
   13ccc:	dfc00715 	stw	ra,28(sp)
   13cd0:	df000615 	stw	fp,24(sp)
   13cd4:	df000604 	addi	fp,sp,24
   13cd8:	e13ffc15 	stw	r4,-16(fp)
   13cdc:	e17ffd15 	stw	r5,-12(fp)
   13ce0:	e1bffe15 	stw	r6,-8(fp)
   13ce4:	e1ffff15 	stw	r7,-4(fp)
   13ce8:	e0bfff17 	ldw	r2,-4(fp)
   13cec:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   13cf0:	d0a2a417 	ldw	r2,-30064(gp)
   13cf4:	1000021e 	bne	r2,zero,13d00 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   13cf8:	e0bffb17 	ldw	r2,-20(fp)
   13cfc:	d0a2a415 	stw	r2,-30064(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   13d00:	e0bffc17 	ldw	r2,-16(fp)
   13d04:	10800104 	addi	r2,r2,4
   13d08:	00c001c4 	movi	r3,7
   13d0c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   13d10:	d8000015 	stw	zero,0(sp)
   13d14:	e1fffc17 	ldw	r7,-16(fp)
   13d18:	01800074 	movhi	r6,1
   13d1c:	318f1404 	addi	r6,r6,15440
   13d20:	e17ffe17 	ldw	r5,-8(fp)
   13d24:	e13ffd17 	ldw	r4,-12(fp)
   13d28:	0013f600 	call	13f60 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   13d2c:	0001883a 	nop
   13d30:	e037883a 	mov	sp,fp
   13d34:	dfc00117 	ldw	ra,4(sp)
   13d38:	df000017 	ldw	fp,0(sp)
   13d3c:	dec00204 	addi	sp,sp,8
   13d40:	f800283a 	ret

00013d44 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   13d44:	defffe04 	addi	sp,sp,-8
   13d48:	df000115 	stw	fp,4(sp)
   13d4c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   13d50:	e03fff15 	stw	zero,-4(fp)
   13d54:	00000506 	br	13d6c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   13d58:	e0bfff17 	ldw	r2,-4(fp)
   13d5c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   13d60:	e0bfff17 	ldw	r2,-4(fp)
   13d64:	10800804 	addi	r2,r2,32
   13d68:	e0bfff15 	stw	r2,-4(fp)
   13d6c:	e0bfff17 	ldw	r2,-4(fp)
   13d70:	10820030 	cmpltui	r2,r2,2048
   13d74:	103ff81e 	bne	r2,zero,13d58 <__alt_data_end+0xffff3d58>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   13d78:	0001883a 	nop
   13d7c:	e037883a 	mov	sp,fp
   13d80:	df000017 	ldw	fp,0(sp)
   13d84:	dec00104 	addi	sp,sp,4
   13d88:	f800283a 	ret

00013d8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13d8c:	defffe04 	addi	sp,sp,-8
   13d90:	dfc00115 	stw	ra,4(sp)
   13d94:	df000015 	stw	fp,0(sp)
   13d98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13d9c:	d0a00917 	ldw	r2,-32732(gp)
   13da0:	10000326 	beq	r2,zero,13db0 <alt_get_errno+0x24>
   13da4:	d0a00917 	ldw	r2,-32732(gp)
   13da8:	103ee83a 	callr	r2
   13dac:	00000106 	br	13db4 <alt_get_errno+0x28>
   13db0:	d0a29f04 	addi	r2,gp,-30084
}
   13db4:	e037883a 	mov	sp,fp
   13db8:	dfc00117 	ldw	ra,4(sp)
   13dbc:	df000017 	ldw	fp,0(sp)
   13dc0:	dec00204 	addi	sp,sp,8
   13dc4:	f800283a 	ret

00013dc8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   13dc8:	defffa04 	addi	sp,sp,-24
   13dcc:	dfc00515 	stw	ra,20(sp)
   13dd0:	df000415 	stw	fp,16(sp)
   13dd4:	df000404 	addi	fp,sp,16
   13dd8:	e13ffe15 	stw	r4,-8(fp)
   13ddc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   13de0:	e0bffe17 	ldw	r2,-8(fp)
   13de4:	10000326 	beq	r2,zero,13df4 <alt_dev_llist_insert+0x2c>
   13de8:	e0bffe17 	ldw	r2,-8(fp)
   13dec:	10800217 	ldw	r2,8(r2)
   13df0:	1000061e 	bne	r2,zero,13e0c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   13df4:	0013d8c0 	call	13d8c <alt_get_errno>
   13df8:	1007883a 	mov	r3,r2
   13dfc:	00800584 	movi	r2,22
   13e00:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   13e04:	00bffa84 	movi	r2,-22
   13e08:	00001306 	br	13e58 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   13e0c:	e0bffe17 	ldw	r2,-8(fp)
   13e10:	e0ffff17 	ldw	r3,-4(fp)
   13e14:	e0fffc15 	stw	r3,-16(fp)
   13e18:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   13e1c:	e0bffd17 	ldw	r2,-12(fp)
   13e20:	e0fffc17 	ldw	r3,-16(fp)
   13e24:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   13e28:	e0bffc17 	ldw	r2,-16(fp)
   13e2c:	10c00017 	ldw	r3,0(r2)
   13e30:	e0bffd17 	ldw	r2,-12(fp)
   13e34:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   13e38:	e0bffc17 	ldw	r2,-16(fp)
   13e3c:	10800017 	ldw	r2,0(r2)
   13e40:	e0fffd17 	ldw	r3,-12(fp)
   13e44:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   13e48:	e0bffc17 	ldw	r2,-16(fp)
   13e4c:	e0fffd17 	ldw	r3,-12(fp)
   13e50:	10c00015 	stw	r3,0(r2)

  return 0;  
   13e54:	0005883a 	mov	r2,zero
}
   13e58:	e037883a 	mov	sp,fp
   13e5c:	dfc00117 	ldw	ra,4(sp)
   13e60:	df000017 	ldw	fp,0(sp)
   13e64:	dec00204 	addi	sp,sp,8
   13e68:	f800283a 	ret

00013e6c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   13e6c:	defffd04 	addi	sp,sp,-12
   13e70:	dfc00215 	stw	ra,8(sp)
   13e74:	df000115 	stw	fp,4(sp)
   13e78:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   13e7c:	00800074 	movhi	r2,1
   13e80:	10936e04 	addi	r2,r2,19896
   13e84:	e0bfff15 	stw	r2,-4(fp)
   13e88:	00000606 	br	13ea4 <_do_ctors+0x38>
        (*ctor) (); 
   13e8c:	e0bfff17 	ldw	r2,-4(fp)
   13e90:	10800017 	ldw	r2,0(r2)
   13e94:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   13e98:	e0bfff17 	ldw	r2,-4(fp)
   13e9c:	10bfff04 	addi	r2,r2,-4
   13ea0:	e0bfff15 	stw	r2,-4(fp)
   13ea4:	e0ffff17 	ldw	r3,-4(fp)
   13ea8:	00800074 	movhi	r2,1
   13eac:	10936f04 	addi	r2,r2,19900
   13eb0:	18bff62e 	bgeu	r3,r2,13e8c <__alt_data_end+0xffff3e8c>
        (*ctor) (); 
}
   13eb4:	0001883a 	nop
   13eb8:	e037883a 	mov	sp,fp
   13ebc:	dfc00117 	ldw	ra,4(sp)
   13ec0:	df000017 	ldw	fp,0(sp)
   13ec4:	dec00204 	addi	sp,sp,8
   13ec8:	f800283a 	ret

00013ecc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   13ecc:	defffd04 	addi	sp,sp,-12
   13ed0:	dfc00215 	stw	ra,8(sp)
   13ed4:	df000115 	stw	fp,4(sp)
   13ed8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   13edc:	00800074 	movhi	r2,1
   13ee0:	10936e04 	addi	r2,r2,19896
   13ee4:	e0bfff15 	stw	r2,-4(fp)
   13ee8:	00000606 	br	13f04 <_do_dtors+0x38>
        (*dtor) (); 
   13eec:	e0bfff17 	ldw	r2,-4(fp)
   13ef0:	10800017 	ldw	r2,0(r2)
   13ef4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   13ef8:	e0bfff17 	ldw	r2,-4(fp)
   13efc:	10bfff04 	addi	r2,r2,-4
   13f00:	e0bfff15 	stw	r2,-4(fp)
   13f04:	e0ffff17 	ldw	r3,-4(fp)
   13f08:	00800074 	movhi	r2,1
   13f0c:	10936f04 	addi	r2,r2,19900
   13f10:	18bff62e 	bgeu	r3,r2,13eec <__alt_data_end+0xffff3eec>
        (*dtor) (); 
}
   13f14:	0001883a 	nop
   13f18:	e037883a 	mov	sp,fp
   13f1c:	dfc00117 	ldw	ra,4(sp)
   13f20:	df000017 	ldw	fp,0(sp)
   13f24:	dec00204 	addi	sp,sp,8
   13f28:	f800283a 	ret

00013f2c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   13f2c:	defffe04 	addi	sp,sp,-8
   13f30:	dfc00115 	stw	ra,4(sp)
   13f34:	df000015 	stw	fp,0(sp)
   13f38:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   13f3c:	01440004 	movi	r5,4096
   13f40:	0009883a 	mov	r4,zero
   13f44:	00149980 	call	14998 <alt_icache_flush>
#endif
}
   13f48:	0001883a 	nop
   13f4c:	e037883a 	mov	sp,fp
   13f50:	dfc00117 	ldw	ra,4(sp)
   13f54:	df000017 	ldw	fp,0(sp)
   13f58:	dec00204 	addi	sp,sp,8
   13f5c:	f800283a 	ret

00013f60 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13f60:	defff904 	addi	sp,sp,-28
   13f64:	dfc00615 	stw	ra,24(sp)
   13f68:	df000515 	stw	fp,20(sp)
   13f6c:	df000504 	addi	fp,sp,20
   13f70:	e13ffc15 	stw	r4,-16(fp)
   13f74:	e17ffd15 	stw	r5,-12(fp)
   13f78:	e1bffe15 	stw	r6,-8(fp)
   13f7c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   13f80:	e0800217 	ldw	r2,8(fp)
   13f84:	d8800015 	stw	r2,0(sp)
   13f88:	e1ffff17 	ldw	r7,-4(fp)
   13f8c:	e1bffe17 	ldw	r6,-8(fp)
   13f90:	e17ffd17 	ldw	r5,-12(fp)
   13f94:	e13ffc17 	ldw	r4,-16(fp)
   13f98:	00141100 	call	14110 <alt_iic_isr_register>
}  
   13f9c:	e037883a 	mov	sp,fp
   13fa0:	dfc00117 	ldw	ra,4(sp)
   13fa4:	df000017 	ldw	fp,0(sp)
   13fa8:	dec00204 	addi	sp,sp,8
   13fac:	f800283a 	ret

00013fb0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   13fb0:	defff904 	addi	sp,sp,-28
   13fb4:	df000615 	stw	fp,24(sp)
   13fb8:	df000604 	addi	fp,sp,24
   13fbc:	e13ffe15 	stw	r4,-8(fp)
   13fc0:	e17fff15 	stw	r5,-4(fp)
   13fc4:	e0bfff17 	ldw	r2,-4(fp)
   13fc8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13fcc:	0005303a 	rdctl	r2,status
   13fd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13fd4:	e0fffb17 	ldw	r3,-20(fp)
   13fd8:	00bfff84 	movi	r2,-2
   13fdc:	1884703a 	and	r2,r3,r2
   13fe0:	1001703a 	wrctl	status,r2
  
  return context;
   13fe4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13fe8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   13fec:	00c00044 	movi	r3,1
   13ff0:	e0bffa17 	ldw	r2,-24(fp)
   13ff4:	1884983a 	sll	r2,r3,r2
   13ff8:	1007883a 	mov	r3,r2
   13ffc:	d0a2a317 	ldw	r2,-30068(gp)
   14000:	1884b03a 	or	r2,r3,r2
   14004:	d0a2a315 	stw	r2,-30068(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14008:	d0a2a317 	ldw	r2,-30068(gp)
   1400c:	100170fa 	wrctl	ienable,r2
   14010:	e0bffc17 	ldw	r2,-16(fp)
   14014:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14018:	e0bffd17 	ldw	r2,-12(fp)
   1401c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14020:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   14024:	0001883a 	nop
}
   14028:	e037883a 	mov	sp,fp
   1402c:	df000017 	ldw	fp,0(sp)
   14030:	dec00104 	addi	sp,sp,4
   14034:	f800283a 	ret

00014038 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   14038:	defff904 	addi	sp,sp,-28
   1403c:	df000615 	stw	fp,24(sp)
   14040:	df000604 	addi	fp,sp,24
   14044:	e13ffe15 	stw	r4,-8(fp)
   14048:	e17fff15 	stw	r5,-4(fp)
   1404c:	e0bfff17 	ldw	r2,-4(fp)
   14050:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14054:	0005303a 	rdctl	r2,status
   14058:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1405c:	e0fffb17 	ldw	r3,-20(fp)
   14060:	00bfff84 	movi	r2,-2
   14064:	1884703a 	and	r2,r3,r2
   14068:	1001703a 	wrctl	status,r2
  
  return context;
   1406c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14070:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   14074:	00c00044 	movi	r3,1
   14078:	e0bffa17 	ldw	r2,-24(fp)
   1407c:	1884983a 	sll	r2,r3,r2
   14080:	0084303a 	nor	r2,zero,r2
   14084:	1007883a 	mov	r3,r2
   14088:	d0a2a317 	ldw	r2,-30068(gp)
   1408c:	1884703a 	and	r2,r3,r2
   14090:	d0a2a315 	stw	r2,-30068(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14094:	d0a2a317 	ldw	r2,-30068(gp)
   14098:	100170fa 	wrctl	ienable,r2
   1409c:	e0bffc17 	ldw	r2,-16(fp)
   140a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   140a4:	e0bffd17 	ldw	r2,-12(fp)
   140a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   140ac:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   140b0:	0001883a 	nop
}
   140b4:	e037883a 	mov	sp,fp
   140b8:	df000017 	ldw	fp,0(sp)
   140bc:	dec00104 	addi	sp,sp,4
   140c0:	f800283a 	ret

000140c4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   140c4:	defffc04 	addi	sp,sp,-16
   140c8:	df000315 	stw	fp,12(sp)
   140cc:	df000304 	addi	fp,sp,12
   140d0:	e13ffe15 	stw	r4,-8(fp)
   140d4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   140d8:	000530fa 	rdctl	r2,ienable
   140dc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   140e0:	00c00044 	movi	r3,1
   140e4:	e0bfff17 	ldw	r2,-4(fp)
   140e8:	1884983a 	sll	r2,r3,r2
   140ec:	1007883a 	mov	r3,r2
   140f0:	e0bffd17 	ldw	r2,-12(fp)
   140f4:	1884703a 	and	r2,r3,r2
   140f8:	1004c03a 	cmpne	r2,r2,zero
   140fc:	10803fcc 	andi	r2,r2,255
}
   14100:	e037883a 	mov	sp,fp
   14104:	df000017 	ldw	fp,0(sp)
   14108:	dec00104 	addi	sp,sp,4
   1410c:	f800283a 	ret

00014110 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14110:	defff504 	addi	sp,sp,-44
   14114:	dfc00a15 	stw	ra,40(sp)
   14118:	df000915 	stw	fp,36(sp)
   1411c:	df000904 	addi	fp,sp,36
   14120:	e13ffc15 	stw	r4,-16(fp)
   14124:	e17ffd15 	stw	r5,-12(fp)
   14128:	e1bffe15 	stw	r6,-8(fp)
   1412c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   14130:	00bffa84 	movi	r2,-22
   14134:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   14138:	e0bffd17 	ldw	r2,-12(fp)
   1413c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   14140:	e0bff817 	ldw	r2,-32(fp)
   14144:	10800808 	cmpgei	r2,r2,32
   14148:	1000271e 	bne	r2,zero,141e8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1414c:	0005303a 	rdctl	r2,status
   14150:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14154:	e0fffb17 	ldw	r3,-20(fp)
   14158:	00bfff84 	movi	r2,-2
   1415c:	1884703a 	and	r2,r3,r2
   14160:	1001703a 	wrctl	status,r2
  
  return context;
   14164:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   14168:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   1416c:	00800074 	movhi	r2,1
   14170:	1098b204 	addi	r2,r2,25288
   14174:	e0fff817 	ldw	r3,-32(fp)
   14178:	180690fa 	slli	r3,r3,3
   1417c:	10c5883a 	add	r2,r2,r3
   14180:	e0fffe17 	ldw	r3,-8(fp)
   14184:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   14188:	00800074 	movhi	r2,1
   1418c:	1098b204 	addi	r2,r2,25288
   14190:	e0fff817 	ldw	r3,-32(fp)
   14194:	180690fa 	slli	r3,r3,3
   14198:	10c5883a 	add	r2,r2,r3
   1419c:	10800104 	addi	r2,r2,4
   141a0:	e0ffff17 	ldw	r3,-4(fp)
   141a4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   141a8:	e0bffe17 	ldw	r2,-8(fp)
   141ac:	10000526 	beq	r2,zero,141c4 <alt_iic_isr_register+0xb4>
   141b0:	e0bff817 	ldw	r2,-32(fp)
   141b4:	100b883a 	mov	r5,r2
   141b8:	e13ffc17 	ldw	r4,-16(fp)
   141bc:	0013fb00 	call	13fb0 <alt_ic_irq_enable>
   141c0:	00000406 	br	141d4 <alt_iic_isr_register+0xc4>
   141c4:	e0bff817 	ldw	r2,-32(fp)
   141c8:	100b883a 	mov	r5,r2
   141cc:	e13ffc17 	ldw	r4,-16(fp)
   141d0:	00140380 	call	14038 <alt_ic_irq_disable>
   141d4:	e0bff715 	stw	r2,-36(fp)
   141d8:	e0bffa17 	ldw	r2,-24(fp)
   141dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   141e0:	e0bff917 	ldw	r2,-28(fp)
   141e4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   141e8:	e0bff717 	ldw	r2,-36(fp)
}
   141ec:	e037883a 	mov	sp,fp
   141f0:	dfc00117 	ldw	ra,4(sp)
   141f4:	df000017 	ldw	fp,0(sp)
   141f8:	dec00204 	addi	sp,sp,8
   141fc:	f800283a 	ret

00014200 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   14200:	defff904 	addi	sp,sp,-28
   14204:	dfc00615 	stw	ra,24(sp)
   14208:	df000515 	stw	fp,20(sp)
   1420c:	df000504 	addi	fp,sp,20
   14210:	e13ffc15 	stw	r4,-16(fp)
   14214:	e17ffd15 	stw	r5,-12(fp)
   14218:	e1bffe15 	stw	r6,-8(fp)
   1421c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   14220:	e1bfff17 	ldw	r6,-4(fp)
   14224:	e17ffe17 	ldw	r5,-8(fp)
   14228:	e13ffd17 	ldw	r4,-12(fp)
   1422c:	00144400 	call	14440 <open>
   14230:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   14234:	e0bffb17 	ldw	r2,-20(fp)
   14238:	10001c16 	blt	r2,zero,142ac <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1423c:	00800074 	movhi	r2,1
   14240:	10959704 	addi	r2,r2,22108
   14244:	e0fffb17 	ldw	r3,-20(fp)
   14248:	18c00324 	muli	r3,r3,12
   1424c:	10c5883a 	add	r2,r2,r3
   14250:	10c00017 	ldw	r3,0(r2)
   14254:	e0bffc17 	ldw	r2,-16(fp)
   14258:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1425c:	00800074 	movhi	r2,1
   14260:	10959704 	addi	r2,r2,22108
   14264:	e0fffb17 	ldw	r3,-20(fp)
   14268:	18c00324 	muli	r3,r3,12
   1426c:	10c5883a 	add	r2,r2,r3
   14270:	10800104 	addi	r2,r2,4
   14274:	10c00017 	ldw	r3,0(r2)
   14278:	e0bffc17 	ldw	r2,-16(fp)
   1427c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   14280:	00800074 	movhi	r2,1
   14284:	10959704 	addi	r2,r2,22108
   14288:	e0fffb17 	ldw	r3,-20(fp)
   1428c:	18c00324 	muli	r3,r3,12
   14290:	10c5883a 	add	r2,r2,r3
   14294:	10800204 	addi	r2,r2,8
   14298:	10c00017 	ldw	r3,0(r2)
   1429c:	e0bffc17 	ldw	r2,-16(fp)
   142a0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   142a4:	e13ffb17 	ldw	r4,-20(fp)
   142a8:	00137100 	call	13710 <alt_release_fd>
  }
} 
   142ac:	0001883a 	nop
   142b0:	e037883a 	mov	sp,fp
   142b4:	dfc00117 	ldw	ra,4(sp)
   142b8:	df000017 	ldw	fp,0(sp)
   142bc:	dec00204 	addi	sp,sp,8
   142c0:	f800283a 	ret

000142c4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   142c4:	defffb04 	addi	sp,sp,-20
   142c8:	dfc00415 	stw	ra,16(sp)
   142cc:	df000315 	stw	fp,12(sp)
   142d0:	df000304 	addi	fp,sp,12
   142d4:	e13ffd15 	stw	r4,-12(fp)
   142d8:	e17ffe15 	stw	r5,-8(fp)
   142dc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   142e0:	01c07fc4 	movi	r7,511
   142e4:	01800044 	movi	r6,1
   142e8:	e17ffd17 	ldw	r5,-12(fp)
   142ec:	01000074 	movhi	r4,1
   142f0:	21159a04 	addi	r4,r4,22120
   142f4:	00142000 	call	14200 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   142f8:	01c07fc4 	movi	r7,511
   142fc:	000d883a 	mov	r6,zero
   14300:	e17ffe17 	ldw	r5,-8(fp)
   14304:	01000074 	movhi	r4,1
   14308:	21159704 	addi	r4,r4,22108
   1430c:	00142000 	call	14200 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   14310:	01c07fc4 	movi	r7,511
   14314:	01800044 	movi	r6,1
   14318:	e17fff17 	ldw	r5,-4(fp)
   1431c:	01000074 	movhi	r4,1
   14320:	21159d04 	addi	r4,r4,22132
   14324:	00142000 	call	14200 <alt_open_fd>
}  
   14328:	0001883a 	nop
   1432c:	e037883a 	mov	sp,fp
   14330:	dfc00117 	ldw	ra,4(sp)
   14334:	df000017 	ldw	fp,0(sp)
   14338:	dec00204 	addi	sp,sp,8
   1433c:	f800283a 	ret

00014340 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14340:	defffe04 	addi	sp,sp,-8
   14344:	dfc00115 	stw	ra,4(sp)
   14348:	df000015 	stw	fp,0(sp)
   1434c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14350:	d0a00917 	ldw	r2,-32732(gp)
   14354:	10000326 	beq	r2,zero,14364 <alt_get_errno+0x24>
   14358:	d0a00917 	ldw	r2,-32732(gp)
   1435c:	103ee83a 	callr	r2
   14360:	00000106 	br	14368 <alt_get_errno+0x28>
   14364:	d0a29f04 	addi	r2,gp,-30084
}
   14368:	e037883a 	mov	sp,fp
   1436c:	dfc00117 	ldw	ra,4(sp)
   14370:	df000017 	ldw	fp,0(sp)
   14374:	dec00204 	addi	sp,sp,8
   14378:	f800283a 	ret

0001437c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1437c:	defffd04 	addi	sp,sp,-12
   14380:	df000215 	stw	fp,8(sp)
   14384:	df000204 	addi	fp,sp,8
   14388:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1438c:	e0bfff17 	ldw	r2,-4(fp)
   14390:	10800217 	ldw	r2,8(r2)
   14394:	10d00034 	orhi	r3,r2,16384
   14398:	e0bfff17 	ldw	r2,-4(fp)
   1439c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   143a0:	e03ffe15 	stw	zero,-8(fp)
   143a4:	00001d06 	br	1441c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   143a8:	00800074 	movhi	r2,1
   143ac:	10959704 	addi	r2,r2,22108
   143b0:	e0fffe17 	ldw	r3,-8(fp)
   143b4:	18c00324 	muli	r3,r3,12
   143b8:	10c5883a 	add	r2,r2,r3
   143bc:	10c00017 	ldw	r3,0(r2)
   143c0:	e0bfff17 	ldw	r2,-4(fp)
   143c4:	10800017 	ldw	r2,0(r2)
   143c8:	1880111e 	bne	r3,r2,14410 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   143cc:	00800074 	movhi	r2,1
   143d0:	10959704 	addi	r2,r2,22108
   143d4:	e0fffe17 	ldw	r3,-8(fp)
   143d8:	18c00324 	muli	r3,r3,12
   143dc:	10c5883a 	add	r2,r2,r3
   143e0:	10800204 	addi	r2,r2,8
   143e4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   143e8:	1000090e 	bge	r2,zero,14410 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   143ec:	e0bffe17 	ldw	r2,-8(fp)
   143f0:	10c00324 	muli	r3,r2,12
   143f4:	00800074 	movhi	r2,1
   143f8:	10959704 	addi	r2,r2,22108
   143fc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14400:	e0bfff17 	ldw	r2,-4(fp)
   14404:	18800226 	beq	r3,r2,14410 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   14408:	00bffcc4 	movi	r2,-13
   1440c:	00000806 	br	14430 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14410:	e0bffe17 	ldw	r2,-8(fp)
   14414:	10800044 	addi	r2,r2,1
   14418:	e0bffe15 	stw	r2,-8(fp)
   1441c:	d0a00817 	ldw	r2,-32736(gp)
   14420:	1007883a 	mov	r3,r2
   14424:	e0bffe17 	ldw	r2,-8(fp)
   14428:	18bfdf2e 	bgeu	r3,r2,143a8 <__alt_data_end+0xffff43a8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1442c:	0005883a 	mov	r2,zero
}
   14430:	e037883a 	mov	sp,fp
   14434:	df000017 	ldw	fp,0(sp)
   14438:	dec00104 	addi	sp,sp,4
   1443c:	f800283a 	ret

00014440 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   14440:	defff604 	addi	sp,sp,-40
   14444:	dfc00915 	stw	ra,36(sp)
   14448:	df000815 	stw	fp,32(sp)
   1444c:	df000804 	addi	fp,sp,32
   14450:	e13ffd15 	stw	r4,-12(fp)
   14454:	e17ffe15 	stw	r5,-8(fp)
   14458:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1445c:	00bfffc4 	movi	r2,-1
   14460:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   14464:	00bffb44 	movi	r2,-19
   14468:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1446c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   14470:	d1600604 	addi	r5,gp,-32744
   14474:	e13ffd17 	ldw	r4,-12(fp)
   14478:	001475c0 	call	1475c <alt_find_dev>
   1447c:	e0bff815 	stw	r2,-32(fp)
   14480:	e0bff817 	ldw	r2,-32(fp)
   14484:	1000051e 	bne	r2,zero,1449c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   14488:	e13ffd17 	ldw	r4,-12(fp)
   1448c:	00147ec0 	call	147ec <alt_find_file>
   14490:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   14494:	00800044 	movi	r2,1
   14498:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1449c:	e0bff817 	ldw	r2,-32(fp)
   144a0:	10002926 	beq	r2,zero,14548 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   144a4:	e13ff817 	ldw	r4,-32(fp)
   144a8:	00148f40 	call	148f4 <alt_get_fd>
   144ac:	e0bff915 	stw	r2,-28(fp)
   144b0:	e0bff917 	ldw	r2,-28(fp)
   144b4:	1000030e 	bge	r2,zero,144c4 <open+0x84>
    {
      status = index;
   144b8:	e0bff917 	ldw	r2,-28(fp)
   144bc:	e0bffa15 	stw	r2,-24(fp)
   144c0:	00002306 	br	14550 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   144c4:	e0bff917 	ldw	r2,-28(fp)
   144c8:	10c00324 	muli	r3,r2,12
   144cc:	00800074 	movhi	r2,1
   144d0:	10959704 	addi	r2,r2,22108
   144d4:	1885883a 	add	r2,r3,r2
   144d8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   144dc:	e0fffe17 	ldw	r3,-8(fp)
   144e0:	00900034 	movhi	r2,16384
   144e4:	10bfffc4 	addi	r2,r2,-1
   144e8:	1886703a 	and	r3,r3,r2
   144ec:	e0bffc17 	ldw	r2,-16(fp)
   144f0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   144f4:	e0bffb17 	ldw	r2,-20(fp)
   144f8:	1000051e 	bne	r2,zero,14510 <open+0xd0>
   144fc:	e13ffc17 	ldw	r4,-16(fp)
   14500:	001437c0 	call	1437c <alt_file_locked>
   14504:	e0bffa15 	stw	r2,-24(fp)
   14508:	e0bffa17 	ldw	r2,-24(fp)
   1450c:	10001016 	blt	r2,zero,14550 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   14510:	e0bff817 	ldw	r2,-32(fp)
   14514:	10800317 	ldw	r2,12(r2)
   14518:	10000826 	beq	r2,zero,1453c <open+0xfc>
   1451c:	e0bff817 	ldw	r2,-32(fp)
   14520:	10800317 	ldw	r2,12(r2)
   14524:	e1ffff17 	ldw	r7,-4(fp)
   14528:	e1bffe17 	ldw	r6,-8(fp)
   1452c:	e17ffd17 	ldw	r5,-12(fp)
   14530:	e13ffc17 	ldw	r4,-16(fp)
   14534:	103ee83a 	callr	r2
   14538:	00000106 	br	14540 <open+0x100>
   1453c:	0005883a 	mov	r2,zero
   14540:	e0bffa15 	stw	r2,-24(fp)
   14544:	00000206 	br	14550 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   14548:	00bffb44 	movi	r2,-19
   1454c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   14550:	e0bffa17 	ldw	r2,-24(fp)
   14554:	1000090e 	bge	r2,zero,1457c <open+0x13c>
  {
    alt_release_fd (index);  
   14558:	e13ff917 	ldw	r4,-28(fp)
   1455c:	00137100 	call	13710 <alt_release_fd>
    ALT_ERRNO = -status;
   14560:	00143400 	call	14340 <alt_get_errno>
   14564:	1007883a 	mov	r3,r2
   14568:	e0bffa17 	ldw	r2,-24(fp)
   1456c:	0085c83a 	sub	r2,zero,r2
   14570:	18800015 	stw	r2,0(r3)
    return -1;
   14574:	00bfffc4 	movi	r2,-1
   14578:	00000106 	br	14580 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   1457c:	e0bff917 	ldw	r2,-28(fp)
}
   14580:	e037883a 	mov	sp,fp
   14584:	dfc00117 	ldw	ra,4(sp)
   14588:	df000017 	ldw	fp,0(sp)
   1458c:	dec00204 	addi	sp,sp,8
   14590:	f800283a 	ret

00014594 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   14594:	defffa04 	addi	sp,sp,-24
   14598:	df000515 	stw	fp,20(sp)
   1459c:	df000504 	addi	fp,sp,20
   145a0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   145a4:	0005303a 	rdctl	r2,status
   145a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   145ac:	e0fffc17 	ldw	r3,-16(fp)
   145b0:	00bfff84 	movi	r2,-2
   145b4:	1884703a 	and	r2,r3,r2
   145b8:	1001703a 	wrctl	status,r2
  
  return context;
   145bc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   145c0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   145c4:	e0bfff17 	ldw	r2,-4(fp)
   145c8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   145cc:	e0bffd17 	ldw	r2,-12(fp)
   145d0:	10800017 	ldw	r2,0(r2)
   145d4:	e0fffd17 	ldw	r3,-12(fp)
   145d8:	18c00117 	ldw	r3,4(r3)
   145dc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   145e0:	e0bffd17 	ldw	r2,-12(fp)
   145e4:	10800117 	ldw	r2,4(r2)
   145e8:	e0fffd17 	ldw	r3,-12(fp)
   145ec:	18c00017 	ldw	r3,0(r3)
   145f0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   145f4:	e0bffd17 	ldw	r2,-12(fp)
   145f8:	e0fffd17 	ldw	r3,-12(fp)
   145fc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   14600:	e0bffd17 	ldw	r2,-12(fp)
   14604:	e0fffd17 	ldw	r3,-12(fp)
   14608:	10c00015 	stw	r3,0(r2)
   1460c:	e0bffb17 	ldw	r2,-20(fp)
   14610:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14614:	e0bffe17 	ldw	r2,-8(fp)
   14618:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1461c:	0001883a 	nop
   14620:	e037883a 	mov	sp,fp
   14624:	df000017 	ldw	fp,0(sp)
   14628:	dec00104 	addi	sp,sp,4
   1462c:	f800283a 	ret

00014630 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   14630:	defffb04 	addi	sp,sp,-20
   14634:	dfc00415 	stw	ra,16(sp)
   14638:	df000315 	stw	fp,12(sp)
   1463c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   14640:	d0a00c17 	ldw	r2,-32720(gp)
   14644:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   14648:	d0a2a517 	ldw	r2,-30060(gp)
   1464c:	10800044 	addi	r2,r2,1
   14650:	d0a2a515 	stw	r2,-30060(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14654:	00002e06 	br	14710 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   14658:	e0bffd17 	ldw	r2,-12(fp)
   1465c:	10800017 	ldw	r2,0(r2)
   14660:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   14664:	e0bffd17 	ldw	r2,-12(fp)
   14668:	10800403 	ldbu	r2,16(r2)
   1466c:	10803fcc 	andi	r2,r2,255
   14670:	10000426 	beq	r2,zero,14684 <alt_tick+0x54>
   14674:	d0a2a517 	ldw	r2,-30060(gp)
   14678:	1000021e 	bne	r2,zero,14684 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1467c:	e0bffd17 	ldw	r2,-12(fp)
   14680:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   14684:	e0bffd17 	ldw	r2,-12(fp)
   14688:	10800217 	ldw	r2,8(r2)
   1468c:	d0e2a517 	ldw	r3,-30060(gp)
   14690:	18801d36 	bltu	r3,r2,14708 <alt_tick+0xd8>
   14694:	e0bffd17 	ldw	r2,-12(fp)
   14698:	10800403 	ldbu	r2,16(r2)
   1469c:	10803fcc 	andi	r2,r2,255
   146a0:	1000191e 	bne	r2,zero,14708 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   146a4:	e0bffd17 	ldw	r2,-12(fp)
   146a8:	10800317 	ldw	r2,12(r2)
   146ac:	e0fffd17 	ldw	r3,-12(fp)
   146b0:	18c00517 	ldw	r3,20(r3)
   146b4:	1809883a 	mov	r4,r3
   146b8:	103ee83a 	callr	r2
   146bc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   146c0:	e0bfff17 	ldw	r2,-4(fp)
   146c4:	1000031e 	bne	r2,zero,146d4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   146c8:	e13ffd17 	ldw	r4,-12(fp)
   146cc:	00145940 	call	14594 <alt_alarm_stop>
   146d0:	00000d06 	br	14708 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   146d4:	e0bffd17 	ldw	r2,-12(fp)
   146d8:	10c00217 	ldw	r3,8(r2)
   146dc:	e0bfff17 	ldw	r2,-4(fp)
   146e0:	1887883a 	add	r3,r3,r2
   146e4:	e0bffd17 	ldw	r2,-12(fp)
   146e8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   146ec:	e0bffd17 	ldw	r2,-12(fp)
   146f0:	10c00217 	ldw	r3,8(r2)
   146f4:	d0a2a517 	ldw	r2,-30060(gp)
   146f8:	1880032e 	bgeu	r3,r2,14708 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   146fc:	e0bffd17 	ldw	r2,-12(fp)
   14700:	00c00044 	movi	r3,1
   14704:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   14708:	e0bffe17 	ldw	r2,-8(fp)
   1470c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14710:	e0fffd17 	ldw	r3,-12(fp)
   14714:	d0a00c04 	addi	r2,gp,-32720
   14718:	18bfcf1e 	bne	r3,r2,14658 <__alt_data_end+0xffff4658>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1471c:	0001883a 	nop
}
   14720:	0001883a 	nop
   14724:	e037883a 	mov	sp,fp
   14728:	dfc00117 	ldw	ra,4(sp)
   1472c:	df000017 	ldw	fp,0(sp)
   14730:	dec00204 	addi	sp,sp,8
   14734:	f800283a 	ret

00014738 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   14738:	deffff04 	addi	sp,sp,-4
   1473c:	df000015 	stw	fp,0(sp)
   14740:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   14744:	000170fa 	wrctl	ienable,zero
}
   14748:	0001883a 	nop
   1474c:	e037883a 	mov	sp,fp
   14750:	df000017 	ldw	fp,0(sp)
   14754:	dec00104 	addi	sp,sp,4
   14758:	f800283a 	ret

0001475c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1475c:	defffa04 	addi	sp,sp,-24
   14760:	dfc00515 	stw	ra,20(sp)
   14764:	df000415 	stw	fp,16(sp)
   14768:	df000404 	addi	fp,sp,16
   1476c:	e13ffe15 	stw	r4,-8(fp)
   14770:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   14774:	e0bfff17 	ldw	r2,-4(fp)
   14778:	10800017 	ldw	r2,0(r2)
   1477c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   14780:	e13ffe17 	ldw	r4,-8(fp)
   14784:	00103200 	call	10320 <strlen>
   14788:	10800044 	addi	r2,r2,1
   1478c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14790:	00000d06 	br	147c8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   14794:	e0bffc17 	ldw	r2,-16(fp)
   14798:	10800217 	ldw	r2,8(r2)
   1479c:	e0fffd17 	ldw	r3,-12(fp)
   147a0:	180d883a 	mov	r6,r3
   147a4:	e17ffe17 	ldw	r5,-8(fp)
   147a8:	1009883a 	mov	r4,r2
   147ac:	0014a740 	call	14a74 <memcmp>
   147b0:	1000021e 	bne	r2,zero,147bc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   147b4:	e0bffc17 	ldw	r2,-16(fp)
   147b8:	00000706 	br	147d8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   147bc:	e0bffc17 	ldw	r2,-16(fp)
   147c0:	10800017 	ldw	r2,0(r2)
   147c4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   147c8:	e0fffc17 	ldw	r3,-16(fp)
   147cc:	e0bfff17 	ldw	r2,-4(fp)
   147d0:	18bff01e 	bne	r3,r2,14794 <__alt_data_end+0xffff4794>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   147d4:	0005883a 	mov	r2,zero
}
   147d8:	e037883a 	mov	sp,fp
   147dc:	dfc00117 	ldw	ra,4(sp)
   147e0:	df000017 	ldw	fp,0(sp)
   147e4:	dec00204 	addi	sp,sp,8
   147e8:	f800283a 	ret

000147ec <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   147ec:	defffb04 	addi	sp,sp,-20
   147f0:	dfc00415 	stw	ra,16(sp)
   147f4:	df000315 	stw	fp,12(sp)
   147f8:	df000304 	addi	fp,sp,12
   147fc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   14800:	d0a00417 	ldw	r2,-32752(gp)
   14804:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   14808:	00003106 	br	148d0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1480c:	e0bffd17 	ldw	r2,-12(fp)
   14810:	10800217 	ldw	r2,8(r2)
   14814:	1009883a 	mov	r4,r2
   14818:	00103200 	call	10320 <strlen>
   1481c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   14820:	e0bffd17 	ldw	r2,-12(fp)
   14824:	10c00217 	ldw	r3,8(r2)
   14828:	e0bffe17 	ldw	r2,-8(fp)
   1482c:	10bfffc4 	addi	r2,r2,-1
   14830:	1885883a 	add	r2,r3,r2
   14834:	10800003 	ldbu	r2,0(r2)
   14838:	10803fcc 	andi	r2,r2,255
   1483c:	1080201c 	xori	r2,r2,128
   14840:	10bfe004 	addi	r2,r2,-128
   14844:	10800bd8 	cmpnei	r2,r2,47
   14848:	1000031e 	bne	r2,zero,14858 <alt_find_file+0x6c>
    {
      len -= 1;
   1484c:	e0bffe17 	ldw	r2,-8(fp)
   14850:	10bfffc4 	addi	r2,r2,-1
   14854:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   14858:	e0bffe17 	ldw	r2,-8(fp)
   1485c:	e0ffff17 	ldw	r3,-4(fp)
   14860:	1885883a 	add	r2,r3,r2
   14864:	10800003 	ldbu	r2,0(r2)
   14868:	10803fcc 	andi	r2,r2,255
   1486c:	1080201c 	xori	r2,r2,128
   14870:	10bfe004 	addi	r2,r2,-128
   14874:	10800be0 	cmpeqi	r2,r2,47
   14878:	1000081e 	bne	r2,zero,1489c <alt_find_file+0xb0>
   1487c:	e0bffe17 	ldw	r2,-8(fp)
   14880:	e0ffff17 	ldw	r3,-4(fp)
   14884:	1885883a 	add	r2,r3,r2
   14888:	10800003 	ldbu	r2,0(r2)
   1488c:	10803fcc 	andi	r2,r2,255
   14890:	1080201c 	xori	r2,r2,128
   14894:	10bfe004 	addi	r2,r2,-128
   14898:	10000a1e 	bne	r2,zero,148c4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1489c:	e0bffd17 	ldw	r2,-12(fp)
   148a0:	10800217 	ldw	r2,8(r2)
   148a4:	e0fffe17 	ldw	r3,-8(fp)
   148a8:	180d883a 	mov	r6,r3
   148ac:	e17fff17 	ldw	r5,-4(fp)
   148b0:	1009883a 	mov	r4,r2
   148b4:	0014a740 	call	14a74 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   148b8:	1000021e 	bne	r2,zero,148c4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   148bc:	e0bffd17 	ldw	r2,-12(fp)
   148c0:	00000706 	br	148e0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   148c4:	e0bffd17 	ldw	r2,-12(fp)
   148c8:	10800017 	ldw	r2,0(r2)
   148cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   148d0:	e0fffd17 	ldw	r3,-12(fp)
   148d4:	d0a00404 	addi	r2,gp,-32752
   148d8:	18bfcc1e 	bne	r3,r2,1480c <__alt_data_end+0xffff480c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   148dc:	0005883a 	mov	r2,zero
}
   148e0:	e037883a 	mov	sp,fp
   148e4:	dfc00117 	ldw	ra,4(sp)
   148e8:	df000017 	ldw	fp,0(sp)
   148ec:	dec00204 	addi	sp,sp,8
   148f0:	f800283a 	ret

000148f4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   148f4:	defffc04 	addi	sp,sp,-16
   148f8:	df000315 	stw	fp,12(sp)
   148fc:	df000304 	addi	fp,sp,12
   14900:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   14904:	00bffa04 	movi	r2,-24
   14908:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1490c:	e03ffd15 	stw	zero,-12(fp)
   14910:	00001906 	br	14978 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   14914:	00800074 	movhi	r2,1
   14918:	10959704 	addi	r2,r2,22108
   1491c:	e0fffd17 	ldw	r3,-12(fp)
   14920:	18c00324 	muli	r3,r3,12
   14924:	10c5883a 	add	r2,r2,r3
   14928:	10800017 	ldw	r2,0(r2)
   1492c:	10000f1e 	bne	r2,zero,1496c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   14930:	00800074 	movhi	r2,1
   14934:	10959704 	addi	r2,r2,22108
   14938:	e0fffd17 	ldw	r3,-12(fp)
   1493c:	18c00324 	muli	r3,r3,12
   14940:	10c5883a 	add	r2,r2,r3
   14944:	e0ffff17 	ldw	r3,-4(fp)
   14948:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1494c:	d0e00817 	ldw	r3,-32736(gp)
   14950:	e0bffd17 	ldw	r2,-12(fp)
   14954:	1880020e 	bge	r3,r2,14960 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   14958:	e0bffd17 	ldw	r2,-12(fp)
   1495c:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   14960:	e0bffd17 	ldw	r2,-12(fp)
   14964:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   14968:	00000606 	br	14984 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1496c:	e0bffd17 	ldw	r2,-12(fp)
   14970:	10800044 	addi	r2,r2,1
   14974:	e0bffd15 	stw	r2,-12(fp)
   14978:	e0bffd17 	ldw	r2,-12(fp)
   1497c:	10800810 	cmplti	r2,r2,32
   14980:	103fe41e 	bne	r2,zero,14914 <__alt_data_end+0xffff4914>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   14984:	e0bffe17 	ldw	r2,-8(fp)
}
   14988:	e037883a 	mov	sp,fp
   1498c:	df000017 	ldw	fp,0(sp)
   14990:	dec00104 	addi	sp,sp,4
   14994:	f800283a 	ret

00014998 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   14998:	defffb04 	addi	sp,sp,-20
   1499c:	df000415 	stw	fp,16(sp)
   149a0:	df000404 	addi	fp,sp,16
   149a4:	e13ffe15 	stw	r4,-8(fp)
   149a8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   149ac:	e0bfff17 	ldw	r2,-4(fp)
   149b0:	10840070 	cmpltui	r2,r2,4097
   149b4:	1000021e 	bne	r2,zero,149c0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   149b8:	00840004 	movi	r2,4096
   149bc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   149c0:	e0fffe17 	ldw	r3,-8(fp)
   149c4:	e0bfff17 	ldw	r2,-4(fp)
   149c8:	1885883a 	add	r2,r3,r2
   149cc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   149d0:	e0bffe17 	ldw	r2,-8(fp)
   149d4:	e0bffc15 	stw	r2,-16(fp)
   149d8:	00000506 	br	149f0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   149dc:	e0bffc17 	ldw	r2,-16(fp)
   149e0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   149e4:	e0bffc17 	ldw	r2,-16(fp)
   149e8:	10800804 	addi	r2,r2,32
   149ec:	e0bffc15 	stw	r2,-16(fp)
   149f0:	e0fffc17 	ldw	r3,-16(fp)
   149f4:	e0bffd17 	ldw	r2,-12(fp)
   149f8:	18bff836 	bltu	r3,r2,149dc <__alt_data_end+0xffff49dc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   149fc:	e0bffe17 	ldw	r2,-8(fp)
   14a00:	108007cc 	andi	r2,r2,31
   14a04:	10000226 	beq	r2,zero,14a10 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   14a08:	e0bffc17 	ldw	r2,-16(fp)
   14a0c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   14a10:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   14a14:	0001883a 	nop
   14a18:	e037883a 	mov	sp,fp
   14a1c:	df000017 	ldw	fp,0(sp)
   14a20:	dec00104 	addi	sp,sp,4
   14a24:	f800283a 	ret

00014a28 <atexit>:
   14a28:	200b883a 	mov	r5,r4
   14a2c:	000f883a 	mov	r7,zero
   14a30:	000d883a 	mov	r6,zero
   14a34:	0009883a 	mov	r4,zero
   14a38:	0014af01 	jmpi	14af0 <__register_exitproc>

00014a3c <exit>:
   14a3c:	defffe04 	addi	sp,sp,-8
   14a40:	000b883a 	mov	r5,zero
   14a44:	dc000015 	stw	r16,0(sp)
   14a48:	dfc00115 	stw	ra,4(sp)
   14a4c:	2021883a 	mov	r16,r4
   14a50:	0014c080 	call	14c08 <__call_exitprocs>
   14a54:	00800074 	movhi	r2,1
   14a58:	10960204 	addi	r2,r2,22536
   14a5c:	11000017 	ldw	r4,0(r2)
   14a60:	20800f17 	ldw	r2,60(r4)
   14a64:	10000126 	beq	r2,zero,14a6c <exit+0x30>
   14a68:	103ee83a 	callr	r2
   14a6c:	8009883a 	mov	r4,r16
   14a70:	0014d880 	call	14d88 <_exit>

00014a74 <memcmp>:
   14a74:	01c000c4 	movi	r7,3
   14a78:	3980192e 	bgeu	r7,r6,14ae0 <memcmp+0x6c>
   14a7c:	2144b03a 	or	r2,r4,r5
   14a80:	11c4703a 	and	r2,r2,r7
   14a84:	10000f26 	beq	r2,zero,14ac4 <memcmp+0x50>
   14a88:	20800003 	ldbu	r2,0(r4)
   14a8c:	28c00003 	ldbu	r3,0(r5)
   14a90:	10c0151e 	bne	r2,r3,14ae8 <memcmp+0x74>
   14a94:	31bfff84 	addi	r6,r6,-2
   14a98:	01ffffc4 	movi	r7,-1
   14a9c:	00000406 	br	14ab0 <memcmp+0x3c>
   14aa0:	20800003 	ldbu	r2,0(r4)
   14aa4:	28c00003 	ldbu	r3,0(r5)
   14aa8:	31bfffc4 	addi	r6,r6,-1
   14aac:	10c00e1e 	bne	r2,r3,14ae8 <memcmp+0x74>
   14ab0:	21000044 	addi	r4,r4,1
   14ab4:	29400044 	addi	r5,r5,1
   14ab8:	31fff91e 	bne	r6,r7,14aa0 <__alt_data_end+0xffff4aa0>
   14abc:	0005883a 	mov	r2,zero
   14ac0:	f800283a 	ret
   14ac4:	20c00017 	ldw	r3,0(r4)
   14ac8:	28800017 	ldw	r2,0(r5)
   14acc:	18bfee1e 	bne	r3,r2,14a88 <__alt_data_end+0xffff4a88>
   14ad0:	31bfff04 	addi	r6,r6,-4
   14ad4:	21000104 	addi	r4,r4,4
   14ad8:	29400104 	addi	r5,r5,4
   14adc:	39bff936 	bltu	r7,r6,14ac4 <__alt_data_end+0xffff4ac4>
   14ae0:	303fe91e 	bne	r6,zero,14a88 <__alt_data_end+0xffff4a88>
   14ae4:	003ff506 	br	14abc <__alt_data_end+0xffff4abc>
   14ae8:	10c5c83a 	sub	r2,r2,r3
   14aec:	f800283a 	ret

00014af0 <__register_exitproc>:
   14af0:	defffa04 	addi	sp,sp,-24
   14af4:	dc000315 	stw	r16,12(sp)
   14af8:	04000074 	movhi	r16,1
   14afc:	84160204 	addi	r16,r16,22536
   14b00:	80c00017 	ldw	r3,0(r16)
   14b04:	dc400415 	stw	r17,16(sp)
   14b08:	dfc00515 	stw	ra,20(sp)
   14b0c:	18805217 	ldw	r2,328(r3)
   14b10:	2023883a 	mov	r17,r4
   14b14:	10003726 	beq	r2,zero,14bf4 <__register_exitproc+0x104>
   14b18:	10c00117 	ldw	r3,4(r2)
   14b1c:	010007c4 	movi	r4,31
   14b20:	20c00e16 	blt	r4,r3,14b5c <__register_exitproc+0x6c>
   14b24:	1a000044 	addi	r8,r3,1
   14b28:	8800221e 	bne	r17,zero,14bb4 <__register_exitproc+0xc4>
   14b2c:	18c00084 	addi	r3,r3,2
   14b30:	18c7883a 	add	r3,r3,r3
   14b34:	18c7883a 	add	r3,r3,r3
   14b38:	12000115 	stw	r8,4(r2)
   14b3c:	10c7883a 	add	r3,r2,r3
   14b40:	19400015 	stw	r5,0(r3)
   14b44:	0005883a 	mov	r2,zero
   14b48:	dfc00517 	ldw	ra,20(sp)
   14b4c:	dc400417 	ldw	r17,16(sp)
   14b50:	dc000317 	ldw	r16,12(sp)
   14b54:	dec00604 	addi	sp,sp,24
   14b58:	f800283a 	ret
   14b5c:	00800034 	movhi	r2,0
   14b60:	10800004 	addi	r2,r2,0
   14b64:	10002626 	beq	r2,zero,14c00 <__register_exitproc+0x110>
   14b68:	01006404 	movi	r4,400
   14b6c:	d9400015 	stw	r5,0(sp)
   14b70:	d9800115 	stw	r6,4(sp)
   14b74:	d9c00215 	stw	r7,8(sp)
   14b78:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   14b7c:	d9400017 	ldw	r5,0(sp)
   14b80:	d9800117 	ldw	r6,4(sp)
   14b84:	d9c00217 	ldw	r7,8(sp)
   14b88:	10001d26 	beq	r2,zero,14c00 <__register_exitproc+0x110>
   14b8c:	81000017 	ldw	r4,0(r16)
   14b90:	10000115 	stw	zero,4(r2)
   14b94:	02000044 	movi	r8,1
   14b98:	22405217 	ldw	r9,328(r4)
   14b9c:	0007883a 	mov	r3,zero
   14ba0:	12400015 	stw	r9,0(r2)
   14ba4:	20805215 	stw	r2,328(r4)
   14ba8:	10006215 	stw	zero,392(r2)
   14bac:	10006315 	stw	zero,396(r2)
   14bb0:	883fde26 	beq	r17,zero,14b2c <__alt_data_end+0xffff4b2c>
   14bb4:	18c9883a 	add	r4,r3,r3
   14bb8:	2109883a 	add	r4,r4,r4
   14bbc:	1109883a 	add	r4,r2,r4
   14bc0:	21802215 	stw	r6,136(r4)
   14bc4:	01800044 	movi	r6,1
   14bc8:	12406217 	ldw	r9,392(r2)
   14bcc:	30cc983a 	sll	r6,r6,r3
   14bd0:	4992b03a 	or	r9,r9,r6
   14bd4:	12406215 	stw	r9,392(r2)
   14bd8:	21c04215 	stw	r7,264(r4)
   14bdc:	01000084 	movi	r4,2
   14be0:	893fd21e 	bne	r17,r4,14b2c <__alt_data_end+0xffff4b2c>
   14be4:	11006317 	ldw	r4,396(r2)
   14be8:	218cb03a 	or	r6,r4,r6
   14bec:	11806315 	stw	r6,396(r2)
   14bf0:	003fce06 	br	14b2c <__alt_data_end+0xffff4b2c>
   14bf4:	18805304 	addi	r2,r3,332
   14bf8:	18805215 	stw	r2,328(r3)
   14bfc:	003fc606 	br	14b18 <__alt_data_end+0xffff4b18>
   14c00:	00bfffc4 	movi	r2,-1
   14c04:	003fd006 	br	14b48 <__alt_data_end+0xffff4b48>

00014c08 <__call_exitprocs>:
   14c08:	defff504 	addi	sp,sp,-44
   14c0c:	df000915 	stw	fp,36(sp)
   14c10:	dd400615 	stw	r21,24(sp)
   14c14:	dc800315 	stw	r18,12(sp)
   14c18:	dfc00a15 	stw	ra,40(sp)
   14c1c:	ddc00815 	stw	r23,32(sp)
   14c20:	dd800715 	stw	r22,28(sp)
   14c24:	dd000515 	stw	r20,20(sp)
   14c28:	dcc00415 	stw	r19,16(sp)
   14c2c:	dc400215 	stw	r17,8(sp)
   14c30:	dc000115 	stw	r16,4(sp)
   14c34:	d9000015 	stw	r4,0(sp)
   14c38:	2839883a 	mov	fp,r5
   14c3c:	04800044 	movi	r18,1
   14c40:	057fffc4 	movi	r21,-1
   14c44:	00800074 	movhi	r2,1
   14c48:	10960204 	addi	r2,r2,22536
   14c4c:	12000017 	ldw	r8,0(r2)
   14c50:	45005217 	ldw	r20,328(r8)
   14c54:	44c05204 	addi	r19,r8,328
   14c58:	a0001c26 	beq	r20,zero,14ccc <__call_exitprocs+0xc4>
   14c5c:	a0800117 	ldw	r2,4(r20)
   14c60:	15ffffc4 	addi	r23,r2,-1
   14c64:	b8000d16 	blt	r23,zero,14c9c <__call_exitprocs+0x94>
   14c68:	14000044 	addi	r16,r2,1
   14c6c:	8421883a 	add	r16,r16,r16
   14c70:	8421883a 	add	r16,r16,r16
   14c74:	84402004 	addi	r17,r16,128
   14c78:	a463883a 	add	r17,r20,r17
   14c7c:	a421883a 	add	r16,r20,r16
   14c80:	e0001e26 	beq	fp,zero,14cfc <__call_exitprocs+0xf4>
   14c84:	80804017 	ldw	r2,256(r16)
   14c88:	e0801c26 	beq	fp,r2,14cfc <__call_exitprocs+0xf4>
   14c8c:	bdffffc4 	addi	r23,r23,-1
   14c90:	843fff04 	addi	r16,r16,-4
   14c94:	8c7fff04 	addi	r17,r17,-4
   14c98:	bd7ff91e 	bne	r23,r21,14c80 <__alt_data_end+0xffff4c80>
   14c9c:	00800034 	movhi	r2,0
   14ca0:	10800004 	addi	r2,r2,0
   14ca4:	10000926 	beq	r2,zero,14ccc <__call_exitprocs+0xc4>
   14ca8:	a0800117 	ldw	r2,4(r20)
   14cac:	1000301e 	bne	r2,zero,14d70 <__call_exitprocs+0x168>
   14cb0:	a0800017 	ldw	r2,0(r20)
   14cb4:	10003226 	beq	r2,zero,14d80 <__call_exitprocs+0x178>
   14cb8:	a009883a 	mov	r4,r20
   14cbc:	98800015 	stw	r2,0(r19)
   14cc0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   14cc4:	9d000017 	ldw	r20,0(r19)
   14cc8:	a03fe41e 	bne	r20,zero,14c5c <__alt_data_end+0xffff4c5c>
   14ccc:	dfc00a17 	ldw	ra,40(sp)
   14cd0:	df000917 	ldw	fp,36(sp)
   14cd4:	ddc00817 	ldw	r23,32(sp)
   14cd8:	dd800717 	ldw	r22,28(sp)
   14cdc:	dd400617 	ldw	r21,24(sp)
   14ce0:	dd000517 	ldw	r20,20(sp)
   14ce4:	dcc00417 	ldw	r19,16(sp)
   14ce8:	dc800317 	ldw	r18,12(sp)
   14cec:	dc400217 	ldw	r17,8(sp)
   14cf0:	dc000117 	ldw	r16,4(sp)
   14cf4:	dec00b04 	addi	sp,sp,44
   14cf8:	f800283a 	ret
   14cfc:	a0800117 	ldw	r2,4(r20)
   14d00:	80c00017 	ldw	r3,0(r16)
   14d04:	10bfffc4 	addi	r2,r2,-1
   14d08:	15c01426 	beq	r2,r23,14d5c <__call_exitprocs+0x154>
   14d0c:	80000015 	stw	zero,0(r16)
   14d10:	183fde26 	beq	r3,zero,14c8c <__alt_data_end+0xffff4c8c>
   14d14:	95c8983a 	sll	r4,r18,r23
   14d18:	a0806217 	ldw	r2,392(r20)
   14d1c:	a5800117 	ldw	r22,4(r20)
   14d20:	2084703a 	and	r2,r4,r2
   14d24:	10000b26 	beq	r2,zero,14d54 <__call_exitprocs+0x14c>
   14d28:	a0806317 	ldw	r2,396(r20)
   14d2c:	2088703a 	and	r4,r4,r2
   14d30:	20000c1e 	bne	r4,zero,14d64 <__call_exitprocs+0x15c>
   14d34:	89400017 	ldw	r5,0(r17)
   14d38:	d9000017 	ldw	r4,0(sp)
   14d3c:	183ee83a 	callr	r3
   14d40:	a0800117 	ldw	r2,4(r20)
   14d44:	15bfbf1e 	bne	r2,r22,14c44 <__alt_data_end+0xffff4c44>
   14d48:	98800017 	ldw	r2,0(r19)
   14d4c:	153fcf26 	beq	r2,r20,14c8c <__alt_data_end+0xffff4c8c>
   14d50:	003fbc06 	br	14c44 <__alt_data_end+0xffff4c44>
   14d54:	183ee83a 	callr	r3
   14d58:	003ff906 	br	14d40 <__alt_data_end+0xffff4d40>
   14d5c:	a5c00115 	stw	r23,4(r20)
   14d60:	003feb06 	br	14d10 <__alt_data_end+0xffff4d10>
   14d64:	89000017 	ldw	r4,0(r17)
   14d68:	183ee83a 	callr	r3
   14d6c:	003ff406 	br	14d40 <__alt_data_end+0xffff4d40>
   14d70:	a0800017 	ldw	r2,0(r20)
   14d74:	a027883a 	mov	r19,r20
   14d78:	1029883a 	mov	r20,r2
   14d7c:	003fb606 	br	14c58 <__alt_data_end+0xffff4c58>
   14d80:	0005883a 	mov	r2,zero
   14d84:	003ffb06 	br	14d74 <__alt_data_end+0xffff4d74>

00014d88 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   14d88:	defffd04 	addi	sp,sp,-12
   14d8c:	df000215 	stw	fp,8(sp)
   14d90:	df000204 	addi	fp,sp,8
   14d94:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   14d98:	0001883a 	nop
   14d9c:	e0bfff17 	ldw	r2,-4(fp)
   14da0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   14da4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   14da8:	10000226 	beq	r2,zero,14db4 <_exit+0x2c>
    ALT_SIM_FAIL();
   14dac:	002af070 	cmpltui	zero,zero,43969
   14db0:	00000106 	br	14db8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   14db4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   14db8:	003fff06 	br	14db8 <__alt_data_end+0xffff4db8>
