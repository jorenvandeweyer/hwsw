
hwsw_project.elf:     file format elf32-littlenios2
hwsw_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00004288 memsz 0x00004288 flags r-x
    LOAD off    0x000052a8 vaddr 0x000142a8 paddr 0x000148fc align 2**12
         filesz 0x00000654 memsz 0x00000654 flags rw-
    LOAD off    0x00005f50 vaddr 0x00014f50 paddr 0x00014f50 align 2**12
         filesz 0x00000000 memsz 0x00000834 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003fa4  000101c0  000101c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000144  00014164  00014164  00005164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000654  000142a8  000148fc  000052a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000834  00014f50  00014f50  00005f50  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00015784  00015784  000058fc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000058fc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000006f0  00000000  00000000  00005920  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000b461  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000036fe  00000000  00000000  00011471  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003b73  00000000  00000000  00014b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000fd0  00000000  00000000  000186e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001c63  00000000  00000000  000196b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001ce0  00000000  00000000  0001b317  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0001cff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000350  00000000  00000000  0001d028  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001f29e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001f2a1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001f2ad  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001f2ae  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0001f2af  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0001f2ba  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0001f2c5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  0001f2d0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003f  00000000  00000000  0001f2d4  2**0
                  CONTENTS, READONLY
 26 .jdi          00004005  00000000  00000000  0001f313  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00059468  00000000  00000000  00023318  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101c0 l    d  .text	00000000 .text
00014164 l    d  .rodata	00000000 .rodata
000142a8 l    d  .rwdata	00000000 .rwdata
00014f50 l    d  .bss	00000000 .bss
00015784 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hwsw_project_bsp//obj/HAL/src/crt0.o
00010208 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00010094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
000142a8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_load.c
00012090 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_times.c
0001239c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00012450 l     F .text	00000034 alt_dev_reg
000146cc l     O .rwdata	0000002c jtag_uart_0
000146f8 l     O .rwdata	0000002c uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00012754 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00012908 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00012a08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_close.c
00012b24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00012c78 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00012ca4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00013118 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00013258 l     F .text	0000003c alt_get_errno
00013294 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001217c g     F .text	0000007c alt_main
00014f54 g     O .bss	00000004 food
00015684 g     O .bss	00000100 alt_irq
000148fc g       *ABS*	00000000 __flash_rwdata_start
00011de0 g     F .text	0000005c _gettimeofday_r
00010de8 g     F .text	000000f0 random
00014f58 g     O .bss	00000004 b
00014f5c g     O .bss	00000004 x
0001179c g     F .text	00000058 updateHead
00014fb0 g     O .bss	000006d4 Field
00010000 g     F .entry	0000001c __reset
000123d8 g     F .text	00000078 times
00010020 g       *ABS*	00000000 __flash_exceptions_start
00014f84 g     O .bss	00000004 errno
00014f9c g     O .bss	00000004 alt_argv
0001c8cc g       *ABS*	00000000 _gp
00014f60 g     O .bss	00000004 game
0001474c g     O .rwdata	00000180 alt_fd_list
00013534 g     F .text	00000090 alt_find_dev
00011dd8 g     F .text	00000008 _times_r
00010298 g     F .text	00000044 ws
000131dc g     F .text	0000007c alt_io_redirect
00014164 g       *ABS*	00000000 __DTOR_END__
000125d4 g     F .text	000000ec altera_avalon_jtag_uart_read
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00011c04 g     F .text	00000064 .hidden __udivsi3
00014f88 g     O .bss	00000008 alt_timezone
00013770 g     F .text	00000090 alt_icache_flush
000148f0 g     O .rwdata	00000004 alt_max_fd
00014f64 g     O .bss	00000004 gy
00013bf8 g     F .text	00000538 .hidden __umoddi3
000148d0 g     O .rwdata	00000004 _global_impure_ptr
00015784 g       *ABS*	00000000 __bss_end
00013028 g     F .text	000000f0 alt_iic_isr_register
00012294 g     F .text	00000108 alt_tick
00012fdc g     F .text	0000004c alt_ic_irq_enabled
000116a8 g     F .text	00000088 checkGameOver
000121f8 g     F .text	0000009c alt_alarm_stop
00014fac g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000d4 alt_irq_handler
00014724 g     O .rwdata	00000028 alt_dev_null
00012c30 g     F .text	00000048 alt_dcache_flush_all
000148fc g       *ABS*	00000000 __ram_rwdata_end
00014f68 g     O .bss	00000004 direction
000148e8 g     O .rwdata	00000008 alt_dev_list
00014f6c g     O .bss	00000004 score
00014f70 g     O .bss	00000004 tail
000142a8 g       *ABS*	00000000 __ram_rodata_end
00010ed8 g     F .text	000007d0 gameOver
00011c68 g     F .text	00000058 .hidden __umodsi3
00015784 g       *ABS*	00000000 end
00012a44 g     F .text	000000e0 altera_avalon_uart_write
00014f74 g     O .bss	00000004 head
00014164 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
000127cc g     F .text	0000007c alt_avalon_timer_sc_init
000128a8 g     F .text	00000060 altera_avalon_uart_write_fd
000126c0 g     F .text	00000094 altera_avalon_jtag_uart_write
00013a78 g     F .text	00000180 __call_exitprocs
000101c0 g     F .text	0000004c _start
00014fa4 g     O .bss	00000004 _alt_tick_rate
00011d24 g     F .text	00000064 rand
00014fa8 g     O .bss	00000004 _alt_nticks
000124bc g     F .text	00000058 alt_sys_init
00013960 g     F .text	00000118 __register_exitproc
000142a8 g       *ABS*	00000000 __ram_rwdata_start
00014164 g       *ABS*	00000000 __ram_rodata_start
0001049c g     F .text	00000020 createTitle
00010254 g     F .text	00000044 wc
00012514 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000136cc g     F .text	000000a4 alt_get_fd
0001384c g     F .text	0000007c memcmp
00015784 g       *ABS*	00000000 __alt_stack_base
000109d4 g     F .text	00000178 init
0001041c g     F .text	00000080 clearBoard
000135c4 g     F .text	00000108 alt_find_file
00012ce0 g     F .text	000000a4 alt_dev_llist_insert
00011e9c g     F .text	000001f4 gettimeofday
00014f50 g       *ABS*	00000000 __bss_start
00011ab4 g     F .text	00000058 main
00014fa0 g     O .bss	00000004 alt_envp
00012574 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00011d0c g     F .text	00000018 srand
00014f50 g     O .bss	00000004 prev
00011d88 g     F .text	00000050 time
00014f78 g     O .bss	00000004 y
000148f4 g     O .rwdata	00000004 alt_errno
00011b0c g     F .text	00000084 .hidden __divsi3
00014164 g       *ABS*	00000000 __CTOR_END__
00014164 g       *ABS*	00000000 __flash_rodata_start
00014164 g       *ABS*	00000000 __DTOR_LIST__
000117f4 g     F .text	000001ac movement
00011a64 g     F .text	00000050 delay
00012484 g     F .text	00000038 alt_irq_init
000134ac g     F .text	00000064 alt_release_fd
000141a6 g     O .rodata	00000100 .hidden __clz_tab
00013800 g     F .text	00000014 atexit
000148d4 g     O .rwdata	00000004 _impure_ptr
00014f98 g     O .bss	00000004 alt_argc
000104bc g     F .text	00000518 initBoard
00012de4 g     F .text	00000060 _do_dtors
00010370 g     F .text	00000058 rd
00010020 g       .exceptions	00000000 alt_irq_entry
00014f7c g     O .bss	00000004 speed
000148e0 g     O .rwdata	00000008 alt_fs_list
00014f90 g     O .bss	00000008 alt_resettime
00010c7c g     F .text	0000016c show
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010320 g     F .text	00000050 wbcoord
00012e78 g     F .text	00000050 alt_ic_isr_register
0001020c g     F .text	00000048 wr
000119a0 g     F .text	000000c4 tailRemove
000148fc g       *ABS*	00000000 _edata
00012848 g     F .text	00000060 altera_avalon_uart_read_fd
00015784 g       *ABS*	00000000 _end
000101c0 g       *ABS*	00000000 __ram_exceptions_end
00012f50 g     F .text	0000008c alt_ic_irq_disable
00011730 g     F .text	0000006c checkFood
00013510 g     F .text	00000024 altera_nios2_qsys_irq_init
00013814 g     F .text	00000038 exit
00014f80 g     O .bss	00000004 a
00011b90 g     F .text	00000074 .hidden __modsi3
00010b4c g     F .text	00000130 snakeInit
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000102dc g     F .text	00000044 wb
00014130 g     F .text	00000034 _exit
00011e3c g     F .text	00000060 .hidden __muldi3
000138c8 g     F .text	00000098 strlen
00013358 g     F .text	00000154 open
00011cc0 g     F .text	0000004c clock
000103c8 g     F .text	00000054 clearScreen
00012e44 g     F .text	00000034 alt_icache_flush_all
000148f8 g     O .rwdata	00000004 alt_priority_mask
00012ec8 g     F .text	00000088 alt_ic_irq_enable
00012944 g     F .text	000000c4 altera_avalon_uart_read
000148d8 g     O .rwdata	00000008 alt_alarm_list
00012d84 g     F .text	00000060 _do_ctors
00012b60 g     F .text	000000d0 close
000120f8 g     F .text	00000084 alt_load
000148cc g     O .rwdata	00000004 value



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__alt_data_end+0xffff0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08407014 	ori	at,at,448
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)

00010094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   100fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10100:	0005313a 	rdctl	r2,ipending
   10104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10114:	00800044 	movi	r2,1
   10118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	1884703a 	and	r2,r3,r2
   10128:	10001426 	beq	r2,zero,1017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	00800074 	movhi	r2,1
   10130:	1095a104 	addi	r2,r2,22148
   10134:	e0fffd17 	ldw	r3,-12(fp)
   10138:	180690fa 	slli	r3,r3,3
   1013c:	10c5883a 	add	r2,r2,r3
   10140:	10c00017 	ldw	r3,0(r2)
   10144:	00800074 	movhi	r2,1
   10148:	1095a104 	addi	r2,r2,22148
   1014c:	e13ffd17 	ldw	r4,-12(fp)
   10150:	200890fa 	slli	r4,r4,3
   10154:	1105883a 	add	r2,r2,r4
   10158:	10800104 	addi	r2,r2,4
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	1009883a 	mov	r4,r2
   10164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1016c:	0005313a 	rdctl	r2,ipending
   10170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10174:	e0bfff17 	ldw	r2,-4(fp)
   10178:	00000706 	br	10198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1017c:	e0bffc17 	ldw	r2,-16(fp)
   10180:	1085883a 	add	r2,r2,r2
   10184:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10188:	e0bffd17 	ldw	r2,-12(fp)
   1018c:	10800044 	addi	r2,r2,1
   10190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   10194:	003fe106 	br	1011c <__alt_data_end+0xffff011c>

    active = alt_irq_pending ();
   10198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   1019c:	e0bffb17 	ldw	r2,-20(fp)
   101a0:	103fdb1e 	bne	r2,zero,10110 <__alt_data_end+0xffff0110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101a4:	0001883a 	nop
}
   101a8:	0001883a 	nop
   101ac:	e037883a 	mov	sp,fp
   101b0:	dfc00117 	ldw	ra,4(sp)
   101b4:	df000017 	ldw	fp,0(sp)
   101b8:	dec00204 	addi	sp,sp,8
   101bc:	f800283a 	ret

Disassembly of section .text:

000101c0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   101c0:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   101c4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   101c8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   101cc:	00bffd16 	blt	zero,r2,101c4 <__alt_data_end+0xffff01c4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101d0:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   101d4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   101d8:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   101dc:	d6b23314 	ori	gp,gp,51404
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101e0:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101e4:	1093d414 	ori	r2,r2,20304

    movhi r3, %hi(__bss_end)
   101e8:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101ec:	18d5e114 	ori	r3,r3,22404

    beq r2, r3, 1f
   101f0:	10c00326 	beq	r2,r3,10200 <_start+0x40>

0:
    stw zero, (r2)
   101f4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101f8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101fc:	10fffd36 	bltu	r2,r3,101f4 <__alt_data_end+0xffff01f4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10200:	00120f80 	call	120f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10204:	001217c0 	call	1217c <alt_main>

00010208 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10208:	003fff06 	br	10208 <__alt_data_end+0xffff0208>

0001020c <wr>:
#define RIGHT_KEY 11

alt_u32 prev = 0;
alt_u32 value = 1;

void wr(alt_u32 op, int data){
   1020c:	defffd04 	addi	sp,sp,-12
   10210:	df000215 	stw	fp,8(sp)
   10214:	df000204 	addi	fp,sp,8
   10218:	e13ffe15 	stw	r4,-8(fp)
   1021c:	e17fff15 	stw	r5,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(OPERATION_BASE, op);
   10220:	e0fffe17 	ldw	r3,-8(fp)
   10224:	008000b4 	movhi	r2,2
   10228:	10842c04 	addi	r2,r2,4272
   1022c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(DATA_BASE, data);
   10230:	008000b4 	movhi	r2,2
   10234:	10843004 	addi	r2,r2,4288
   10238:	e0ffff17 	ldw	r3,-4(fp)
   1023c:	10c00035 	stwio	r3,0(r2)
}
   10240:	0001883a 	nop
   10244:	e037883a 	mov	sp,fp
   10248:	df000017 	ldw	fp,0(sp)
   1024c:	dec00104 	addi	sp,sp,4
   10250:	f800283a 	ret

00010254 <wc>:

/**
 * write to color
 */
void wc(int offset, int data){
   10254:	defffc04 	addi	sp,sp,-16
   10258:	dfc00315 	stw	ra,12(sp)
   1025c:	df000215 	stw	fp,8(sp)
   10260:	df000204 	addi	fp,sp,8
   10264:	e13ffe15 	stw	r4,-8(fp)
   10268:	e17fff15 	stw	r5,-4(fp)
  wr(OP_COLOR | offset, data);
   1026c:	e0bffe17 	ldw	r2,-8(fp)
   10270:	108000f4 	orhi	r2,r2,3
   10274:	e17fff17 	ldw	r5,-4(fp)
   10278:	1009883a 	mov	r4,r2
   1027c:	001020c0 	call	1020c <wr>
}
   10280:	0001883a 	nop
   10284:	e037883a 	mov	sp,fp
   10288:	dfc00117 	ldw	ra,4(sp)
   1028c:	df000017 	ldw	fp,0(sp)
   10290:	dec00204 	addi	sp,sp,8
   10294:	f800283a 	ret

00010298 <ws>:

/**
 * write to sprites
 */
void ws(int offset, int data){
   10298:	defffc04 	addi	sp,sp,-16
   1029c:	dfc00315 	stw	ra,12(sp)
   102a0:	df000215 	stw	fp,8(sp)
   102a4:	df000204 	addi	fp,sp,8
   102a8:	e13ffe15 	stw	r4,-8(fp)
   102ac:	e17fff15 	stw	r5,-4(fp)
  wr(OP_SPRITE | offset, data);
   102b0:	e0bffe17 	ldw	r2,-8(fp)
   102b4:	108000b4 	orhi	r2,r2,2
   102b8:	e17fff17 	ldw	r5,-4(fp)
   102bc:	1009883a 	mov	r4,r2
   102c0:	001020c0 	call	1020c <wr>
}
   102c4:	0001883a 	nop
   102c8:	e037883a 	mov	sp,fp
   102cc:	dfc00117 	ldw	ra,4(sp)
   102d0:	df000017 	ldw	fp,0(sp)
   102d4:	dec00204 	addi	sp,sp,8
   102d8:	f800283a 	ret

000102dc <wb>:

/**
 * write to Board
 */
void wb(int offset, int data){
   102dc:	defffc04 	addi	sp,sp,-16
   102e0:	dfc00315 	stw	ra,12(sp)
   102e4:	df000215 	stw	fp,8(sp)
   102e8:	df000204 	addi	fp,sp,8
   102ec:	e13ffe15 	stw	r4,-8(fp)
   102f0:	e17fff15 	stw	r5,-4(fp)
  wr(OP_BOARD | offset, data);
   102f4:	e0bffe17 	ldw	r2,-8(fp)
   102f8:	10800074 	orhi	r2,r2,1
   102fc:	e17fff17 	ldw	r5,-4(fp)
   10300:	1009883a 	mov	r4,r2
   10304:	001020c0 	call	1020c <wr>
}
   10308:	0001883a 	nop
   1030c:	e037883a 	mov	sp,fp
   10310:	dfc00117 	ldw	ra,4(sp)
   10314:	df000017 	ldw	fp,0(sp)
   10318:	dec00204 	addi	sp,sp,8
   1031c:	f800283a 	ret

00010320 <wbcoord>:

void wbcoord(int row, int col, int data){
   10320:	defffb04 	addi	sp,sp,-20
   10324:	dfc00415 	stw	ra,16(sp)
   10328:	df000315 	stw	fp,12(sp)
   1032c:	df000304 	addi	fp,sp,12
   10330:	e13ffd15 	stw	r4,-12(fp)
   10334:	e17ffe15 	stw	r5,-8(fp)
   10338:	e1bfff15 	stw	r6,-4(fp)
  wb(row * 80 + col, data);
   1033c:	e0bffd17 	ldw	r2,-12(fp)
   10340:	10c01424 	muli	r3,r2,80
   10344:	e0bffe17 	ldw	r2,-8(fp)
   10348:	1885883a 	add	r2,r3,r2
   1034c:	e17fff17 	ldw	r5,-4(fp)
   10350:	1009883a 	mov	r4,r2
   10354:	00102dc0 	call	102dc <wb>
}
   10358:	0001883a 	nop
   1035c:	e037883a 	mov	sp,fp
   10360:	dfc00117 	ldw	ra,4(sp)
   10364:	df000017 	ldw	fp,0(sp)
   10368:	dec00204 	addi	sp,sp,8
   1036c:	f800283a 	ret

00010370 <rd>:

/**
 * reead the Keys
 */
void rd(){
   10370:	defffe04 	addi	sp,sp,-8
   10374:	df000115 	stw	fp,4(sp)
   10378:	df000104 	addi	fp,sp,4
    alt_u32 temp = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
   1037c:	008000b4 	movhi	r2,2
   10380:	10842804 	addi	r2,r2,4256
   10384:	10800037 	ldwio	r2,0(r2)
   10388:	e0bfff15 	stw	r2,-4(fp)

    if (temp != prev){
   1038c:	d0a1a117 	ldw	r2,-31100(gp)
   10390:	e0ffff17 	ldw	r3,-4(fp)
   10394:	18800526 	beq	r3,r2,103ac <rd+0x3c>
        value = temp;
   10398:	e0bfff17 	ldw	r2,-4(fp)
   1039c:	d0a00015 	stw	r2,-32768(gp)
        prev = temp;
   103a0:	e0bfff17 	ldw	r2,-4(fp)
   103a4:	d0a1a115 	stw	r2,-31100(gp)
    }else value = 1;
}
   103a8:	00000206 	br	103b4 <rd+0x44>
    alt_u32 temp = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);

    if (temp != prev){
        value = temp;
        prev = temp;
    }else value = 1;
   103ac:	00800044 	movi	r2,1
   103b0:	d0a00015 	stw	r2,-32768(gp)
}
   103b4:	0001883a 	nop
   103b8:	e037883a 	mov	sp,fp
   103bc:	df000017 	ldw	fp,0(sp)
   103c0:	dec00104 	addi	sp,sp,4
   103c4:	f800283a 	ret

000103c8 <clearScreen>:
int speed;

/**
 * clear the whole screen
 */
void clearScreen(){
   103c8:	defffd04 	addi	sp,sp,-12
   103cc:	dfc00215 	stw	ra,8(sp)
   103d0:	df000115 	stw	fp,4(sp)
   103d4:	df000104 	addi	fp,sp,4
    for (int i = 0; i < 1280; i++){
   103d8:	e03fff15 	stw	zero,-4(fp)
   103dc:	00000606 	br	103f8 <clearScreen+0x30>
        wb(i, 0);
   103e0:	000b883a 	mov	r5,zero
   103e4:	e13fff17 	ldw	r4,-4(fp)
   103e8:	00102dc0 	call	102dc <wb>

/**
 * clear the whole screen
 */
void clearScreen(){
    for (int i = 0; i < 1280; i++){
   103ec:	e0bfff17 	ldw	r2,-4(fp)
   103f0:	10800044 	addi	r2,r2,1
   103f4:	e0bfff15 	stw	r2,-4(fp)
   103f8:	e0bfff17 	ldw	r2,-4(fp)
   103fc:	10814010 	cmplti	r2,r2,1280
   10400:	103ff71e 	bne	r2,zero,103e0 <__alt_data_end+0xffff03e0>
        wb(i, 0);
    }
}
   10404:	0001883a 	nop
   10408:	e037883a 	mov	sp,fp
   1040c:	dfc00117 	ldw	ra,4(sp)
   10410:	df000017 	ldw	fp,0(sp)
   10414:	dec00204 	addi	sp,sp,8
   10418:	f800283a 	ret

0001041c <clearBoard>:

/**
 * clear play field
 */
void clearBoard(){
   1041c:	defffc04 	addi	sp,sp,-16
   10420:	dfc00315 	stw	ra,12(sp)
   10424:	df000215 	stw	fp,8(sp)
   10428:	df000204 	addi	fp,sp,8
  for (int i = ZX + 1; i < ZX + M + 1; i++){
   1042c:	00800204 	movi	r2,8
   10430:	e0bffe15 	stw	r2,-8(fp)
   10434:	00001006 	br	10478 <clearBoard+0x5c>
    for (int j = ZY + 1; j < ZY + N + 1; j++){
   10438:	00800204 	movi	r2,8
   1043c:	e0bfff15 	stw	r2,-4(fp)
   10440:	00000706 	br	10460 <clearBoard+0x44>
      wbcoord(j, i, 0);
   10444:	000d883a 	mov	r6,zero
   10448:	e17ffe17 	ldw	r5,-8(fp)
   1044c:	e13fff17 	ldw	r4,-4(fp)
   10450:	00103200 	call	10320 <wbcoord>
/**
 * clear play field
 */
void clearBoard(){
  for (int i = ZX + 1; i < ZX + M + 1; i++){
    for (int j = ZY + 1; j < ZY + N + 1; j++){
   10454:	e0bfff17 	ldw	r2,-4(fp)
   10458:	10800044 	addi	r2,r2,1
   1045c:	e0bfff15 	stw	r2,-4(fp)
   10460:	e0bfff17 	ldw	r2,-4(fp)
   10464:	108006d0 	cmplti	r2,r2,27
   10468:	103ff61e 	bne	r2,zero,10444 <__alt_data_end+0xffff0444>

/**
 * clear play field
 */
void clearBoard(){
  for (int i = ZX + 1; i < ZX + M + 1; i++){
   1046c:	e0bffe17 	ldw	r2,-8(fp)
   10470:	10800044 	addi	r2,r2,1
   10474:	e0bffe15 	stw	r2,-8(fp)
   10478:	e0bffe17 	ldw	r2,-8(fp)
   1047c:	108007d0 	cmplti	r2,r2,31
   10480:	103fed1e 	bne	r2,zero,10438 <__alt_data_end+0xffff0438>
    for (int j = ZY + 1; j < ZY + N + 1; j++){
      wbcoord(j, i, 0);
    }
  }
}
   10484:	0001883a 	nop
   10488:	e037883a 	mov	sp,fp
   1048c:	dfc00117 	ldw	ra,4(sp)
   10490:	df000017 	ldw	fp,0(sp)
   10494:	dec00204 	addi	sp,sp,8
   10498:	f800283a 	ret

0001049c <createTitle>:

void createTitle(){
   1049c:	deffff04 	addi	sp,sp,-4
   104a0:	df000015 	stw	fp,0(sp)
   104a4:	d839883a 	mov	fp,sp

}
   104a8:	0001883a 	nop
   104ac:	e037883a 	mov	sp,fp
   104b0:	df000017 	ldw	fp,0(sp)
   104b4:	dec00104 	addi	sp,sp,4
   104b8:	f800283a 	ret

000104bc <initBoard>:

void initBoard(){
   104bc:	deffeb04 	addi	sp,sp,-84
   104c0:	dfc01415 	stw	ra,80(sp)
   104c4:	df001315 	stw	fp,76(sp)
   104c8:	df001304 	addi	fp,sp,76
    createTitle();
   104cc:	001049c0 	call	1049c <createTitle>

    int sprite = 2;
   104d0:	00800084 	movi	r2,2
   104d4:	e0bffd15 	stw	r2,-12(fp)
    for (int col = ZX; col < ZX + M + 2; col++){
   104d8:	008001c4 	movi	r2,7
   104dc:	e0bfed15 	stw	r2,-76(fp)
   104e0:	00000b06 	br	10510 <initBoard+0x54>
      wbcoord(ZY, col, sprite);
   104e4:	e1bffd17 	ldw	r6,-12(fp)
   104e8:	e17fed17 	ldw	r5,-76(fp)
   104ec:	010001c4 	movi	r4,7
   104f0:	00103200 	call	10320 <wbcoord>
      wbcoord(ZY + N + 1, col, sprite);
   104f4:	e1bffd17 	ldw	r6,-12(fp)
   104f8:	e17fed17 	ldw	r5,-76(fp)
   104fc:	010006c4 	movi	r4,27
   10500:	00103200 	call	10320 <wbcoord>

void initBoard(){
    createTitle();

    int sprite = 2;
    for (int col = ZX; col < ZX + M + 2; col++){
   10504:	e0bfed17 	ldw	r2,-76(fp)
   10508:	10800044 	addi	r2,r2,1
   1050c:	e0bfed15 	stw	r2,-76(fp)
   10510:	e0bfed17 	ldw	r2,-76(fp)
   10514:	10800810 	cmplti	r2,r2,32
   10518:	103ff21e 	bne	r2,zero,104e4 <__alt_data_end+0xffff04e4>
      wbcoord(ZY, col, sprite);
      wbcoord(ZY + N + 1, col, sprite);
    }

    for (int row = ZY; row < ZY + N + 2; row++){
   1051c:	008001c4 	movi	r2,7
   10520:	e0bfee15 	stw	r2,-72(fp)
   10524:	00000b06 	br	10554 <initBoard+0x98>
        wbcoord(row, ZX, sprite);
   10528:	e1bffd17 	ldw	r6,-12(fp)
   1052c:	014001c4 	movi	r5,7
   10530:	e13fee17 	ldw	r4,-72(fp)
   10534:	00103200 	call	10320 <wbcoord>
        wbcoord(row, ZX + M + 1, sprite);
   10538:	e1bffd17 	ldw	r6,-12(fp)
   1053c:	014007c4 	movi	r5,31
   10540:	e13fee17 	ldw	r4,-72(fp)
   10544:	00103200 	call	10320 <wbcoord>
    for (int col = ZX; col < ZX + M + 2; col++){
      wbcoord(ZY, col, sprite);
      wbcoord(ZY + N + 1, col, sprite);
    }

    for (int row = ZY; row < ZY + N + 2; row++){
   10548:	e0bfee17 	ldw	r2,-72(fp)
   1054c:	10800044 	addi	r2,r2,1
   10550:	e0bfee15 	stw	r2,-72(fp)
   10554:	e0bfee17 	ldw	r2,-72(fp)
   10558:	10800710 	cmplti	r2,r2,28
   1055c:	103ff21e 	bne	r2,zero,10528 <__alt_data_end+0xffff0528>
        wbcoord(row, ZX, sprite);
        wbcoord(row, ZX + M + 1, sprite);
    }

    int tx = ZX;
   10560:	008001c4 	movi	r2,7
   10564:	e0bffe15 	stw	r2,-8(fp)
    int ty = 1;
   10568:	00800044 	movi	r2,1
   1056c:	e0bfff15 	stw	r2,-4(fp)

    // S
    for (int i = tx; i < tx + 4; i++){
   10570:	e0bffe17 	ldw	r2,-8(fp)
   10574:	e0bfef15 	stw	r2,-68(fp)
   10578:	00001306 	br	105c8 <initBoard+0x10c>
      wbcoord(ty, i, 3);
   1057c:	018000c4 	movi	r6,3
   10580:	e17fef17 	ldw	r5,-68(fp)
   10584:	e13fff17 	ldw	r4,-4(fp)
   10588:	00103200 	call	10320 <wbcoord>
      wbcoord(ty + 2, i, 3);
   1058c:	e0bfff17 	ldw	r2,-4(fp)
   10590:	10800084 	addi	r2,r2,2
   10594:	018000c4 	movi	r6,3
   10598:	e17fef17 	ldw	r5,-68(fp)
   1059c:	1009883a 	mov	r4,r2
   105a0:	00103200 	call	10320 <wbcoord>
      wbcoord(ty + 4, i, 3);
   105a4:	e0bfff17 	ldw	r2,-4(fp)
   105a8:	10800104 	addi	r2,r2,4
   105ac:	018000c4 	movi	r6,3
   105b0:	e17fef17 	ldw	r5,-68(fp)
   105b4:	1009883a 	mov	r4,r2
   105b8:	00103200 	call	10320 <wbcoord>

    int tx = ZX;
    int ty = 1;

    // S
    for (int i = tx; i < tx + 4; i++){
   105bc:	e0bfef17 	ldw	r2,-68(fp)
   105c0:	10800044 	addi	r2,r2,1
   105c4:	e0bfef15 	stw	r2,-68(fp)
   105c8:	e0bffe17 	ldw	r2,-8(fp)
   105cc:	10800104 	addi	r2,r2,4
   105d0:	e0ffef17 	ldw	r3,-68(fp)
   105d4:	18bfe916 	blt	r3,r2,1057c <__alt_data_end+0xffff057c>
      wbcoord(ty, i, 3);
      wbcoord(ty + 2, i, 3);
      wbcoord(ty + 4, i, 3);
    }
    wbcoord(ty + 1, tx, 3);
   105d8:	e0bfff17 	ldw	r2,-4(fp)
   105dc:	10800044 	addi	r2,r2,1
   105e0:	018000c4 	movi	r6,3
   105e4:	e17ffe17 	ldw	r5,-8(fp)
   105e8:	1009883a 	mov	r4,r2
   105ec:	00103200 	call	10320 <wbcoord>
    wbcoord(ty + 3, tx + 3, 3);
   105f0:	e0bfff17 	ldw	r2,-4(fp)
   105f4:	10c000c4 	addi	r3,r2,3
   105f8:	e0bffe17 	ldw	r2,-8(fp)
   105fc:	108000c4 	addi	r2,r2,3
   10600:	018000c4 	movi	r6,3
   10604:	100b883a 	mov	r5,r2
   10608:	1809883a 	mov	r4,r3
   1060c:	00103200 	call	10320 <wbcoord>

    tx += 5;
   10610:	e0bffe17 	ldw	r2,-8(fp)
   10614:	10800144 	addi	r2,r2,5
   10618:	e0bffe15 	stw	r2,-8(fp)

    // N
    for (int j = ty; j < ty + 5; j++){
   1061c:	e0bfff17 	ldw	r2,-4(fp)
   10620:	e0bff015 	stw	r2,-64(fp)
   10624:	00000d06 	br	1065c <initBoard+0x1a0>
      wbcoord(j, tx, 3);
   10628:	018000c4 	movi	r6,3
   1062c:	e17ffe17 	ldw	r5,-8(fp)
   10630:	e13ff017 	ldw	r4,-64(fp)
   10634:	00103200 	call	10320 <wbcoord>
      wbcoord(j, tx + 4, 3);
   10638:	e0bffe17 	ldw	r2,-8(fp)
   1063c:	10800104 	addi	r2,r2,4
   10640:	018000c4 	movi	r6,3
   10644:	100b883a 	mov	r5,r2
   10648:	e13ff017 	ldw	r4,-64(fp)
   1064c:	00103200 	call	10320 <wbcoord>
    wbcoord(ty + 3, tx + 3, 3);

    tx += 5;

    // N
    for (int j = ty; j < ty + 5; j++){
   10650:	e0bff017 	ldw	r2,-64(fp)
   10654:	10800044 	addi	r2,r2,1
   10658:	e0bff015 	stw	r2,-64(fp)
   1065c:	e0bfff17 	ldw	r2,-4(fp)
   10660:	10800144 	addi	r2,r2,5
   10664:	e0fff017 	ldw	r3,-64(fp)
   10668:	18bfef16 	blt	r3,r2,10628 <__alt_data_end+0xffff0628>
      wbcoord(j, tx, 3);
      wbcoord(j, tx + 4, 3);
    }
    for (int k = 1; k < 4; k++)wbcoord(ty + k, tx + k, 3);
   1066c:	00800044 	movi	r2,1
   10670:	e0bff115 	stw	r2,-60(fp)
   10674:	00000c06 	br	106a8 <initBoard+0x1ec>
   10678:	e0ffff17 	ldw	r3,-4(fp)
   1067c:	e0bff117 	ldw	r2,-60(fp)
   10680:	1889883a 	add	r4,r3,r2
   10684:	e0fffe17 	ldw	r3,-8(fp)
   10688:	e0bff117 	ldw	r2,-60(fp)
   1068c:	1885883a 	add	r2,r3,r2
   10690:	018000c4 	movi	r6,3
   10694:	100b883a 	mov	r5,r2
   10698:	00103200 	call	10320 <wbcoord>
   1069c:	e0bff117 	ldw	r2,-60(fp)
   106a0:	10800044 	addi	r2,r2,1
   106a4:	e0bff115 	stw	r2,-60(fp)
   106a8:	e0bff117 	ldw	r2,-60(fp)
   106ac:	10800110 	cmplti	r2,r2,4
   106b0:	103ff11e 	bne	r2,zero,10678 <__alt_data_end+0xffff0678>

    tx += 6;
   106b4:	e0bffe17 	ldw	r2,-8(fp)
   106b8:	10800184 	addi	r2,r2,6
   106bc:	e0bffe15 	stw	r2,-8(fp)

    // A
    for (int i = tx; i < tx + 4; i++){
   106c0:	e0bffe17 	ldw	r2,-8(fp)
   106c4:	e0bff215 	stw	r2,-56(fp)
   106c8:	00000d06 	br	10700 <initBoard+0x244>
      wbcoord(ty, i, 3);
   106cc:	018000c4 	movi	r6,3
   106d0:	e17ff217 	ldw	r5,-56(fp)
   106d4:	e13fff17 	ldw	r4,-4(fp)
   106d8:	00103200 	call	10320 <wbcoord>
      wbcoord(ty + 2, i, 3);
   106dc:	e0bfff17 	ldw	r2,-4(fp)
   106e0:	10800084 	addi	r2,r2,2
   106e4:	018000c4 	movi	r6,3
   106e8:	e17ff217 	ldw	r5,-56(fp)
   106ec:	1009883a 	mov	r4,r2
   106f0:	00103200 	call	10320 <wbcoord>
    for (int k = 1; k < 4; k++)wbcoord(ty + k, tx + k, 3);

    tx += 6;

    // A
    for (int i = tx; i < tx + 4; i++){
   106f4:	e0bff217 	ldw	r2,-56(fp)
   106f8:	10800044 	addi	r2,r2,1
   106fc:	e0bff215 	stw	r2,-56(fp)
   10700:	e0bffe17 	ldw	r2,-8(fp)
   10704:	10800104 	addi	r2,r2,4
   10708:	e0fff217 	ldw	r3,-56(fp)
   1070c:	18bfef16 	blt	r3,r2,106cc <__alt_data_end+0xffff06cc>
      wbcoord(ty, i, 3);
      wbcoord(ty + 2, i, 3);
    }
    for (int j = ty + 1; j < ty + 5; j++){
   10710:	e0bfff17 	ldw	r2,-4(fp)
   10714:	10800044 	addi	r2,r2,1
   10718:	e0bff315 	stw	r2,-52(fp)
   1071c:	00000d06 	br	10754 <initBoard+0x298>
      wbcoord(j, tx, 3);
   10720:	018000c4 	movi	r6,3
   10724:	e17ffe17 	ldw	r5,-8(fp)
   10728:	e13ff317 	ldw	r4,-52(fp)
   1072c:	00103200 	call	10320 <wbcoord>
      wbcoord(j, tx + 3, 3);
   10730:	e0bffe17 	ldw	r2,-8(fp)
   10734:	108000c4 	addi	r2,r2,3
   10738:	018000c4 	movi	r6,3
   1073c:	100b883a 	mov	r5,r2
   10740:	e13ff317 	ldw	r4,-52(fp)
   10744:	00103200 	call	10320 <wbcoord>
    // A
    for (int i = tx; i < tx + 4; i++){
      wbcoord(ty, i, 3);
      wbcoord(ty + 2, i, 3);
    }
    for (int j = ty + 1; j < ty + 5; j++){
   10748:	e0bff317 	ldw	r2,-52(fp)
   1074c:	10800044 	addi	r2,r2,1
   10750:	e0bff315 	stw	r2,-52(fp)
   10754:	e0bfff17 	ldw	r2,-4(fp)
   10758:	10800144 	addi	r2,r2,5
   1075c:	e0fff317 	ldw	r3,-52(fp)
   10760:	18bfef16 	blt	r3,r2,10720 <__alt_data_end+0xffff0720>
      wbcoord(j, tx, 3);
      wbcoord(j, tx + 3, 3);
    }

    tx += 5;
   10764:	e0bffe17 	ldw	r2,-8(fp)
   10768:	10800144 	addi	r2,r2,5
   1076c:	e0bffe15 	stw	r2,-8(fp)

    // K
    for (int j = ty; j < ty + 5; j++) wbcoord(j, tx, 3);
   10770:	e0bfff17 	ldw	r2,-4(fp)
   10774:	e0bff415 	stw	r2,-48(fp)
   10778:	00000706 	br	10798 <initBoard+0x2dc>
   1077c:	018000c4 	movi	r6,3
   10780:	e17ffe17 	ldw	r5,-8(fp)
   10784:	e13ff417 	ldw	r4,-48(fp)
   10788:	00103200 	call	10320 <wbcoord>
   1078c:	e0bff417 	ldw	r2,-48(fp)
   10790:	10800044 	addi	r2,r2,1
   10794:	e0bff415 	stw	r2,-48(fp)
   10798:	e0bfff17 	ldw	r2,-4(fp)
   1079c:	10800144 	addi	r2,r2,5
   107a0:	e0fff417 	ldw	r3,-48(fp)
   107a4:	18bff516 	blt	r3,r2,1077c <__alt_data_end+0xffff077c>
    for (int k = 1; k < 4; k++){
   107a8:	00800044 	movi	r2,1
   107ac:	e0bff515 	stw	r2,-44(fp)
   107b0:	00001706 	br	10810 <initBoard+0x354>
      wbcoord(ty + 3 - k, tx + k, 3);
   107b4:	e0bfff17 	ldw	r2,-4(fp)
   107b8:	10c000c4 	addi	r3,r2,3
   107bc:	e0bff517 	ldw	r2,-44(fp)
   107c0:	1889c83a 	sub	r4,r3,r2
   107c4:	e0fffe17 	ldw	r3,-8(fp)
   107c8:	e0bff517 	ldw	r2,-44(fp)
   107cc:	1885883a 	add	r2,r3,r2
   107d0:	018000c4 	movi	r6,3
   107d4:	100b883a 	mov	r5,r2
   107d8:	00103200 	call	10320 <wbcoord>
      wbcoord(ty + 1 + k, tx + k, 3);
   107dc:	e0bfff17 	ldw	r2,-4(fp)
   107e0:	10c00044 	addi	r3,r2,1
   107e4:	e0bff517 	ldw	r2,-44(fp)
   107e8:	1889883a 	add	r4,r3,r2
   107ec:	e0fffe17 	ldw	r3,-8(fp)
   107f0:	e0bff517 	ldw	r2,-44(fp)
   107f4:	1885883a 	add	r2,r3,r2
   107f8:	018000c4 	movi	r6,3
   107fc:	100b883a 	mov	r5,r2
   10800:	00103200 	call	10320 <wbcoord>

    tx += 5;

    // K
    for (int j = ty; j < ty + 5; j++) wbcoord(j, tx, 3);
    for (int k = 1; k < 4; k++){
   10804:	e0bff517 	ldw	r2,-44(fp)
   10808:	10800044 	addi	r2,r2,1
   1080c:	e0bff515 	stw	r2,-44(fp)
   10810:	e0bff517 	ldw	r2,-44(fp)
   10814:	10800110 	cmplti	r2,r2,4
   10818:	103fe61e 	bne	r2,zero,107b4 <__alt_data_end+0xffff07b4>
      wbcoord(ty + 3 - k, tx + k, 3);
      wbcoord(ty + 1 + k, tx + k, 3);
    }

    tx += 5;
   1081c:	e0bffe17 	ldw	r2,-8(fp)
   10820:	10800144 	addi	r2,r2,5
   10824:	e0bffe15 	stw	r2,-8(fp)

    // E
    for (int j = ty; j < ty + 5; j++) wbcoord(j, tx, 3);
   10828:	e0bfff17 	ldw	r2,-4(fp)
   1082c:	e0bff615 	stw	r2,-40(fp)
   10830:	00000706 	br	10850 <initBoard+0x394>
   10834:	018000c4 	movi	r6,3
   10838:	e17ffe17 	ldw	r5,-8(fp)
   1083c:	e13ff617 	ldw	r4,-40(fp)
   10840:	00103200 	call	10320 <wbcoord>
   10844:	e0bff617 	ldw	r2,-40(fp)
   10848:	10800044 	addi	r2,r2,1
   1084c:	e0bff615 	stw	r2,-40(fp)
   10850:	e0bfff17 	ldw	r2,-4(fp)
   10854:	10800144 	addi	r2,r2,5
   10858:	e0fff617 	ldw	r3,-40(fp)
   1085c:	18bff516 	blt	r3,r2,10834 <__alt_data_end+0xffff0834>
    for (int i = tx + 1; i < tx + 5; i++){
   10860:	e0bffe17 	ldw	r2,-8(fp)
   10864:	10800044 	addi	r2,r2,1
   10868:	e0bff715 	stw	r2,-36(fp)
   1086c:	00000d06 	br	108a4 <initBoard+0x3e8>
      wbcoord(ty, i, 3);
   10870:	018000c4 	movi	r6,3
   10874:	e17ff717 	ldw	r5,-36(fp)
   10878:	e13fff17 	ldw	r4,-4(fp)
   1087c:	00103200 	call	10320 <wbcoord>
      wbcoord(ty + 4, i, 3);
   10880:	e0bfff17 	ldw	r2,-4(fp)
   10884:	10800104 	addi	r2,r2,4
   10888:	018000c4 	movi	r6,3
   1088c:	e17ff717 	ldw	r5,-36(fp)
   10890:	1009883a 	mov	r4,r2
   10894:	00103200 	call	10320 <wbcoord>

    tx += 5;

    // E
    for (int j = ty; j < ty + 5; j++) wbcoord(j, tx, 3);
    for (int i = tx + 1; i < tx + 5; i++){
   10898:	e0bff717 	ldw	r2,-36(fp)
   1089c:	10800044 	addi	r2,r2,1
   108a0:	e0bff715 	stw	r2,-36(fp)
   108a4:	e0bffe17 	ldw	r2,-8(fp)
   108a8:	10800144 	addi	r2,r2,5
   108ac:	e0fff717 	ldw	r3,-36(fp)
   108b0:	18bfef16 	blt	r3,r2,10870 <__alt_data_end+0xffff0870>
      wbcoord(ty, i, 3);
      wbcoord(ty + 4, i, 3);
    }
    for (int i = tx + 1; i < tx + 4; i++) wbcoord(ty + 2, i, 3);    
   108b4:	e0bffe17 	ldw	r2,-8(fp)
   108b8:	10800044 	addi	r2,r2,1
   108bc:	e0bff815 	stw	r2,-32(fp)
   108c0:	00000906 	br	108e8 <initBoard+0x42c>
   108c4:	e0bfff17 	ldw	r2,-4(fp)
   108c8:	10800084 	addi	r2,r2,2
   108cc:	018000c4 	movi	r6,3
   108d0:	e17ff817 	ldw	r5,-32(fp)
   108d4:	1009883a 	mov	r4,r2
   108d8:	00103200 	call	10320 <wbcoord>
   108dc:	e0bff817 	ldw	r2,-32(fp)
   108e0:	10800044 	addi	r2,r2,1
   108e4:	e0bff815 	stw	r2,-32(fp)
   108e8:	e0bffe17 	ldw	r2,-8(fp)
   108ec:	10800104 	addi	r2,r2,4
   108f0:	e0fff817 	ldw	r3,-32(fp)
   108f4:	18bff316 	blt	r3,r2,108c4 <__alt_data_end+0xffff08c4>

    for (int i = 0; i < ZX; i++){
   108f8:	e03ff915 	stw	zero,-28(fp)
   108fc:	00000f06 	br	1093c <initBoard+0x480>
      for (int j = 0; j < HEIGHT; j++) wbcoord(j, i, 0);
   10900:	e03ffa15 	stw	zero,-24(fp)
   10904:	00000706 	br	10924 <initBoard+0x468>
   10908:	000d883a 	mov	r6,zero
   1090c:	e17ff917 	ldw	r5,-28(fp)
   10910:	e13ffa17 	ldw	r4,-24(fp)
   10914:	00103200 	call	10320 <wbcoord>
   10918:	e0bffa17 	ldw	r2,-24(fp)
   1091c:	10800044 	addi	r2,r2,1
   10920:	e0bffa15 	stw	r2,-24(fp)
   10924:	e0bffa17 	ldw	r2,-24(fp)
   10928:	10800810 	cmplti	r2,r2,32
   1092c:	103ff61e 	bne	r2,zero,10908 <__alt_data_end+0xffff0908>
      wbcoord(ty, i, 3);
      wbcoord(ty + 4, i, 3);
    }
    for (int i = tx + 1; i < tx + 4; i++) wbcoord(ty + 2, i, 3);    

    for (int i = 0; i < ZX; i++){
   10930:	e0bff917 	ldw	r2,-28(fp)
   10934:	10800044 	addi	r2,r2,1
   10938:	e0bff915 	stw	r2,-28(fp)
   1093c:	e0bff917 	ldw	r2,-28(fp)
   10940:	108001d0 	cmplti	r2,r2,7
   10944:	103fee1e 	bne	r2,zero,10900 <__alt_data_end+0xffff0900>
      for (int j = 0; j < HEIGHT; j++) wbcoord(j, i, 0);
    }

    for (int i = ZX + M + 2; i < WIDTH; i++){
   10948:	00800804 	movi	r2,32
   1094c:	e0bffb15 	stw	r2,-20(fp)
   10950:	00000f06 	br	10990 <initBoard+0x4d4>
      for (int j = 0; j < HEIGHT; j++) wbcoord(j, i, 0);
   10954:	e03ffc15 	stw	zero,-16(fp)
   10958:	00000706 	br	10978 <initBoard+0x4bc>
   1095c:	000d883a 	mov	r6,zero
   10960:	e17ffb17 	ldw	r5,-20(fp)
   10964:	e13ffc17 	ldw	r4,-16(fp)
   10968:	00103200 	call	10320 <wbcoord>
   1096c:	e0bffc17 	ldw	r2,-16(fp)
   10970:	10800044 	addi	r2,r2,1
   10974:	e0bffc15 	stw	r2,-16(fp)
   10978:	e0bffc17 	ldw	r2,-16(fp)
   1097c:	10800810 	cmplti	r2,r2,32
   10980:	103ff61e 	bne	r2,zero,1095c <__alt_data_end+0xffff095c>

    for (int i = 0; i < ZX; i++){
      for (int j = 0; j < HEIGHT; j++) wbcoord(j, i, 0);
    }

    for (int i = ZX + M + 2; i < WIDTH; i++){
   10984:	e0bffb17 	ldw	r2,-20(fp)
   10988:	10800044 	addi	r2,r2,1
   1098c:	e0bffb15 	stw	r2,-20(fp)
   10990:	e0bffb17 	ldw	r2,-20(fp)
   10994:	10800a10 	cmplti	r2,r2,40
   10998:	103fee1e 	bne	r2,zero,10954 <__alt_data_end+0xffff0954>
      for (int j = 0; j < HEIGHT; j++) wbcoord(j, i, 0);
    }    

    wbcoord(HEIGHT - 6, 7, 2);
   1099c:	01800084 	movi	r6,2
   109a0:	014001c4 	movi	r5,7
   109a4:	01000684 	movi	r4,26
   109a8:	00103200 	call	10320 <wbcoord>
    wbcoord(HEIGHT - 5, 7, 2);
   109ac:	01800084 	movi	r6,2
   109b0:	014001c4 	movi	r5,7
   109b4:	010006c4 	movi	r4,27
   109b8:	00103200 	call	10320 <wbcoord>
}
   109bc:	0001883a 	nop
   109c0:	e037883a 	mov	sp,fp
   109c4:	dfc00117 	ldw	ra,4(sp)
   109c8:	df000017 	ldw	fp,0(sp)
   109cc:	dec00204 	addi	sp,sp,8
   109d0:	f800283a 	ret

000109d4 <init>:

void init(){
   109d4:	defff904 	addi	sp,sp,-28
   109d8:	dfc00615 	stw	ra,24(sp)
   109dc:	df000515 	stw	fp,20(sp)
   109e0:	df000504 	addi	fp,sp,20
    for (int i = 0x00000000; i < 0x00000040; i++){
   109e4:	e03ffb15 	stw	zero,-20(fp)
   109e8:	00000606 	br	10a04 <init+0x30>
        wc(i, 0x000000);
   109ec:	000b883a 	mov	r5,zero
   109f0:	e13ffb17 	ldw	r4,-20(fp)
   109f4:	00102540 	call	10254 <wc>
    wbcoord(HEIGHT - 6, 7, 2);
    wbcoord(HEIGHT - 5, 7, 2);
}

void init(){
    for (int i = 0x00000000; i < 0x00000040; i++){
   109f8:	e0bffb17 	ldw	r2,-20(fp)
   109fc:	10800044 	addi	r2,r2,1
   10a00:	e0bffb15 	stw	r2,-20(fp)
   10a04:	e0bffb17 	ldw	r2,-20(fp)
   10a08:	10801010 	cmplti	r2,r2,64
   10a0c:	103ff71e 	bne	r2,zero,109ec <__alt_data_end+0xffff09ec>
        wc(i, 0x000000);
    }
    
    for (int i = 0x00000000; i < 0x00002000; i++){
   10a10:	e03ffc15 	stw	zero,-16(fp)
   10a14:	00000606 	br	10a30 <init+0x5c>
	    ws(i, 0);
   10a18:	000b883a 	mov	r5,zero
   10a1c:	e13ffc17 	ldw	r4,-16(fp)
   10a20:	00102980 	call	10298 <ws>
void init(){
    for (int i = 0x00000000; i < 0x00000040; i++){
        wc(i, 0x000000);
    }
    
    for (int i = 0x00000000; i < 0x00002000; i++){
   10a24:	e0bffc17 	ldw	r2,-16(fp)
   10a28:	10800044 	addi	r2,r2,1
   10a2c:	e0bffc15 	stw	r2,-16(fp)
   10a30:	e0bffc17 	ldw	r2,-16(fp)
   10a34:	10880010 	cmplti	r2,r2,8192
   10a38:	103ff71e 	bne	r2,zero,10a18 <__alt_data_end+0xffff0a18>
	    ws(i, 0);
    }

    clearScreen();
   10a3c:	00103c80 	call	103c8 <clearScreen>

    wc(1, 0xffffff);
   10a40:	01404034 	movhi	r5,256
   10a44:	297fffc4 	addi	r5,r5,-1
   10a48:	01000044 	movi	r4,1
   10a4c:	00102540 	call	10254 <wc>
    wc(2, 0xff0000);
   10a50:	01403ff4 	movhi	r5,255
   10a54:	01000084 	movi	r4,2
   10a58:	00102540 	call	10254 <wc>
    wc(3, 0x00ff00);
   10a5c:	017fc014 	movui	r5,65280
   10a60:	010000c4 	movi	r4,3
   10a64:	00102540 	call	10254 <wc>

    for (int i = 0; i <= 4; i++){
   10a68:	e03ffd15 	stw	zero,-12(fp)
   10a6c:	00002d06 	br	10b24 <init+0x150>
        int start = SPRITE_SIZE * i;
   10a70:	e0bffd17 	ldw	r2,-12(fp)
   10a74:	1004923a 	slli	r2,r2,8
   10a78:	e0bfff15 	stw	r2,-4(fp)
        for (int j = start; j < start + SPRITE_SIZE; j++){
   10a7c:	e0bfff17 	ldw	r2,-4(fp)
   10a80:	e0bffe15 	stw	r2,-8(fp)
   10a84:	00002006 	br	10b08 <init+0x134>
            if (i == 0) ws(j, 0);
   10a88:	e0bffd17 	ldw	r2,-12(fp)
   10a8c:	1000031e 	bne	r2,zero,10a9c <init+0xc8>
   10a90:	000b883a 	mov	r5,zero
   10a94:	e13ffe17 	ldw	r4,-8(fp)
   10a98:	00102980 	call	10298 <ws>
            if (i == 1) ws(j, 1);
   10a9c:	e0bffd17 	ldw	r2,-12(fp)
   10aa0:	10800058 	cmpnei	r2,r2,1
   10aa4:	1000031e 	bne	r2,zero,10ab4 <init+0xe0>
   10aa8:	01400044 	movi	r5,1
   10aac:	e13ffe17 	ldw	r4,-8(fp)
   10ab0:	00102980 	call	10298 <ws>
            if (i == 2) ws(j, 1);
   10ab4:	e0bffd17 	ldw	r2,-12(fp)
   10ab8:	10800098 	cmpnei	r2,r2,2
   10abc:	1000031e 	bne	r2,zero,10acc <init+0xf8>
   10ac0:	01400044 	movi	r5,1
   10ac4:	e13ffe17 	ldw	r4,-8(fp)
   10ac8:	00102980 	call	10298 <ws>
            if (i == 3) ws(j, 2);
   10acc:	e0bffd17 	ldw	r2,-12(fp)
   10ad0:	108000d8 	cmpnei	r2,r2,3
   10ad4:	1000031e 	bne	r2,zero,10ae4 <init+0x110>
   10ad8:	01400084 	movi	r5,2
   10adc:	e13ffe17 	ldw	r4,-8(fp)
   10ae0:	00102980 	call	10298 <ws>
            if (i == 4) ws(j, 3);
   10ae4:	e0bffd17 	ldw	r2,-12(fp)
   10ae8:	10800118 	cmpnei	r2,r2,4
   10aec:	1000031e 	bne	r2,zero,10afc <init+0x128>
   10af0:	014000c4 	movi	r5,3
   10af4:	e13ffe17 	ldw	r4,-8(fp)
   10af8:	00102980 	call	10298 <ws>
    wc(2, 0xff0000);
    wc(3, 0x00ff00);

    for (int i = 0; i <= 4; i++){
        int start = SPRITE_SIZE * i;
        for (int j = start; j < start + SPRITE_SIZE; j++){
   10afc:	e0bffe17 	ldw	r2,-8(fp)
   10b00:	10800044 	addi	r2,r2,1
   10b04:	e0bffe15 	stw	r2,-8(fp)
   10b08:	e0bfff17 	ldw	r2,-4(fp)
   10b0c:	10804004 	addi	r2,r2,256
   10b10:	e0fffe17 	ldw	r3,-8(fp)
   10b14:	18bfdc16 	blt	r3,r2,10a88 <__alt_data_end+0xffff0a88>

    wc(1, 0xffffff);
    wc(2, 0xff0000);
    wc(3, 0x00ff00);

    for (int i = 0; i <= 4; i++){
   10b18:	e0bffd17 	ldw	r2,-12(fp)
   10b1c:	10800044 	addi	r2,r2,1
   10b20:	e0bffd15 	stw	r2,-12(fp)
   10b24:	e0bffd17 	ldw	r2,-12(fp)
   10b28:	10800150 	cmplti	r2,r2,5
   10b2c:	103fd01e 	bne	r2,zero,10a70 <__alt_data_end+0xffff0a70>
            if (i == 3) ws(j, 2);
            if (i == 4) ws(j, 3);
        }
    }

    initBoard();
   10b30:	00104bc0 	call	104bc <initBoard>
}
   10b34:	0001883a 	nop
   10b38:	e037883a 	mov	sp,fp
   10b3c:	dfc00117 	ldw	ra,4(sp)
   10b40:	df000017 	ldw	fp,0(sp)
   10b44:	dec00204 	addi	sp,sp,8
   10b48:	f800283a 	ret

00010b4c <snakeInit>:

void snakeInit(){
   10b4c:	defffc04 	addi	sp,sp,-16
   10b50:	df000315 	stw	fp,12(sp)
   10b54:	df000304 	addi	fp,sp,12
    for (int i = 0; i < N; i++){
   10b58:	e03ffd15 	stw	zero,-12(fp)
   10b5c:	00001506 	br	10bb4 <snakeInit+0x68>
        for (int j = 0; j < M; j++){
   10b60:	e03ffe15 	stw	zero,-8(fp)
   10b64:	00000d06 	br	10b9c <snakeInit+0x50>
            Field[i][j] = 0;
   10b68:	00800074 	movhi	r2,1
   10b6c:	1093ec04 	addi	r2,r2,20400
   10b70:	e0fffd17 	ldw	r3,-12(fp)
   10b74:	190005e4 	muli	r4,r3,23
   10b78:	e0fffe17 	ldw	r3,-8(fp)
   10b7c:	20c7883a 	add	r3,r4,r3
   10b80:	18c7883a 	add	r3,r3,r3
   10b84:	18c7883a 	add	r3,r3,r3
   10b88:	10c5883a 	add	r2,r2,r3
   10b8c:	10000015 	stw	zero,0(r2)
    initBoard();
}

void snakeInit(){
    for (int i = 0; i < N; i++){
        for (int j = 0; j < M; j++){
   10b90:	e0bffe17 	ldw	r2,-8(fp)
   10b94:	10800044 	addi	r2,r2,1
   10b98:	e0bffe15 	stw	r2,-8(fp)
   10b9c:	e0bffe17 	ldw	r2,-8(fp)
   10ba0:	108005d0 	cmplti	r2,r2,23
   10ba4:	103ff01e 	bne	r2,zero,10b68 <__alt_data_end+0xffff0b68>

    initBoard();
}

void snakeInit(){
    for (int i = 0; i < N; i++){
   10ba8:	e0bffd17 	ldw	r2,-12(fp)
   10bac:	10800044 	addi	r2,r2,1
   10bb0:	e0bffd15 	stw	r2,-12(fp)
   10bb4:	e0bffd17 	ldw	r2,-12(fp)
   10bb8:	108004d0 	cmplti	r2,r2,19
   10bbc:	103fe81e 	bne	r2,zero,10b60 <__alt_data_end+0xffff0b60>
        for (int j = 0; j < M; j++){
            Field[i][j] = 0;
        }
    }

    x = N / 2;
   10bc0:	00800244 	movi	r2,9
   10bc4:	d0a1a415 	stw	r2,-31088(gp)
    y = M / 2;
   10bc8:	008002c4 	movi	r2,11
   10bcc:	d0a1ab15 	stw	r2,-31060(gp)

    gy = y;
   10bd0:	d0a1ab17 	ldw	r2,-31060(gp)
   10bd4:	d0a1a615 	stw	r2,-31080(gp)
    head = 5;
   10bd8:	00800144 	movi	r2,5
   10bdc:	d0a1aa15 	stw	r2,-31064(gp)
    tail = 1;
   10be0:	00800044 	movi	r2,1
   10be4:	d0a1a915 	stw	r2,-31068(gp)
    game = 0; // 0 = running, 1 = end game
   10be8:	d021a515 	stw	zero,-31084(gp)
    food = 0;
   10bec:	d021a215 	stw	zero,-31096(gp)
    
    direction = East;
   10bf0:	00800044 	movi	r2,1
   10bf4:	d0a1a715 	stw	r2,-31076(gp)

    score = 0;
   10bf8:	d021a815 	stw	zero,-31072(gp)
    speed = 150;
   10bfc:	00802584 	movi	r2,150
   10c00:	d0a1ac15 	stw	r2,-31056(gp)

    for (int i = 0; i < head; i++){
   10c04:	e03fff15 	stw	zero,-4(fp)
   10c08:	00001406 	br	10c5c <snakeInit+0x110>
        gy++;
   10c0c:	d0a1a617 	ldw	r2,-31080(gp)
   10c10:	10800044 	addi	r2,r2,1
   10c14:	d0a1a615 	stw	r2,-31080(gp)
        Field[x][gy - head] = i + 1;
   10c18:	d161a417 	ldw	r5,-31088(gp)
   10c1c:	d0e1a617 	ldw	r3,-31080(gp)
   10c20:	d0a1aa17 	ldw	r2,-31064(gp)
   10c24:	1887c83a 	sub	r3,r3,r2
   10c28:	e0bfff17 	ldw	r2,-4(fp)
   10c2c:	11000044 	addi	r4,r2,1
   10c30:	00800074 	movhi	r2,1
   10c34:	1093ec04 	addi	r2,r2,20400
   10c38:	294005e4 	muli	r5,r5,23
   10c3c:	28c7883a 	add	r3,r5,r3
   10c40:	18c7883a 	add	r3,r3,r3
   10c44:	18c7883a 	add	r3,r3,r3
   10c48:	10c5883a 	add	r2,r2,r3
   10c4c:	11000015 	stw	r4,0(r2)
    direction = East;

    score = 0;
    speed = 150;

    for (int i = 0; i < head; i++){
   10c50:	e0bfff17 	ldw	r2,-4(fp)
   10c54:	10800044 	addi	r2,r2,1
   10c58:	e0bfff15 	stw	r2,-4(fp)
   10c5c:	d0a1aa17 	ldw	r2,-31064(gp)
   10c60:	e0ffff17 	ldw	r3,-4(fp)
   10c64:	18bfe916 	blt	r3,r2,10c0c <__alt_data_end+0xffff0c0c>
        gy++;
        Field[x][gy - head] = i + 1;
    }
}
   10c68:	0001883a 	nop
   10c6c:	e037883a 	mov	sp,fp
   10c70:	df000017 	ldw	fp,0(sp)
   10c74:	dec00104 	addi	sp,sp,4
   10c78:	f800283a 	ret

00010c7c <show>:
    -> Field[i][j] == 0 => empty square
    -> Field[i][j] > 0 && Field[i][j] != head => body
    -> Field[i][j] == head => head
    -> Field[i][j] == -1 => food
*/
void show(){
   10c7c:	defffa04 	addi	sp,sp,-24
   10c80:	dfc00515 	stw	ra,20(sp)
   10c84:	df000415 	stw	fp,16(sp)
   10c88:	df000404 	addi	fp,sp,16
    clearBoard();
   10c8c:	001041c0 	call	1041c <clearBoard>
    //initBoard();

    for (int i = 0; i < N; i++){
   10c90:	e03ffc15 	stw	zero,-16(fp)
   10c94:	00004b06 	br	10dc4 <show+0x148>
        for (int j = 0; j < M; j++){
   10c98:	e03ffd15 	stw	zero,-12(fp)
   10c9c:	00004306 	br	10dac <show+0x130>
            int py = i + 1 + ZY;
   10ca0:	e0bffc17 	ldw	r2,-16(fp)
   10ca4:	10800204 	addi	r2,r2,8
   10ca8:	e0bffe15 	stw	r2,-8(fp)
            int px = j + 1 + ZX;
   10cac:	e0bffd17 	ldw	r2,-12(fp)
   10cb0:	10800204 	addi	r2,r2,8
   10cb4:	e0bfff15 	stw	r2,-4(fp)
            if (Field[i][j] == 0) wbcoord(py, px, 0); // empty square
   10cb8:	00800074 	movhi	r2,1
   10cbc:	1093ec04 	addi	r2,r2,20400
   10cc0:	e0fffc17 	ldw	r3,-16(fp)
   10cc4:	190005e4 	muli	r4,r3,23
   10cc8:	e0fffd17 	ldw	r3,-12(fp)
   10ccc:	20c7883a 	add	r3,r4,r3
   10cd0:	18c7883a 	add	r3,r3,r3
   10cd4:	18c7883a 	add	r3,r3,r3
   10cd8:	10c5883a 	add	r2,r2,r3
   10cdc:	10800017 	ldw	r2,0(r2)
   10ce0:	1000041e 	bne	r2,zero,10cf4 <show+0x78>
   10ce4:	000d883a 	mov	r6,zero
   10ce8:	e17fff17 	ldw	r5,-4(fp)
   10cec:	e13ffe17 	ldw	r4,-8(fp)
   10cf0:	00103200 	call	10320 <wbcoord>
            if (Field[i][j] > 0 || Field[i][j] == head) wbcoord(py, px, 2); // snake
   10cf4:	00800074 	movhi	r2,1
   10cf8:	1093ec04 	addi	r2,r2,20400
   10cfc:	e0fffc17 	ldw	r3,-16(fp)
   10d00:	190005e4 	muli	r4,r3,23
   10d04:	e0fffd17 	ldw	r3,-12(fp)
   10d08:	20c7883a 	add	r3,r4,r3
   10d0c:	18c7883a 	add	r3,r3,r3
   10d10:	18c7883a 	add	r3,r3,r3
   10d14:	10c5883a 	add	r2,r2,r3
   10d18:	10800017 	ldw	r2,0(r2)
   10d1c:	00800c16 	blt	zero,r2,10d50 <show+0xd4>
   10d20:	00800074 	movhi	r2,1
   10d24:	1093ec04 	addi	r2,r2,20400
   10d28:	e0fffc17 	ldw	r3,-16(fp)
   10d2c:	190005e4 	muli	r4,r3,23
   10d30:	e0fffd17 	ldw	r3,-12(fp)
   10d34:	20c7883a 	add	r3,r4,r3
   10d38:	18c7883a 	add	r3,r3,r3
   10d3c:	18c7883a 	add	r3,r3,r3
   10d40:	10c5883a 	add	r2,r2,r3
   10d44:	10c00017 	ldw	r3,0(r2)
   10d48:	d0a1aa17 	ldw	r2,-31064(gp)
   10d4c:	1880041e 	bne	r3,r2,10d60 <show+0xe4>
   10d50:	01800084 	movi	r6,2
   10d54:	e17fff17 	ldw	r5,-4(fp)
   10d58:	e13ffe17 	ldw	r4,-8(fp)
   10d5c:	00103200 	call	10320 <wbcoord>
            if (Field[i][j] == -1) wbcoord(py, px, 3); // food
   10d60:	00800074 	movhi	r2,1
   10d64:	1093ec04 	addi	r2,r2,20400
   10d68:	e0fffc17 	ldw	r3,-16(fp)
   10d6c:	190005e4 	muli	r4,r3,23
   10d70:	e0fffd17 	ldw	r3,-12(fp)
   10d74:	20c7883a 	add	r3,r4,r3
   10d78:	18c7883a 	add	r3,r3,r3
   10d7c:	18c7883a 	add	r3,r3,r3
   10d80:	10c5883a 	add	r2,r2,r3
   10d84:	10800017 	ldw	r2,0(r2)
   10d88:	10bfffd8 	cmpnei	r2,r2,-1
   10d8c:	1000041e 	bne	r2,zero,10da0 <show+0x124>
   10d90:	018000c4 	movi	r6,3
   10d94:	e17fff17 	ldw	r5,-4(fp)
   10d98:	e13ffe17 	ldw	r4,-8(fp)
   10d9c:	00103200 	call	10320 <wbcoord>
void show(){
    clearBoard();
    //initBoard();

    for (int i = 0; i < N; i++){
        for (int j = 0; j < M; j++){
   10da0:	e0bffd17 	ldw	r2,-12(fp)
   10da4:	10800044 	addi	r2,r2,1
   10da8:	e0bffd15 	stw	r2,-12(fp)
   10dac:	e0bffd17 	ldw	r2,-12(fp)
   10db0:	108005d0 	cmplti	r2,r2,23
   10db4:	103fba1e 	bne	r2,zero,10ca0 <__alt_data_end+0xffff0ca0>
*/
void show(){
    clearBoard();
    //initBoard();

    for (int i = 0; i < N; i++){
   10db8:	e0bffc17 	ldw	r2,-16(fp)
   10dbc:	10800044 	addi	r2,r2,1
   10dc0:	e0bffc15 	stw	r2,-16(fp)
   10dc4:	e0bffc17 	ldw	r2,-16(fp)
   10dc8:	108004d0 	cmplti	r2,r2,19
   10dcc:	103fb21e 	bne	r2,zero,10c98 <__alt_data_end+0xffff0c98>
            if (Field[i][j] == 0) wbcoord(py, px, 0); // empty square
            if (Field[i][j] > 0 || Field[i][j] == head) wbcoord(py, px, 2); // snake
            if (Field[i][j] == -1) wbcoord(py, px, 3); // food
        }
    }
}
   10dd0:	0001883a 	nop
   10dd4:	e037883a 	mov	sp,fp
   10dd8:	dfc00117 	ldw	ra,4(sp)
   10ddc:	df000017 	ldw	fp,0(sp)
   10de0:	dec00204 	addi	sp,sp,8
   10de4:	f800283a 	ret

00010de8 <random>:

void random(){
   10de8:	defffe04 	addi	sp,sp,-8
   10dec:	dfc00115 	stw	ra,4(sp)
   10df0:	df000015 	stw	fp,0(sp)
   10df4:	d839883a 	mov	fp,sp
    srand(time(0));
   10df8:	0009883a 	mov	r4,zero
   10dfc:	0011d880 	call	11d88 <time>
   10e00:	1009883a 	mov	r4,r2
   10e04:	0011d0c0 	call	11d0c <srand>
    a = 1 + rand() % (N - 2); // random num 1->18
   10e08:	0011d240 	call	11d24 <rand>
   10e0c:	01400444 	movi	r5,17
   10e10:	1009883a 	mov	r4,r2
   10e14:	0011b900 	call	11b90 <__modsi3>
   10e18:	10800044 	addi	r2,r2,1
   10e1c:	d0a1ad15 	stw	r2,-31052(gp)
    b = 1 + rand() % (M - 2);
   10e20:	0011d240 	call	11d24 <rand>
   10e24:	01400544 	movi	r5,21
   10e28:	1009883a 	mov	r4,r2
   10e2c:	0011b900 	call	11b90 <__modsi3>
   10e30:	10800044 	addi	r2,r2,1
   10e34:	d0a1a315 	stw	r2,-31092(gp)

    if (food == 0 && Field[a][b] == 0){ // als er geen eten is
   10e38:	d0a1a217 	ldw	r2,-31096(gp)
   10e3c:	1000201e 	bne	r2,zero,10ec0 <random+0xd8>
   10e40:	d121ad17 	ldw	r4,-31052(gp)
   10e44:	d0e1a317 	ldw	r3,-31092(gp)
   10e48:	00800074 	movhi	r2,1
   10e4c:	1093ec04 	addi	r2,r2,20400
   10e50:	210005e4 	muli	r4,r4,23
   10e54:	20c7883a 	add	r3,r4,r3
   10e58:	18c7883a 	add	r3,r3,r3
   10e5c:	18c7883a 	add	r3,r3,r3
   10e60:	10c5883a 	add	r2,r2,r3
   10e64:	10800017 	ldw	r2,0(r2)
   10e68:	1000151e 	bne	r2,zero,10ec0 <random+0xd8>
        Field[a][b] = -1;
   10e6c:	d121ad17 	ldw	r4,-31052(gp)
   10e70:	d0e1a317 	ldw	r3,-31092(gp)
   10e74:	00800074 	movhi	r2,1
   10e78:	1093ec04 	addi	r2,r2,20400
   10e7c:	210005e4 	muli	r4,r4,23
   10e80:	20c7883a 	add	r3,r4,r3
   10e84:	18c7883a 	add	r3,r3,r3
   10e88:	18c7883a 	add	r3,r3,r3
   10e8c:	10c5883a 	add	r2,r2,r3
   10e90:	00ffffc4 	movi	r3,-1
   10e94:	10c00015 	stw	r3,0(r2)
        food = 1;
   10e98:	00800044 	movi	r2,1
   10e9c:	d0a1a215 	stw	r2,-31096(gp)

        if (speed > 70 && score != 0) speed -= 5;
   10ea0:	d0a1ac17 	ldw	r2,-31056(gp)
   10ea4:	108011d0 	cmplti	r2,r2,71
   10ea8:	1000051e 	bne	r2,zero,10ec0 <random+0xd8>
   10eac:	d0a1a817 	ldw	r2,-31072(gp)
   10eb0:	10000326 	beq	r2,zero,10ec0 <random+0xd8>
   10eb4:	d0a1ac17 	ldw	r2,-31056(gp)
   10eb8:	10bffec4 	addi	r2,r2,-5
   10ebc:	d0a1ac15 	stw	r2,-31056(gp)
    }
}
   10ec0:	0001883a 	nop
   10ec4:	e037883a 	mov	sp,fp
   10ec8:	dfc00117 	ldw	ra,4(sp)
   10ecc:	df000017 	ldw	fp,0(sp)
   10ed0:	dec00204 	addi	sp,sp,8
   10ed4:	f800283a 	ret

00010ed8 <gameOver>:

void gameOver(){
   10ed8:	deffe504 	addi	sp,sp,-108
   10edc:	dfc01a15 	stw	ra,104(sp)
   10ee0:	df001915 	stw	fp,100(sp)
   10ee4:	df001904 	addi	fp,sp,100
    clearBoard();
   10ee8:	001041c0 	call	1041c <clearBoard>

    int tx = ZX + 2;
   10eec:	00800244 	movi	r2,9
   10ef0:	e0bffe15 	stw	r2,-8(fp)
    int ty = ZY + 3;
   10ef4:	00800284 	movi	r2,10
   10ef8:	e0bfff15 	stw	r2,-4(fp)

    // G
    for (int i = tx; i < tx + 4; i++) {
   10efc:	e0bffe17 	ldw	r2,-8(fp)
   10f00:	e0bfe715 	stw	r2,-100(fp)
   10f04:	00000d06 	br	10f3c <gameOver+0x64>
      wbcoord(ty, i, 3);
   10f08:	018000c4 	movi	r6,3
   10f0c:	e17fe717 	ldw	r5,-100(fp)
   10f10:	e13fff17 	ldw	r4,-4(fp)
   10f14:	00103200 	call	10320 <wbcoord>
      wbcoord(ty + 4, i, 3);
   10f18:	e0bfff17 	ldw	r2,-4(fp)
   10f1c:	10800104 	addi	r2,r2,4
   10f20:	018000c4 	movi	r6,3
   10f24:	e17fe717 	ldw	r5,-100(fp)
   10f28:	1009883a 	mov	r4,r2
   10f2c:	00103200 	call	10320 <wbcoord>

    int tx = ZX + 2;
    int ty = ZY + 3;

    // G
    for (int i = tx; i < tx + 4; i++) {
   10f30:	e0bfe717 	ldw	r2,-100(fp)
   10f34:	10800044 	addi	r2,r2,1
   10f38:	e0bfe715 	stw	r2,-100(fp)
   10f3c:	e0bffe17 	ldw	r2,-8(fp)
   10f40:	10800104 	addi	r2,r2,4
   10f44:	e0ffe717 	ldw	r3,-100(fp)
   10f48:	18bfef16 	blt	r3,r2,10f08 <__alt_data_end+0xffff0f08>
      wbcoord(ty, i, 3);
      wbcoord(ty + 4, i, 3);
    }

    for (int j = ty + 1; j < ty + 4; j++) wbcoord(j, tx, 3);
   10f4c:	e0bfff17 	ldw	r2,-4(fp)
   10f50:	10800044 	addi	r2,r2,1
   10f54:	e0bfe815 	stw	r2,-96(fp)
   10f58:	00000706 	br	10f78 <gameOver+0xa0>
   10f5c:	018000c4 	movi	r6,3
   10f60:	e17ffe17 	ldw	r5,-8(fp)
   10f64:	e13fe817 	ldw	r4,-96(fp)
   10f68:	00103200 	call	10320 <wbcoord>
   10f6c:	e0bfe817 	ldw	r2,-96(fp)
   10f70:	10800044 	addi	r2,r2,1
   10f74:	e0bfe815 	stw	r2,-96(fp)
   10f78:	e0bfff17 	ldw	r2,-4(fp)
   10f7c:	10800104 	addi	r2,r2,4
   10f80:	e0ffe817 	ldw	r3,-96(fp)
   10f84:	18bff516 	blt	r3,r2,10f5c <__alt_data_end+0xffff0f5c>
    for (int j = ty + 2; j < ty + 4; j++) wbcoord(j, tx + 3, 3);
   10f88:	e0bfff17 	ldw	r2,-4(fp)
   10f8c:	10800084 	addi	r2,r2,2
   10f90:	e0bfe915 	stw	r2,-92(fp)
   10f94:	00000906 	br	10fbc <gameOver+0xe4>
   10f98:	e0bffe17 	ldw	r2,-8(fp)
   10f9c:	108000c4 	addi	r2,r2,3
   10fa0:	018000c4 	movi	r6,3
   10fa4:	100b883a 	mov	r5,r2
   10fa8:	e13fe917 	ldw	r4,-92(fp)
   10fac:	00103200 	call	10320 <wbcoord>
   10fb0:	e0bfe917 	ldw	r2,-92(fp)
   10fb4:	10800044 	addi	r2,r2,1
   10fb8:	e0bfe915 	stw	r2,-92(fp)
   10fbc:	e0bfff17 	ldw	r2,-4(fp)
   10fc0:	10800104 	addi	r2,r2,4
   10fc4:	e0ffe917 	ldw	r3,-92(fp)
   10fc8:	18bff316 	blt	r3,r2,10f98 <__alt_data_end+0xffff0f98>
    wbcoord(ty + 2, tx + 2, 3);
   10fcc:	e0bfff17 	ldw	r2,-4(fp)
   10fd0:	10c00084 	addi	r3,r2,2
   10fd4:	e0bffe17 	ldw	r2,-8(fp)
   10fd8:	10800084 	addi	r2,r2,2
   10fdc:	018000c4 	movi	r6,3
   10fe0:	100b883a 	mov	r5,r2
   10fe4:	1809883a 	mov	r4,r3
   10fe8:	00103200 	call	10320 <wbcoord>

    tx += 5;
   10fec:	e0bffe17 	ldw	r2,-8(fp)
   10ff0:	10800144 	addi	r2,r2,5
   10ff4:	e0bffe15 	stw	r2,-8(fp)
    
    // A
    for (int i = tx; i < tx + 4; i++){
   10ff8:	e0bffe17 	ldw	r2,-8(fp)
   10ffc:	e0bfea15 	stw	r2,-88(fp)
   11000:	00000d06 	br	11038 <gameOver+0x160>
      wbcoord(ty, i, 3);
   11004:	018000c4 	movi	r6,3
   11008:	e17fea17 	ldw	r5,-88(fp)
   1100c:	e13fff17 	ldw	r4,-4(fp)
   11010:	00103200 	call	10320 <wbcoord>
      wbcoord(ty + 2, i, 3);
   11014:	e0bfff17 	ldw	r2,-4(fp)
   11018:	10800084 	addi	r2,r2,2
   1101c:	018000c4 	movi	r6,3
   11020:	e17fea17 	ldw	r5,-88(fp)
   11024:	1009883a 	mov	r4,r2
   11028:	00103200 	call	10320 <wbcoord>
    wbcoord(ty + 2, tx + 2, 3);

    tx += 5;
    
    // A
    for (int i = tx; i < tx + 4; i++){
   1102c:	e0bfea17 	ldw	r2,-88(fp)
   11030:	10800044 	addi	r2,r2,1
   11034:	e0bfea15 	stw	r2,-88(fp)
   11038:	e0bffe17 	ldw	r2,-8(fp)
   1103c:	10800104 	addi	r2,r2,4
   11040:	e0ffea17 	ldw	r3,-88(fp)
   11044:	18bfef16 	blt	r3,r2,11004 <__alt_data_end+0xffff1004>
      wbcoord(ty, i, 3);
      wbcoord(ty + 2, i, 3);
    }
    for (int j = ty + 1; j < ty + 5; j++){
   11048:	e0bfff17 	ldw	r2,-4(fp)
   1104c:	10800044 	addi	r2,r2,1
   11050:	e0bfeb15 	stw	r2,-84(fp)
   11054:	00000d06 	br	1108c <gameOver+0x1b4>
      wbcoord(j, tx, 3);
   11058:	018000c4 	movi	r6,3
   1105c:	e17ffe17 	ldw	r5,-8(fp)
   11060:	e13feb17 	ldw	r4,-84(fp)
   11064:	00103200 	call	10320 <wbcoord>
      wbcoord(j, tx + 3, 3);
   11068:	e0bffe17 	ldw	r2,-8(fp)
   1106c:	108000c4 	addi	r2,r2,3
   11070:	018000c4 	movi	r6,3
   11074:	100b883a 	mov	r5,r2
   11078:	e13feb17 	ldw	r4,-84(fp)
   1107c:	00103200 	call	10320 <wbcoord>
    // A
    for (int i = tx; i < tx + 4; i++){
      wbcoord(ty, i, 3);
      wbcoord(ty + 2, i, 3);
    }
    for (int j = ty + 1; j < ty + 5; j++){
   11080:	e0bfeb17 	ldw	r2,-84(fp)
   11084:	10800044 	addi	r2,r2,1
   11088:	e0bfeb15 	stw	r2,-84(fp)
   1108c:	e0bfff17 	ldw	r2,-4(fp)
   11090:	10800144 	addi	r2,r2,5
   11094:	e0ffeb17 	ldw	r3,-84(fp)
   11098:	18bfef16 	blt	r3,r2,11058 <__alt_data_end+0xffff1058>
      wbcoord(j, tx, 3);
      wbcoord(j, tx + 3, 3);
    }

    tx += 5;
   1109c:	e0bffe17 	ldw	r2,-8(fp)
   110a0:	10800144 	addi	r2,r2,5
   110a4:	e0bffe15 	stw	r2,-8(fp)

    // M
    for (int i = tx; i < tx + 5; i++) wbcoord(ty, i, 3);
   110a8:	e0bffe17 	ldw	r2,-8(fp)
   110ac:	e0bfec15 	stw	r2,-80(fp)
   110b0:	00000706 	br	110d0 <gameOver+0x1f8>
   110b4:	018000c4 	movi	r6,3
   110b8:	e17fec17 	ldw	r5,-80(fp)
   110bc:	e13fff17 	ldw	r4,-4(fp)
   110c0:	00103200 	call	10320 <wbcoord>
   110c4:	e0bfec17 	ldw	r2,-80(fp)
   110c8:	10800044 	addi	r2,r2,1
   110cc:	e0bfec15 	stw	r2,-80(fp)
   110d0:	e0bffe17 	ldw	r2,-8(fp)
   110d4:	10800144 	addi	r2,r2,5
   110d8:	e0ffec17 	ldw	r3,-80(fp)
   110dc:	18bff516 	blt	r3,r2,110b4 <__alt_data_end+0xffff10b4>
    for (int j = ty + 1; j < ty + 5; j++){
   110e0:	e0bfff17 	ldw	r2,-4(fp)
   110e4:	10800044 	addi	r2,r2,1
   110e8:	e0bfed15 	stw	r2,-76(fp)
   110ec:	00000d06 	br	11124 <gameOver+0x24c>
      wbcoord(j, tx, 3);
   110f0:	018000c4 	movi	r6,3
   110f4:	e17ffe17 	ldw	r5,-8(fp)
   110f8:	e13fed17 	ldw	r4,-76(fp)
   110fc:	00103200 	call	10320 <wbcoord>
      wbcoord(j, tx + 4, 3);
   11100:	e0bffe17 	ldw	r2,-8(fp)
   11104:	10800104 	addi	r2,r2,4
   11108:	018000c4 	movi	r6,3
   1110c:	100b883a 	mov	r5,r2
   11110:	e13fed17 	ldw	r4,-76(fp)
   11114:	00103200 	call	10320 <wbcoord>

    tx += 5;

    // M
    for (int i = tx; i < tx + 5; i++) wbcoord(ty, i, 3);
    for (int j = ty + 1; j < ty + 5; j++){
   11118:	e0bfed17 	ldw	r2,-76(fp)
   1111c:	10800044 	addi	r2,r2,1
   11120:	e0bfed15 	stw	r2,-76(fp)
   11124:	e0bfff17 	ldw	r2,-4(fp)
   11128:	10800144 	addi	r2,r2,5
   1112c:	e0ffed17 	ldw	r3,-76(fp)
   11130:	18bfef16 	blt	r3,r2,110f0 <__alt_data_end+0xffff10f0>
      wbcoord(j, tx, 3);
      wbcoord(j, tx + 4, 3);
    }
    for (int j = ty + 1; j < ty + 4; j++) wbcoord(j, tx + 2, 3);
   11134:	e0bfff17 	ldw	r2,-4(fp)
   11138:	10800044 	addi	r2,r2,1
   1113c:	e0bfee15 	stw	r2,-72(fp)
   11140:	00000906 	br	11168 <gameOver+0x290>
   11144:	e0bffe17 	ldw	r2,-8(fp)
   11148:	10800084 	addi	r2,r2,2
   1114c:	018000c4 	movi	r6,3
   11150:	100b883a 	mov	r5,r2
   11154:	e13fee17 	ldw	r4,-72(fp)
   11158:	00103200 	call	10320 <wbcoord>
   1115c:	e0bfee17 	ldw	r2,-72(fp)
   11160:	10800044 	addi	r2,r2,1
   11164:	e0bfee15 	stw	r2,-72(fp)
   11168:	e0bfff17 	ldw	r2,-4(fp)
   1116c:	10800104 	addi	r2,r2,4
   11170:	e0ffee17 	ldw	r3,-72(fp)
   11174:	18bff316 	blt	r3,r2,11144 <__alt_data_end+0xffff1144>

    tx += 6;
   11178:	e0bffe17 	ldw	r2,-8(fp)
   1117c:	10800184 	addi	r2,r2,6
   11180:	e0bffe15 	stw	r2,-8(fp)

    // E
    for (int j = ty; j < ty + 5; j++) wbcoord(j, tx, 3);
   11184:	e0bfff17 	ldw	r2,-4(fp)
   11188:	e0bfef15 	stw	r2,-68(fp)
   1118c:	00000706 	br	111ac <gameOver+0x2d4>
   11190:	018000c4 	movi	r6,3
   11194:	e17ffe17 	ldw	r5,-8(fp)
   11198:	e13fef17 	ldw	r4,-68(fp)
   1119c:	00103200 	call	10320 <wbcoord>
   111a0:	e0bfef17 	ldw	r2,-68(fp)
   111a4:	10800044 	addi	r2,r2,1
   111a8:	e0bfef15 	stw	r2,-68(fp)
   111ac:	e0bfff17 	ldw	r2,-4(fp)
   111b0:	10800144 	addi	r2,r2,5
   111b4:	e0ffef17 	ldw	r3,-68(fp)
   111b8:	18bff516 	blt	r3,r2,11190 <__alt_data_end+0xffff1190>
    for (int i = tx + 1; i < tx + 5; i++){
   111bc:	e0bffe17 	ldw	r2,-8(fp)
   111c0:	10800044 	addi	r2,r2,1
   111c4:	e0bff015 	stw	r2,-64(fp)
   111c8:	00000d06 	br	11200 <gameOver+0x328>
      wbcoord(ty, i, 3);
   111cc:	018000c4 	movi	r6,3
   111d0:	e17ff017 	ldw	r5,-64(fp)
   111d4:	e13fff17 	ldw	r4,-4(fp)
   111d8:	00103200 	call	10320 <wbcoord>
      wbcoord(ty + 4, i, 3);
   111dc:	e0bfff17 	ldw	r2,-4(fp)
   111e0:	10800104 	addi	r2,r2,4
   111e4:	018000c4 	movi	r6,3
   111e8:	e17ff017 	ldw	r5,-64(fp)
   111ec:	1009883a 	mov	r4,r2
   111f0:	00103200 	call	10320 <wbcoord>

    tx += 6;

    // E
    for (int j = ty; j < ty + 5; j++) wbcoord(j, tx, 3);
    for (int i = tx + 1; i < tx + 5; i++){
   111f4:	e0bff017 	ldw	r2,-64(fp)
   111f8:	10800044 	addi	r2,r2,1
   111fc:	e0bff015 	stw	r2,-64(fp)
   11200:	e0bffe17 	ldw	r2,-8(fp)
   11204:	10800144 	addi	r2,r2,5
   11208:	e0fff017 	ldw	r3,-64(fp)
   1120c:	18bfef16 	blt	r3,r2,111cc <__alt_data_end+0xffff11cc>
      wbcoord(ty, i, 3);
      wbcoord(ty + 4, i, 3);
    }
    for (int i = tx + 1; i < tx + 4; i++) wbcoord(ty + 2, i, 3);
   11210:	e0bffe17 	ldw	r2,-8(fp)
   11214:	10800044 	addi	r2,r2,1
   11218:	e0bff115 	stw	r2,-60(fp)
   1121c:	00000906 	br	11244 <gameOver+0x36c>
   11220:	e0bfff17 	ldw	r2,-4(fp)
   11224:	10800084 	addi	r2,r2,2
   11228:	018000c4 	movi	r6,3
   1122c:	e17ff117 	ldw	r5,-60(fp)
   11230:	1009883a 	mov	r4,r2
   11234:	00103200 	call	10320 <wbcoord>
   11238:	e0bff117 	ldw	r2,-60(fp)
   1123c:	10800044 	addi	r2,r2,1
   11240:	e0bff115 	stw	r2,-60(fp)
   11244:	e0bffe17 	ldw	r2,-8(fp)
   11248:	10800104 	addi	r2,r2,4
   1124c:	e0fff117 	ldw	r3,-60(fp)
   11250:	18bff316 	blt	r3,r2,11220 <__alt_data_end+0xffff1220>

    tx = ZX + 2;
   11254:	00800244 	movi	r2,9
   11258:	e0bffe15 	stw	r2,-8(fp)
    ty += 9;
   1125c:	e0bfff17 	ldw	r2,-4(fp)
   11260:	10800244 	addi	r2,r2,9
   11264:	e0bfff15 	stw	r2,-4(fp)

    // O
    for (int i = tx; i < tx + 4; i++){
   11268:	e0bffe17 	ldw	r2,-8(fp)
   1126c:	e0bff215 	stw	r2,-56(fp)
   11270:	00000d06 	br	112a8 <gameOver+0x3d0>
      wbcoord(ty, i, 3);
   11274:	018000c4 	movi	r6,3
   11278:	e17ff217 	ldw	r5,-56(fp)
   1127c:	e13fff17 	ldw	r4,-4(fp)
   11280:	00103200 	call	10320 <wbcoord>
      wbcoord(ty + 4, i, 3);
   11284:	e0bfff17 	ldw	r2,-4(fp)
   11288:	10800104 	addi	r2,r2,4
   1128c:	018000c4 	movi	r6,3
   11290:	e17ff217 	ldw	r5,-56(fp)
   11294:	1009883a 	mov	r4,r2
   11298:	00103200 	call	10320 <wbcoord>

    tx = ZX + 2;
    ty += 9;

    // O
    for (int i = tx; i < tx + 4; i++){
   1129c:	e0bff217 	ldw	r2,-56(fp)
   112a0:	10800044 	addi	r2,r2,1
   112a4:	e0bff215 	stw	r2,-56(fp)
   112a8:	e0bffe17 	ldw	r2,-8(fp)
   112ac:	10800104 	addi	r2,r2,4
   112b0:	e0fff217 	ldw	r3,-56(fp)
   112b4:	18bfef16 	blt	r3,r2,11274 <__alt_data_end+0xffff1274>
      wbcoord(ty, i, 3);
      wbcoord(ty + 4, i, 3);
    }
    for (int j = ty + 1; j < ty + 4; j++){
   112b8:	e0bfff17 	ldw	r2,-4(fp)
   112bc:	10800044 	addi	r2,r2,1
   112c0:	e0bff315 	stw	r2,-52(fp)
   112c4:	00000d06 	br	112fc <gameOver+0x424>
      wbcoord(j, tx, 3);
   112c8:	018000c4 	movi	r6,3
   112cc:	e17ffe17 	ldw	r5,-8(fp)
   112d0:	e13ff317 	ldw	r4,-52(fp)
   112d4:	00103200 	call	10320 <wbcoord>
      wbcoord(j, tx + 3, 3);
   112d8:	e0bffe17 	ldw	r2,-8(fp)
   112dc:	108000c4 	addi	r2,r2,3
   112e0:	018000c4 	movi	r6,3
   112e4:	100b883a 	mov	r5,r2
   112e8:	e13ff317 	ldw	r4,-52(fp)
   112ec:	00103200 	call	10320 <wbcoord>
    // O
    for (int i = tx; i < tx + 4; i++){
      wbcoord(ty, i, 3);
      wbcoord(ty + 4, i, 3);
    }
    for (int j = ty + 1; j < ty + 4; j++){
   112f0:	e0bff317 	ldw	r2,-52(fp)
   112f4:	10800044 	addi	r2,r2,1
   112f8:	e0bff315 	stw	r2,-52(fp)
   112fc:	e0bfff17 	ldw	r2,-4(fp)
   11300:	10800104 	addi	r2,r2,4
   11304:	e0fff317 	ldw	r3,-52(fp)
   11308:	18bfef16 	blt	r3,r2,112c8 <__alt_data_end+0xffff12c8>
      wbcoord(j, tx, 3);
      wbcoord(j, tx + 3, 3);
    }

    tx += 5;
   1130c:	e0bffe17 	ldw	r2,-8(fp)
   11310:	10800144 	addi	r2,r2,5
   11314:	e0bffe15 	stw	r2,-8(fp)

    // V
    for (int j = ty; j < ty + 3; j++){
   11318:	e0bfff17 	ldw	r2,-4(fp)
   1131c:	e0bff415 	stw	r2,-48(fp)
   11320:	00000d06 	br	11358 <gameOver+0x480>
      wbcoord(j, tx, 3);
   11324:	018000c4 	movi	r6,3
   11328:	e17ffe17 	ldw	r5,-8(fp)
   1132c:	e13ff417 	ldw	r4,-48(fp)
   11330:	00103200 	call	10320 <wbcoord>
      wbcoord(j, tx + 4, 3);
   11334:	e0bffe17 	ldw	r2,-8(fp)
   11338:	10800104 	addi	r2,r2,4
   1133c:	018000c4 	movi	r6,3
   11340:	100b883a 	mov	r5,r2
   11344:	e13ff417 	ldw	r4,-48(fp)
   11348:	00103200 	call	10320 <wbcoord>
    }

    tx += 5;

    // V
    for (int j = ty; j < ty + 3; j++){
   1134c:	e0bff417 	ldw	r2,-48(fp)
   11350:	10800044 	addi	r2,r2,1
   11354:	e0bff415 	stw	r2,-48(fp)
   11358:	e0bfff17 	ldw	r2,-4(fp)
   1135c:	108000c4 	addi	r2,r2,3
   11360:	e0fff417 	ldw	r3,-48(fp)
   11364:	18bfef16 	blt	r3,r2,11324 <__alt_data_end+0xffff1324>
      wbcoord(j, tx, 3);
      wbcoord(j, tx + 4, 3);
    }
    wbcoord(ty + 3, tx + 1, 3);
   11368:	e0bfff17 	ldw	r2,-4(fp)
   1136c:	10c000c4 	addi	r3,r2,3
   11370:	e0bffe17 	ldw	r2,-8(fp)
   11374:	10800044 	addi	r2,r2,1
   11378:	018000c4 	movi	r6,3
   1137c:	100b883a 	mov	r5,r2
   11380:	1809883a 	mov	r4,r3
   11384:	00103200 	call	10320 <wbcoord>
    wbcoord(ty + 3, tx + 3, 3);
   11388:	e0bfff17 	ldw	r2,-4(fp)
   1138c:	10c000c4 	addi	r3,r2,3
   11390:	e0bffe17 	ldw	r2,-8(fp)
   11394:	108000c4 	addi	r2,r2,3
   11398:	018000c4 	movi	r6,3
   1139c:	100b883a 	mov	r5,r2
   113a0:	1809883a 	mov	r4,r3
   113a4:	00103200 	call	10320 <wbcoord>
    wbcoord(ty + 4, tx + 2, 3);
   113a8:	e0bfff17 	ldw	r2,-4(fp)
   113ac:	10c00104 	addi	r3,r2,4
   113b0:	e0bffe17 	ldw	r2,-8(fp)
   113b4:	10800084 	addi	r2,r2,2
   113b8:	018000c4 	movi	r6,3
   113bc:	100b883a 	mov	r5,r2
   113c0:	1809883a 	mov	r4,r3
   113c4:	00103200 	call	10320 <wbcoord>

    tx += 6;
   113c8:	e0bffe17 	ldw	r2,-8(fp)
   113cc:	10800184 	addi	r2,r2,6
   113d0:	e0bffe15 	stw	r2,-8(fp)

    // E
    for (int j = ty; j < ty + 5; j++) wbcoord(j, tx, 3);
   113d4:	e0bfff17 	ldw	r2,-4(fp)
   113d8:	e0bff515 	stw	r2,-44(fp)
   113dc:	00000706 	br	113fc <gameOver+0x524>
   113e0:	018000c4 	movi	r6,3
   113e4:	e17ffe17 	ldw	r5,-8(fp)
   113e8:	e13ff517 	ldw	r4,-44(fp)
   113ec:	00103200 	call	10320 <wbcoord>
   113f0:	e0bff517 	ldw	r2,-44(fp)
   113f4:	10800044 	addi	r2,r2,1
   113f8:	e0bff515 	stw	r2,-44(fp)
   113fc:	e0bfff17 	ldw	r2,-4(fp)
   11400:	10800144 	addi	r2,r2,5
   11404:	e0fff517 	ldw	r3,-44(fp)
   11408:	18bff516 	blt	r3,r2,113e0 <__alt_data_end+0xffff13e0>
    for (int i = tx + 1; i < tx + 5; i++){
   1140c:	e0bffe17 	ldw	r2,-8(fp)
   11410:	10800044 	addi	r2,r2,1
   11414:	e0bff615 	stw	r2,-40(fp)
   11418:	00000d06 	br	11450 <gameOver+0x578>
      wbcoord(ty, i, 3);
   1141c:	018000c4 	movi	r6,3
   11420:	e17ff617 	ldw	r5,-40(fp)
   11424:	e13fff17 	ldw	r4,-4(fp)
   11428:	00103200 	call	10320 <wbcoord>
      wbcoord(ty + 4, i, 3);
   1142c:	e0bfff17 	ldw	r2,-4(fp)
   11430:	10800104 	addi	r2,r2,4
   11434:	018000c4 	movi	r6,3
   11438:	e17ff617 	ldw	r5,-40(fp)
   1143c:	1009883a 	mov	r4,r2
   11440:	00103200 	call	10320 <wbcoord>

    tx += 6;

    // E
    for (int j = ty; j < ty + 5; j++) wbcoord(j, tx, 3);
    for (int i = tx + 1; i < tx + 5; i++){
   11444:	e0bff617 	ldw	r2,-40(fp)
   11448:	10800044 	addi	r2,r2,1
   1144c:	e0bff615 	stw	r2,-40(fp)
   11450:	e0bffe17 	ldw	r2,-8(fp)
   11454:	10800144 	addi	r2,r2,5
   11458:	e0fff617 	ldw	r3,-40(fp)
   1145c:	18bfef16 	blt	r3,r2,1141c <__alt_data_end+0xffff141c>
      wbcoord(ty, i, 3);
      wbcoord(ty + 4, i, 3);
    }
    for (int i = tx + 1; i < tx + 4; i++) wbcoord(ty + 2, i, 3);
   11460:	e0bffe17 	ldw	r2,-8(fp)
   11464:	10800044 	addi	r2,r2,1
   11468:	e0bff715 	stw	r2,-36(fp)
   1146c:	00000906 	br	11494 <gameOver+0x5bc>
   11470:	e0bfff17 	ldw	r2,-4(fp)
   11474:	10800084 	addi	r2,r2,2
   11478:	018000c4 	movi	r6,3
   1147c:	e17ff717 	ldw	r5,-36(fp)
   11480:	1009883a 	mov	r4,r2
   11484:	00103200 	call	10320 <wbcoord>
   11488:	e0bff717 	ldw	r2,-36(fp)
   1148c:	10800044 	addi	r2,r2,1
   11490:	e0bff715 	stw	r2,-36(fp)
   11494:	e0bffe17 	ldw	r2,-8(fp)
   11498:	10800104 	addi	r2,r2,4
   1149c:	e0fff717 	ldw	r3,-36(fp)
   114a0:	18bff316 	blt	r3,r2,11470 <__alt_data_end+0xffff1470>

    tx += 6;
   114a4:	e0bffe17 	ldw	r2,-8(fp)
   114a8:	10800184 	addi	r2,r2,6
   114ac:	e0bffe15 	stw	r2,-8(fp)

    // R
    for (int j = ty; j < ty + 5; j++) wbcoord(j, tx, 3);
   114b0:	e0bfff17 	ldw	r2,-4(fp)
   114b4:	e0bff815 	stw	r2,-32(fp)
   114b8:	00000706 	br	114d8 <gameOver+0x600>
   114bc:	018000c4 	movi	r6,3
   114c0:	e17ffe17 	ldw	r5,-8(fp)
   114c4:	e13ff817 	ldw	r4,-32(fp)
   114c8:	00103200 	call	10320 <wbcoord>
   114cc:	e0bff817 	ldw	r2,-32(fp)
   114d0:	10800044 	addi	r2,r2,1
   114d4:	e0bff815 	stw	r2,-32(fp)
   114d8:	e0bfff17 	ldw	r2,-4(fp)
   114dc:	10800144 	addi	r2,r2,5
   114e0:	e0fff817 	ldw	r3,-32(fp)
   114e4:	18bff516 	blt	r3,r2,114bc <__alt_data_end+0xffff14bc>
    for (int i = tx + 1; i < tx + 4; i++){
   114e8:	e0bffe17 	ldw	r2,-8(fp)
   114ec:	10800044 	addi	r2,r2,1
   114f0:	e0bff915 	stw	r2,-28(fp)
   114f4:	00000d06 	br	1152c <gameOver+0x654>
      wbcoord(ty, i, 3);
   114f8:	018000c4 	movi	r6,3
   114fc:	e17ff917 	ldw	r5,-28(fp)
   11500:	e13fff17 	ldw	r4,-4(fp)
   11504:	00103200 	call	10320 <wbcoord>
      wbcoord(ty + 2, i, 3);
   11508:	e0bfff17 	ldw	r2,-4(fp)
   1150c:	10800084 	addi	r2,r2,2
   11510:	018000c4 	movi	r6,3
   11514:	e17ff917 	ldw	r5,-28(fp)
   11518:	1009883a 	mov	r4,r2
   1151c:	00103200 	call	10320 <wbcoord>

    tx += 6;

    // R
    for (int j = ty; j < ty + 5; j++) wbcoord(j, tx, 3);
    for (int i = tx + 1; i < tx + 4; i++){
   11520:	e0bff917 	ldw	r2,-28(fp)
   11524:	10800044 	addi	r2,r2,1
   11528:	e0bff915 	stw	r2,-28(fp)
   1152c:	e0bffe17 	ldw	r2,-8(fp)
   11530:	10800104 	addi	r2,r2,4
   11534:	e0fff917 	ldw	r3,-28(fp)
   11538:	18bfef16 	blt	r3,r2,114f8 <__alt_data_end+0xffff14f8>
      wbcoord(ty, i, 3);
      wbcoord(ty + 2, i, 3);
    }
    wbcoord(ty + 1, tx + 3, 3);
   1153c:	e0bfff17 	ldw	r2,-4(fp)
   11540:	10c00044 	addi	r3,r2,1
   11544:	e0bffe17 	ldw	r2,-8(fp)
   11548:	108000c4 	addi	r2,r2,3
   1154c:	018000c4 	movi	r6,3
   11550:	100b883a 	mov	r5,r2
   11554:	1809883a 	mov	r4,r3
   11558:	00103200 	call	10320 <wbcoord>
    wbcoord(ty + 3, tx + 2, 3);
   1155c:	e0bfff17 	ldw	r2,-4(fp)
   11560:	10c000c4 	addi	r3,r2,3
   11564:	e0bffe17 	ldw	r2,-8(fp)
   11568:	10800084 	addi	r2,r2,2
   1156c:	018000c4 	movi	r6,3
   11570:	100b883a 	mov	r5,r2
   11574:	1809883a 	mov	r4,r3
   11578:	00103200 	call	10320 <wbcoord>
    wbcoord(ty + 4, tx + 3, 3);
   1157c:	e0bfff17 	ldw	r2,-4(fp)
   11580:	10c00104 	addi	r3,r2,4
   11584:	e0bffe17 	ldw	r2,-8(fp)
   11588:	108000c4 	addi	r2,r2,3
   1158c:	018000c4 	movi	r6,3
   11590:	100b883a 	mov	r5,r2
   11594:	1809883a 	mov	r4,r3
   11598:	00103200 	call	10320 <wbcoord>

    for (int i = 0; i < ZX; i++){
   1159c:	e03ffa15 	stw	zero,-24(fp)
   115a0:	00000f06 	br	115e0 <gameOver+0x708>
      for (int j = 0; j < HEIGHT; j++) wbcoord(j, i, 0);
   115a4:	e03ffb15 	stw	zero,-20(fp)
   115a8:	00000706 	br	115c8 <gameOver+0x6f0>
   115ac:	000d883a 	mov	r6,zero
   115b0:	e17ffa17 	ldw	r5,-24(fp)
   115b4:	e13ffb17 	ldw	r4,-20(fp)
   115b8:	00103200 	call	10320 <wbcoord>
   115bc:	e0bffb17 	ldw	r2,-20(fp)
   115c0:	10800044 	addi	r2,r2,1
   115c4:	e0bffb15 	stw	r2,-20(fp)
   115c8:	e0bffb17 	ldw	r2,-20(fp)
   115cc:	10800810 	cmplti	r2,r2,32
   115d0:	103ff61e 	bne	r2,zero,115ac <__alt_data_end+0xffff15ac>
    }
    wbcoord(ty + 1, tx + 3, 3);
    wbcoord(ty + 3, tx + 2, 3);
    wbcoord(ty + 4, tx + 3, 3);

    for (int i = 0; i < ZX; i++){
   115d4:	e0bffa17 	ldw	r2,-24(fp)
   115d8:	10800044 	addi	r2,r2,1
   115dc:	e0bffa15 	stw	r2,-24(fp)
   115e0:	e0bffa17 	ldw	r2,-24(fp)
   115e4:	108001d0 	cmplti	r2,r2,7
   115e8:	103fee1e 	bne	r2,zero,115a4 <__alt_data_end+0xffff15a4>
      for (int j = 0; j < HEIGHT; j++) wbcoord(j, i, 0);
    }

    for (int i = ZX + M + 2; i < WIDTH; i++){
   115ec:	00800804 	movi	r2,32
   115f0:	e0bffc15 	stw	r2,-16(fp)
   115f4:	00000f06 	br	11634 <gameOver+0x75c>
      for (int j = 0; j < HEIGHT; j++) wbcoord(j, i, 0);
   115f8:	e03ffd15 	stw	zero,-12(fp)
   115fc:	00000706 	br	1161c <gameOver+0x744>
   11600:	000d883a 	mov	r6,zero
   11604:	e17ffc17 	ldw	r5,-16(fp)
   11608:	e13ffd17 	ldw	r4,-12(fp)
   1160c:	00103200 	call	10320 <wbcoord>
   11610:	e0bffd17 	ldw	r2,-12(fp)
   11614:	10800044 	addi	r2,r2,1
   11618:	e0bffd15 	stw	r2,-12(fp)
   1161c:	e0bffd17 	ldw	r2,-12(fp)
   11620:	10800810 	cmplti	r2,r2,32
   11624:	103ff61e 	bne	r2,zero,11600 <__alt_data_end+0xffff1600>

    for (int i = 0; i < ZX; i++){
      for (int j = 0; j < HEIGHT; j++) wbcoord(j, i, 0);
    }

    for (int i = ZX + M + 2; i < WIDTH; i++){
   11628:	e0bffc17 	ldw	r2,-16(fp)
   1162c:	10800044 	addi	r2,r2,1
   11630:	e0bffc15 	stw	r2,-16(fp)
   11634:	e0bffc17 	ldw	r2,-16(fp)
   11638:	10800a10 	cmplti	r2,r2,40
   1163c:	103fee1e 	bne	r2,zero,115f8 <__alt_data_end+0xffff15f8>
      for (int j = 0; j < HEIGHT; j++) wbcoord(j, i, 0);
    }

    wbcoord(HEIGHT - 6, 7, 2);
   11640:	01800084 	movi	r6,2
   11644:	014001c4 	movi	r5,7
   11648:	01000684 	movi	r4,26
   1164c:	00103200 	call	10320 <wbcoord>
    wbcoord(HEIGHT - 5, 7, 2);
   11650:	01800084 	movi	r6,2
   11654:	014001c4 	movi	r5,7
   11658:	010006c4 	movi	r4,27
   1165c:	00103200 	call	10320 <wbcoord>

    while (1){
        rd();
   11660:	00103700 	call	10370 <rd>
        if (value == LEFT_KEY){
   11664:	d0a00017 	ldw	r2,-32768(gp)
   11668:	108001d8 	cmpnei	r2,r2,7
   1166c:	1000031e 	bne	r2,zero,1167c <gameOver+0x7a4>
            clearBoard();
   11670:	001041c0 	call	1041c <clearBoard>
            snakeInit();
   11674:	0010b4c0 	call	10b4c <snakeInit>
            break;
   11678:	00000506 	br	11690 <gameOver+0x7b8>
        }else if (value == RIGHT_KEY){
   1167c:	d0a00017 	ldw	r2,-32768(gp)
   11680:	108002d8 	cmpnei	r2,r2,11
   11684:	103ff61e 	bne	r2,zero,11660 <__alt_data_end+0xffff1660>
            game = 1;
   11688:	00800044 	movi	r2,1
   1168c:	d0a1a515 	stw	r2,-31084(gp)
    }

    /*
        Clear screen    
    */
}
   11690:	0001883a 	nop
   11694:	e037883a 	mov	sp,fp
   11698:	dfc00117 	ldw	ra,4(sp)
   1169c:	df000017 	ldw	fp,0(sp)
   116a0:	dec00204 	addi	sp,sp,8
   116a4:	f800283a 	ret

000116a8 <checkGameOver>:

void checkGameOver(){
   116a8:	defffe04 	addi	sp,sp,-8
   116ac:	dfc00115 	stw	ra,4(sp)
   116b0:	df000015 	stw	fp,0(sp)
   116b4:	d839883a 	mov	fp,sp
    if (Field[x][y] != 0 && Field[x][y] != -1) gameOver();
   116b8:	d121a417 	ldw	r4,-31088(gp)
   116bc:	d0e1ab17 	ldw	r3,-31060(gp)
   116c0:	00800074 	movhi	r2,1
   116c4:	1093ec04 	addi	r2,r2,20400
   116c8:	210005e4 	muli	r4,r4,23
   116cc:	20c7883a 	add	r3,r4,r3
   116d0:	18c7883a 	add	r3,r3,r3
   116d4:	18c7883a 	add	r3,r3,r3
   116d8:	10c5883a 	add	r2,r2,r3
   116dc:	10800017 	ldw	r2,0(r2)
   116e0:	10000d26 	beq	r2,zero,11718 <checkGameOver+0x70>
   116e4:	d121a417 	ldw	r4,-31088(gp)
   116e8:	d0e1ab17 	ldw	r3,-31060(gp)
   116ec:	00800074 	movhi	r2,1
   116f0:	1093ec04 	addi	r2,r2,20400
   116f4:	210005e4 	muli	r4,r4,23
   116f8:	20c7883a 	add	r3,r4,r3
   116fc:	18c7883a 	add	r3,r3,r3
   11700:	18c7883a 	add	r3,r3,r3
   11704:	10c5883a 	add	r2,r2,r3
   11708:	10800017 	ldw	r2,0(r2)
   1170c:	10bfffe0 	cmpeqi	r2,r2,-1
   11710:	1000011e 	bne	r2,zero,11718 <checkGameOver+0x70>
   11714:	0010ed80 	call	10ed8 <gameOver>
}
   11718:	0001883a 	nop
   1171c:	e037883a 	mov	sp,fp
   11720:	dfc00117 	ldw	ra,4(sp)
   11724:	df000017 	ldw	fp,0(sp)
   11728:	dec00204 	addi	sp,sp,8
   1172c:	f800283a 	ret

00011730 <checkFood>:

void checkFood(){
   11730:	deffff04 	addi	sp,sp,-4
   11734:	df000015 	stw	fp,0(sp)
   11738:	d839883a 	mov	fp,sp
    if (Field[x][y] == -1){
   1173c:	d121a417 	ldw	r4,-31088(gp)
   11740:	d0e1ab17 	ldw	r3,-31060(gp)
   11744:	00800074 	movhi	r2,1
   11748:	1093ec04 	addi	r2,r2,20400
   1174c:	210005e4 	muli	r4,r4,23
   11750:	20c7883a 	add	r3,r4,r3
   11754:	18c7883a 	add	r3,r3,r3
   11758:	18c7883a 	add	r3,r3,r3
   1175c:	10c5883a 	add	r2,r2,r3
   11760:	10800017 	ldw	r2,0(r2)
   11764:	10bfffd8 	cmpnei	r2,r2,-1
   11768:	1000071e 	bne	r2,zero,11788 <checkFood+0x58>
        food = 0;
   1176c:	d021a215 	stw	zero,-31096(gp)
        score += 5;
   11770:	d0a1a817 	ldw	r2,-31072(gp)
   11774:	10800144 	addi	r2,r2,5
   11778:	d0a1a815 	stw	r2,-31072(gp)
        tail -= 2;
   1177c:	d0a1a917 	ldw	r2,-31068(gp)
   11780:	10bfff84 	addi	r2,r2,-2
   11784:	d0a1a915 	stw	r2,-31068(gp)
    }
}
   11788:	0001883a 	nop
   1178c:	e037883a 	mov	sp,fp
   11790:	df000017 	ldw	fp,0(sp)
   11794:	dec00104 	addi	sp,sp,4
   11798:	f800283a 	ret

0001179c <updateHead>:

void updateHead(){
   1179c:	deffff04 	addi	sp,sp,-4
   117a0:	df000015 	stw	fp,0(sp)
   117a4:	d839883a 	mov	fp,sp
    head++;
   117a8:	d0a1aa17 	ldw	r2,-31064(gp)
   117ac:	10800044 	addi	r2,r2,1
   117b0:	d0a1aa15 	stw	r2,-31064(gp)
    Field[x][y] = head;
   117b4:	d161a417 	ldw	r5,-31088(gp)
   117b8:	d0e1ab17 	ldw	r3,-31060(gp)
   117bc:	d121aa17 	ldw	r4,-31064(gp)
   117c0:	00800074 	movhi	r2,1
   117c4:	1093ec04 	addi	r2,r2,20400
   117c8:	294005e4 	muli	r5,r5,23
   117cc:	28c7883a 	add	r3,r5,r3
   117d0:	18c7883a 	add	r3,r3,r3
   117d4:	18c7883a 	add	r3,r3,r3
   117d8:	10c5883a 	add	r2,r2,r3
   117dc:	11000015 	stw	r4,0(r2)
}
   117e0:	0001883a 	nop
   117e4:	e037883a 	mov	sp,fp
   117e8:	df000017 	ldw	fp,0(sp)
   117ec:	dec00104 	addi	sp,sp,4
   117f0:	f800283a 	ret

000117f4 <movement>:

void movement(){
   117f4:	defffe04 	addi	sp,sp,-8
   117f8:	dfc00115 	stw	ra,4(sp)
   117fc:	df000015 	stw	fp,0(sp)
   11800:	d839883a 	mov	fp,sp
    rd();
   11804:	00103700 	call	10370 <rd>

    if (value == LEFT_KEY){
   11808:	d0a00017 	ldw	r2,-32768(gp)
   1180c:	108001d8 	cmpnei	r2,r2,7
   11810:	1000131e 	bne	r2,zero,11860 <movement+0x6c>
        switch (direction){
   11814:	d0a1a717 	ldw	r2,-31076(gp)
   11818:	10c00060 	cmpeqi	r3,r2,1
   1181c:	1800041e 	bne	r3,zero,11830 <movement+0x3c>
   11820:	0080052e 	bgeu	zero,r2,11838 <movement+0x44>
   11824:	108000e0 	cmpeqi	r2,r2,3
   11828:	1000061e 	bne	r2,zero,11844 <movement+0x50>
   1182c:	00000806 	br	11850 <movement+0x5c>
            case East: direction = North; break;
   11830:	d021a715 	stw	zero,-31076(gp)
   11834:	00001f06 	br	118b4 <movement+0xc0>
            case North: direction = West; break;
   11838:	008000c4 	movi	r2,3
   1183c:	d0a1a715 	stw	r2,-31076(gp)
   11840:	00001c06 	br	118b4 <movement+0xc0>
            case West: direction = South; break;
   11844:	00800084 	movi	r2,2
   11848:	d0a1a715 	stw	r2,-31076(gp)
   1184c:	00001906 	br	118b4 <movement+0xc0>
            default: direction = East; break;
   11850:	00800044 	movi	r2,1
   11854:	d0a1a715 	stw	r2,-31076(gp)
   11858:	0001883a 	nop
   1185c:	00001506 	br	118b4 <movement+0xc0>
        }
    }else if (value == RIGHT_KEY){
   11860:	d0a00017 	ldw	r2,-32768(gp)
   11864:	108002d8 	cmpnei	r2,r2,11
   11868:	1000121e 	bne	r2,zero,118b4 <movement+0xc0>
        switch (direction){
   1186c:	d0a1a717 	ldw	r2,-31076(gp)
   11870:	10c000a0 	cmpeqi	r3,r2,2
   11874:	1800071e 	bne	r3,zero,11894 <movement+0xa0>
   11878:	10c000e0 	cmpeqi	r3,r2,3
   1187c:	1800081e 	bne	r3,zero,118a0 <movement+0xac>
   11880:	10800060 	cmpeqi	r2,r2,1
   11884:	10000826 	beq	r2,zero,118a8 <movement+0xb4>
            case East: direction = South; break;
   11888:	00800084 	movi	r2,2
   1188c:	d0a1a715 	stw	r2,-31076(gp)
   11890:	00000806 	br	118b4 <movement+0xc0>
            case South: direction = West; break;
   11894:	008000c4 	movi	r2,3
   11898:	d0a1a715 	stw	r2,-31076(gp)
   1189c:	00000506 	br	118b4 <movement+0xc0>
            case West: direction = North; break;
   118a0:	d021a715 	stw	zero,-31076(gp)
   118a4:	00000306 	br	118b4 <movement+0xc0>
            default: direction = East; break;
   118a8:	00800044 	movi	r2,1
   118ac:	d0a1a715 	stw	r2,-31076(gp)
   118b0:	0001883a 	nop
        }
    }

    switch (direction){
   118b4:	d0a1a717 	ldw	r2,-31076(gp)
   118b8:	10c00060 	cmpeqi	r3,r2,1
   118bc:	1800061e 	bne	r3,zero,118d8 <movement+0xe4>
   118c0:	00801e2e 	bgeu	zero,r2,1193c <movement+0x148>
   118c4:	10c000a0 	cmpeqi	r3,r2,2
   118c8:	1800141e 	bne	r3,zero,1191c <movement+0x128>
   118cc:	108000e0 	cmpeqi	r2,r2,3
   118d0:	1000091e 	bne	r2,zero,118f8 <movement+0x104>
   118d4:	00002906 	br	1197c <movement+0x188>
        case East:
            y++;
   118d8:	d0a1ab17 	ldw	r2,-31060(gp)
   118dc:	10800044 	addi	r2,r2,1
   118e0:	d0a1ab15 	stw	r2,-31060(gp)
            if (y == M) y = 0; break;
   118e4:	d0a1ab17 	ldw	r2,-31060(gp)
   118e8:	108005d8 	cmpnei	r2,r2,23
   118ec:	10001c1e 	bne	r2,zero,11960 <movement+0x16c>
   118f0:	d021ab15 	stw	zero,-31060(gp)
   118f4:	00001a06 	br	11960 <movement+0x16c>
        case West: 
            y--;
   118f8:	d0a1ab17 	ldw	r2,-31060(gp)
   118fc:	10bfffc4 	addi	r2,r2,-1
   11900:	d0a1ab15 	stw	r2,-31060(gp)
            if (y == -1) y = M - 1; break;
   11904:	d0a1ab17 	ldw	r2,-31060(gp)
   11908:	10bfffd8 	cmpnei	r2,r2,-1
   1190c:	1000161e 	bne	r2,zero,11968 <movement+0x174>
   11910:	00800584 	movi	r2,22
   11914:	d0a1ab15 	stw	r2,-31060(gp)
   11918:	00001306 	br	11968 <movement+0x174>
        case South:
            x++;
   1191c:	d0a1a417 	ldw	r2,-31088(gp)
   11920:	10800044 	addi	r2,r2,1
   11924:	d0a1a415 	stw	r2,-31088(gp)
            if (x == N) x = 0; break;
   11928:	d0a1a417 	ldw	r2,-31088(gp)
   1192c:	108004d8 	cmpnei	r2,r2,19
   11930:	10000f1e 	bne	r2,zero,11970 <movement+0x17c>
   11934:	d021a415 	stw	zero,-31088(gp)
   11938:	00000d06 	br	11970 <movement+0x17c>
        case North: 
            x--;
   1193c:	d0a1a417 	ldw	r2,-31088(gp)
   11940:	10bfffc4 	addi	r2,r2,-1
   11944:	d0a1a415 	stw	r2,-31088(gp)
            if (x == -1) x = N - 1; break;
   11948:	d0a1a417 	ldw	r2,-31088(gp)
   1194c:	10bfffd8 	cmpnei	r2,r2,-1
   11950:	1000091e 	bne	r2,zero,11978 <movement+0x184>
   11954:	00800484 	movi	r2,18
   11958:	d0a1a415 	stw	r2,-31088(gp)
   1195c:	00000606 	br	11978 <movement+0x184>
    }

    switch (direction){
        case East:
            y++;
            if (y == M) y = 0; break;
   11960:	0001883a 	nop
   11964:	00000506 	br	1197c <movement+0x188>
        case West: 
            y--;
            if (y == -1) y = M - 1; break;
   11968:	0001883a 	nop
   1196c:	00000306 	br	1197c <movement+0x188>
        case South:
            x++;
            if (x == N) x = 0; break;
   11970:	0001883a 	nop
   11974:	00000106 	br	1197c <movement+0x188>
        case North: 
            x--;
            if (x == -1) x = N - 1; break;
   11978:	0001883a 	nop
    }

    checkGameOver();
   1197c:	00116a80 	call	116a8 <checkGameOver>
    checkFood();
   11980:	00117300 	call	11730 <checkFood>
    updateHead();
   11984:	001179c0 	call	1179c <updateHead>
}
   11988:	0001883a 	nop
   1198c:	e037883a 	mov	sp,fp
   11990:	dfc00117 	ldw	ra,4(sp)
   11994:	df000017 	ldw	fp,0(sp)
   11998:	dec00204 	addi	sp,sp,8
   1199c:	f800283a 	ret

000119a0 <tailRemove>:

void tailRemove(){
   119a0:	defffd04 	addi	sp,sp,-12
   119a4:	df000215 	stw	fp,8(sp)
   119a8:	df000204 	addi	fp,sp,8
    for (int i = 0; i < N; i++){
   119ac:	e03ffe15 	stw	zero,-8(fp)
   119b0:	00002106 	br	11a38 <tailRemove+0x98>
        for (int j = 0; j < M; j++){
   119b4:	e03fff15 	stw	zero,-4(fp)
   119b8:	00001906 	br	11a20 <tailRemove+0x80>
            if (Field[i][j] == tail){
   119bc:	00800074 	movhi	r2,1
   119c0:	1093ec04 	addi	r2,r2,20400
   119c4:	e0fffe17 	ldw	r3,-8(fp)
   119c8:	190005e4 	muli	r4,r3,23
   119cc:	e0ffff17 	ldw	r3,-4(fp)
   119d0:	20c7883a 	add	r3,r4,r3
   119d4:	18c7883a 	add	r3,r3,r3
   119d8:	18c7883a 	add	r3,r3,r3
   119dc:	10c5883a 	add	r2,r2,r3
   119e0:	10c00017 	ldw	r3,0(r2)
   119e4:	d0a1a917 	ldw	r2,-31068(gp)
   119e8:	18800a1e 	bne	r3,r2,11a14 <tailRemove+0x74>
                Field[i][j] = 0;
   119ec:	00800074 	movhi	r2,1
   119f0:	1093ec04 	addi	r2,r2,20400
   119f4:	e0fffe17 	ldw	r3,-8(fp)
   119f8:	190005e4 	muli	r4,r3,23
   119fc:	e0ffff17 	ldw	r3,-4(fp)
   11a00:	20c7883a 	add	r3,r4,r3
   11a04:	18c7883a 	add	r3,r3,r3
   11a08:	18c7883a 	add	r3,r3,r3
   11a0c:	10c5883a 	add	r2,r2,r3
   11a10:	10000015 	stw	zero,0(r2)
    updateHead();
}

void tailRemove(){
    for (int i = 0; i < N; i++){
        for (int j = 0; j < M; j++){
   11a14:	e0bfff17 	ldw	r2,-4(fp)
   11a18:	10800044 	addi	r2,r2,1
   11a1c:	e0bfff15 	stw	r2,-4(fp)
   11a20:	e0bfff17 	ldw	r2,-4(fp)
   11a24:	108005d0 	cmplti	r2,r2,23
   11a28:	103fe41e 	bne	r2,zero,119bc <__alt_data_end+0xffff19bc>
    checkFood();
    updateHead();
}

void tailRemove(){
    for (int i = 0; i < N; i++){
   11a2c:	e0bffe17 	ldw	r2,-8(fp)
   11a30:	10800044 	addi	r2,r2,1
   11a34:	e0bffe15 	stw	r2,-8(fp)
   11a38:	e0bffe17 	ldw	r2,-8(fp)
   11a3c:	108004d0 	cmplti	r2,r2,19
   11a40:	103fdc1e 	bne	r2,zero,119b4 <__alt_data_end+0xffff19b4>
                Field[i][j] = 0;
            }
        }
    }

    tail++;
   11a44:	d0a1a917 	ldw	r2,-31068(gp)
   11a48:	10800044 	addi	r2,r2,1
   11a4c:	d0a1a915 	stw	r2,-31068(gp)
}
   11a50:	0001883a 	nop
   11a54:	e037883a 	mov	sp,fp
   11a58:	df000017 	ldw	fp,0(sp)
   11a5c:	dec00104 	addi	sp,sp,4
   11a60:	f800283a 	ret

00011a64 <delay>:

void delay(int millis){
   11a64:	defffc04 	addi	sp,sp,-16
   11a68:	dfc00315 	stw	ra,12(sp)
   11a6c:	df000215 	stw	fp,8(sp)
   11a70:	df000204 	addi	fp,sp,8
   11a74:	e13fff15 	stw	r4,-4(fp)
  clock_t start_time = clock();
   11a78:	0011cc00 	call	11cc0 <clock>
   11a7c:	e0bffe15 	stw	r2,-8(fp)
  while (clock() < start_time + millis);
   11a80:	0001883a 	nop
   11a84:	0011cc00 	call	11cc0 <clock>
   11a88:	1009883a 	mov	r4,r2
   11a8c:	e0ffff17 	ldw	r3,-4(fp)
   11a90:	e0bffe17 	ldw	r2,-8(fp)
   11a94:	1885883a 	add	r2,r3,r2
   11a98:	20bffa36 	bltu	r4,r2,11a84 <__alt_data_end+0xffff1a84>
}
   11a9c:	0001883a 	nop
   11aa0:	e037883a 	mov	sp,fp
   11aa4:	dfc00117 	ldw	ra,4(sp)
   11aa8:	df000017 	ldw	fp,0(sp)
   11aac:	dec00204 	addi	sp,sp,8
   11ab0:	f800283a 	ret

00011ab4 <main>:

int main(){
   11ab4:	defffe04 	addi	sp,sp,-8
   11ab8:	dfc00115 	stw	ra,4(sp)
   11abc:	df000015 	stw	fp,0(sp)
   11ac0:	d839883a 	mov	fp,sp
    init();
   11ac4:	00109d40 	call	109d4 <init>
    snakeInit();
   11ac8:	0010b4c0 	call	10b4c <snakeInit>
    while (game == 0){
   11acc:	00000706 	br	11aec <main+0x38>
        show();
   11ad0:	0010c7c0 	call	10c7c <show>
        random();
   11ad4:	0010de80 	call	10de8 <random>
        movement();
   11ad8:	00117f40 	call	117f4 <movement>
        tailRemove();
   11adc:	00119a00 	call	119a0 <tailRemove>
        delay(speed);
   11ae0:	d0a1ac17 	ldw	r2,-31056(gp)
   11ae4:	1009883a 	mov	r4,r2
   11ae8:	0011a640 	call	11a64 <delay>
}

int main(){
    init();
    snakeInit();
    while (game == 0){
   11aec:	d0a1a517 	ldw	r2,-31084(gp)
   11af0:	103ff726 	beq	r2,zero,11ad0 <__alt_data_end+0xffff1ad0>
        movement();
        tailRemove();
        delay(speed);
    }

    return 0;
   11af4:	0005883a 	mov	r2,zero
}
   11af8:	e037883a 	mov	sp,fp
   11afc:	dfc00117 	ldw	ra,4(sp)
   11b00:	df000017 	ldw	fp,0(sp)
   11b04:	dec00204 	addi	sp,sp,8
   11b08:	f800283a 	ret

00011b0c <__divsi3>:
   11b0c:	20001b16 	blt	r4,zero,11b7c <__divsi3+0x70>
   11b10:	000f883a 	mov	r7,zero
   11b14:	28001616 	blt	r5,zero,11b70 <__divsi3+0x64>
   11b18:	200d883a 	mov	r6,r4
   11b1c:	29001a2e 	bgeu	r5,r4,11b88 <__divsi3+0x7c>
   11b20:	00800804 	movi	r2,32
   11b24:	00c00044 	movi	r3,1
   11b28:	00000106 	br	11b30 <__divsi3+0x24>
   11b2c:	10000d26 	beq	r2,zero,11b64 <__divsi3+0x58>
   11b30:	294b883a 	add	r5,r5,r5
   11b34:	10bfffc4 	addi	r2,r2,-1
   11b38:	18c7883a 	add	r3,r3,r3
   11b3c:	293ffb36 	bltu	r5,r4,11b2c <__alt_data_end+0xffff1b2c>
   11b40:	0005883a 	mov	r2,zero
   11b44:	18000726 	beq	r3,zero,11b64 <__divsi3+0x58>
   11b48:	0005883a 	mov	r2,zero
   11b4c:	31400236 	bltu	r6,r5,11b58 <__divsi3+0x4c>
   11b50:	314dc83a 	sub	r6,r6,r5
   11b54:	10c4b03a 	or	r2,r2,r3
   11b58:	1806d07a 	srli	r3,r3,1
   11b5c:	280ad07a 	srli	r5,r5,1
   11b60:	183ffa1e 	bne	r3,zero,11b4c <__alt_data_end+0xffff1b4c>
   11b64:	38000126 	beq	r7,zero,11b6c <__divsi3+0x60>
   11b68:	0085c83a 	sub	r2,zero,r2
   11b6c:	f800283a 	ret
   11b70:	014bc83a 	sub	r5,zero,r5
   11b74:	39c0005c 	xori	r7,r7,1
   11b78:	003fe706 	br	11b18 <__alt_data_end+0xffff1b18>
   11b7c:	0109c83a 	sub	r4,zero,r4
   11b80:	01c00044 	movi	r7,1
   11b84:	003fe306 	br	11b14 <__alt_data_end+0xffff1b14>
   11b88:	00c00044 	movi	r3,1
   11b8c:	003fee06 	br	11b48 <__alt_data_end+0xffff1b48>

00011b90 <__modsi3>:
   11b90:	20001716 	blt	r4,zero,11bf0 <__modsi3+0x60>
   11b94:	000f883a 	mov	r7,zero
   11b98:	2005883a 	mov	r2,r4
   11b9c:	28001216 	blt	r5,zero,11be8 <__modsi3+0x58>
   11ba0:	2900162e 	bgeu	r5,r4,11bfc <__modsi3+0x6c>
   11ba4:	01800804 	movi	r6,32
   11ba8:	00c00044 	movi	r3,1
   11bac:	00000106 	br	11bb4 <__modsi3+0x24>
   11bb0:	30000a26 	beq	r6,zero,11bdc <__modsi3+0x4c>
   11bb4:	294b883a 	add	r5,r5,r5
   11bb8:	31bfffc4 	addi	r6,r6,-1
   11bbc:	18c7883a 	add	r3,r3,r3
   11bc0:	293ffb36 	bltu	r5,r4,11bb0 <__alt_data_end+0xffff1bb0>
   11bc4:	18000526 	beq	r3,zero,11bdc <__modsi3+0x4c>
   11bc8:	1806d07a 	srli	r3,r3,1
   11bcc:	11400136 	bltu	r2,r5,11bd4 <__modsi3+0x44>
   11bd0:	1145c83a 	sub	r2,r2,r5
   11bd4:	280ad07a 	srli	r5,r5,1
   11bd8:	183ffb1e 	bne	r3,zero,11bc8 <__alt_data_end+0xffff1bc8>
   11bdc:	38000126 	beq	r7,zero,11be4 <__modsi3+0x54>
   11be0:	0085c83a 	sub	r2,zero,r2
   11be4:	f800283a 	ret
   11be8:	014bc83a 	sub	r5,zero,r5
   11bec:	003fec06 	br	11ba0 <__alt_data_end+0xffff1ba0>
   11bf0:	0109c83a 	sub	r4,zero,r4
   11bf4:	01c00044 	movi	r7,1
   11bf8:	003fe706 	br	11b98 <__alt_data_end+0xffff1b98>
   11bfc:	00c00044 	movi	r3,1
   11c00:	003ff106 	br	11bc8 <__alt_data_end+0xffff1bc8>

00011c04 <__udivsi3>:
   11c04:	200d883a 	mov	r6,r4
   11c08:	2900152e 	bgeu	r5,r4,11c60 <__udivsi3+0x5c>
   11c0c:	28001416 	blt	r5,zero,11c60 <__udivsi3+0x5c>
   11c10:	00800804 	movi	r2,32
   11c14:	00c00044 	movi	r3,1
   11c18:	00000206 	br	11c24 <__udivsi3+0x20>
   11c1c:	10000e26 	beq	r2,zero,11c58 <__udivsi3+0x54>
   11c20:	28000516 	blt	r5,zero,11c38 <__udivsi3+0x34>
   11c24:	294b883a 	add	r5,r5,r5
   11c28:	10bfffc4 	addi	r2,r2,-1
   11c2c:	18c7883a 	add	r3,r3,r3
   11c30:	293ffa36 	bltu	r5,r4,11c1c <__alt_data_end+0xffff1c1c>
   11c34:	18000826 	beq	r3,zero,11c58 <__udivsi3+0x54>
   11c38:	0005883a 	mov	r2,zero
   11c3c:	31400236 	bltu	r6,r5,11c48 <__udivsi3+0x44>
   11c40:	314dc83a 	sub	r6,r6,r5
   11c44:	10c4b03a 	or	r2,r2,r3
   11c48:	1806d07a 	srli	r3,r3,1
   11c4c:	280ad07a 	srli	r5,r5,1
   11c50:	183ffa1e 	bne	r3,zero,11c3c <__alt_data_end+0xffff1c3c>
   11c54:	f800283a 	ret
   11c58:	0005883a 	mov	r2,zero
   11c5c:	f800283a 	ret
   11c60:	00c00044 	movi	r3,1
   11c64:	003ff406 	br	11c38 <__alt_data_end+0xffff1c38>

00011c68 <__umodsi3>:
   11c68:	2005883a 	mov	r2,r4
   11c6c:	2900122e 	bgeu	r5,r4,11cb8 <__umodsi3+0x50>
   11c70:	28001116 	blt	r5,zero,11cb8 <__umodsi3+0x50>
   11c74:	01800804 	movi	r6,32
   11c78:	00c00044 	movi	r3,1
   11c7c:	00000206 	br	11c88 <__umodsi3+0x20>
   11c80:	30000c26 	beq	r6,zero,11cb4 <__umodsi3+0x4c>
   11c84:	28000516 	blt	r5,zero,11c9c <__umodsi3+0x34>
   11c88:	294b883a 	add	r5,r5,r5
   11c8c:	31bfffc4 	addi	r6,r6,-1
   11c90:	18c7883a 	add	r3,r3,r3
   11c94:	293ffa36 	bltu	r5,r4,11c80 <__alt_data_end+0xffff1c80>
   11c98:	18000626 	beq	r3,zero,11cb4 <__umodsi3+0x4c>
   11c9c:	1806d07a 	srli	r3,r3,1
   11ca0:	11400136 	bltu	r2,r5,11ca8 <__umodsi3+0x40>
   11ca4:	1145c83a 	sub	r2,r2,r5
   11ca8:	280ad07a 	srli	r5,r5,1
   11cac:	183ffb1e 	bne	r3,zero,11c9c <__alt_data_end+0xffff1c9c>
   11cb0:	f800283a 	ret
   11cb4:	f800283a 	ret
   11cb8:	00c00044 	movi	r3,1
   11cbc:	003ff706 	br	11c9c <__alt_data_end+0xffff1c9c>

00011cc0 <clock>:
   11cc0:	00800074 	movhi	r2,1
   11cc4:	10923504 	addi	r2,r2,18644
   11cc8:	11000017 	ldw	r4,0(r2)
   11ccc:	defffb04 	addi	sp,sp,-20
   11cd0:	d80b883a 	mov	r5,sp
   11cd4:	dfc00415 	stw	ra,16(sp)
   11cd8:	0011dd80 	call	11dd8 <_times_r>
   11cdc:	00ffffc4 	movi	r3,-1
   11ce0:	10c00726 	beq	r2,r3,11d00 <clock+0x40>
   11ce4:	d8c00017 	ldw	r3,0(sp)
   11ce8:	d8800117 	ldw	r2,4(sp)
   11cec:	1885883a 	add	r2,r3,r2
   11cf0:	d8c00217 	ldw	r3,8(sp)
   11cf4:	10c7883a 	add	r3,r2,r3
   11cf8:	d8800317 	ldw	r2,12(sp)
   11cfc:	1885883a 	add	r2,r3,r2
   11d00:	dfc00417 	ldw	ra,16(sp)
   11d04:	dec00504 	addi	sp,sp,20
   11d08:	f800283a 	ret

00011d0c <srand>:
   11d0c:	00800074 	movhi	r2,1
   11d10:	10923504 	addi	r2,r2,18644
   11d14:	10800017 	ldw	r2,0(r2)
   11d18:	11002915 	stw	r4,164(r2)
   11d1c:	10002a15 	stw	zero,168(r2)
   11d20:	f800283a 	ret

00011d24 <rand>:
   11d24:	00800074 	movhi	r2,1
   11d28:	defffe04 	addi	sp,sp,-8
   11d2c:	10923504 	addi	r2,r2,18644
   11d30:	dc000015 	stw	r16,0(sp)
   11d34:	14000017 	ldw	r16,0(r2)
   11d38:	dfc00115 	stw	ra,4(sp)
   11d3c:	01932574 	movhi	r6,19605
   11d40:	81002917 	ldw	r4,164(r16)
   11d44:	81402a17 	ldw	r5,168(r16)
   11d48:	01d614b4 	movhi	r7,22610
   11d4c:	319fcb44 	addi	r6,r6,32557
   11d50:	39fd0b44 	addi	r7,r7,-3027
   11d54:	0011e3c0 	call	11e3c <__muldi3>
   11d58:	11000044 	addi	r4,r2,1
   11d5c:	2085803a 	cmpltu	r2,r4,r2
   11d60:	10c7883a 	add	r3,r2,r3
   11d64:	00a00034 	movhi	r2,32768
   11d68:	10bfffc4 	addi	r2,r2,-1
   11d6c:	1884703a 	and	r2,r3,r2
   11d70:	81002915 	stw	r4,164(r16)
   11d74:	80c02a15 	stw	r3,168(r16)
   11d78:	dfc00117 	ldw	ra,4(sp)
   11d7c:	dc000017 	ldw	r16,0(sp)
   11d80:	dec00204 	addi	sp,sp,8
   11d84:	f800283a 	ret

00011d88 <time>:
   11d88:	00800074 	movhi	r2,1
   11d8c:	defffc04 	addi	sp,sp,-16
   11d90:	10923504 	addi	r2,r2,18644
   11d94:	dc000215 	stw	r16,8(sp)
   11d98:	2021883a 	mov	r16,r4
   11d9c:	11000017 	ldw	r4,0(r2)
   11da0:	000d883a 	mov	r6,zero
   11da4:	d80b883a 	mov	r5,sp
   11da8:	dfc00315 	stw	ra,12(sp)
   11dac:	0011de00 	call	11de0 <_gettimeofday_r>
   11db0:	10000716 	blt	r2,zero,11dd0 <time+0x48>
   11db4:	d8800017 	ldw	r2,0(sp)
   11db8:	80000126 	beq	r16,zero,11dc0 <time+0x38>
   11dbc:	80800015 	stw	r2,0(r16)
   11dc0:	dfc00317 	ldw	ra,12(sp)
   11dc4:	dc000217 	ldw	r16,8(sp)
   11dc8:	dec00404 	addi	sp,sp,16
   11dcc:	f800283a 	ret
   11dd0:	00bfffc4 	movi	r2,-1
   11dd4:	003ffa06 	br	11dc0 <__alt_data_end+0xffff1dc0>

00011dd8 <_times_r>:
   11dd8:	2809883a 	mov	r4,r5
   11ddc:	00123d81 	jmpi	123d8 <times>

00011de0 <_gettimeofday_r>:
   11de0:	defffd04 	addi	sp,sp,-12
   11de4:	2805883a 	mov	r2,r5
   11de8:	dc000015 	stw	r16,0(sp)
   11dec:	04000074 	movhi	r16,1
   11df0:	dc400115 	stw	r17,4(sp)
   11df4:	8413e104 	addi	r16,r16,20356
   11df8:	2023883a 	mov	r17,r4
   11dfc:	300b883a 	mov	r5,r6
   11e00:	1009883a 	mov	r4,r2
   11e04:	dfc00215 	stw	ra,8(sp)
   11e08:	80000015 	stw	zero,0(r16)
   11e0c:	0011e9c0 	call	11e9c <gettimeofday>
   11e10:	00ffffc4 	movi	r3,-1
   11e14:	10c00526 	beq	r2,r3,11e2c <_gettimeofday_r+0x4c>
   11e18:	dfc00217 	ldw	ra,8(sp)
   11e1c:	dc400117 	ldw	r17,4(sp)
   11e20:	dc000017 	ldw	r16,0(sp)
   11e24:	dec00304 	addi	sp,sp,12
   11e28:	f800283a 	ret
   11e2c:	80c00017 	ldw	r3,0(r16)
   11e30:	183ff926 	beq	r3,zero,11e18 <__alt_data_end+0xffff1e18>
   11e34:	88c00015 	stw	r3,0(r17)
   11e38:	003ff706 	br	11e18 <__alt_data_end+0xffff1e18>

00011e3c <__muldi3>:
   11e3c:	223fffcc 	andi	r8,r4,65535
   11e40:	2006d43a 	srli	r3,r4,16
   11e44:	32bfffcc 	andi	r10,r6,65535
   11e48:	3012d43a 	srli	r9,r6,16
   11e4c:	4297383a 	mul	r11,r8,r10
   11e50:	1a95383a 	mul	r10,r3,r10
   11e54:	4251383a 	mul	r8,r8,r9
   11e58:	5804d43a 	srli	r2,r11,16
   11e5c:	4291883a 	add	r8,r8,r10
   11e60:	1205883a 	add	r2,r2,r8
   11e64:	1a51383a 	mul	r8,r3,r9
   11e68:	1280022e 	bgeu	r2,r10,11e74 <__muldi3+0x38>
   11e6c:	00c00074 	movhi	r3,1
   11e70:	40d1883a 	add	r8,r8,r3
   11e74:	1006d43a 	srli	r3,r2,16
   11e78:	21cf383a 	mul	r7,r4,r7
   11e7c:	314b383a 	mul	r5,r6,r5
   11e80:	1004943a 	slli	r2,r2,16
   11e84:	1a11883a 	add	r8,r3,r8
   11e88:	5affffcc 	andi	r11,r11,65535
   11e8c:	3947883a 	add	r3,r7,r5
   11e90:	12c5883a 	add	r2,r2,r11
   11e94:	1a07883a 	add	r3,r3,r8
   11e98:	f800283a 	ret

00011e9c <gettimeofday>:
   11e9c:	defff404 	addi	sp,sp,-48
   11ea0:	dfc00b15 	stw	ra,44(sp)
   11ea4:	df000a15 	stw	fp,40(sp)
   11ea8:	dd000915 	stw	r20,36(sp)
   11eac:	dcc00815 	stw	r19,32(sp)
   11eb0:	dc800715 	stw	r18,28(sp)
   11eb4:	dc400615 	stw	r17,24(sp)
   11eb8:	dc000515 	stw	r16,20(sp)
   11ebc:	df000a04 	addi	fp,sp,40
   11ec0:	e13ff915 	stw	r4,-28(fp)
   11ec4:	e17ffa15 	stw	r5,-24(fp)
   11ec8:	e0bffa17 	ldw	r2,-24(fp)
   11ecc:	e0bff615 	stw	r2,-40(fp)
   11ed0:	d0a1b717 	ldw	r2,-31012(gp)
   11ed4:	e0bff715 	stw	r2,-36(fp)
   11ed8:	d0a1b617 	ldw	r2,-31016(gp)
   11edc:	e0bff815 	stw	r2,-32(fp)
   11ee0:	e0bff817 	ldw	r2,-32(fp)
   11ee4:	10005f26 	beq	r2,zero,12064 <gettimeofday+0x1c8>
   11ee8:	d0a1b117 	ldw	r2,-31036(gp)
   11eec:	1029883a 	mov	r20,r2
   11ef0:	e17ff817 	ldw	r5,-32(fp)
   11ef4:	e13ff717 	ldw	r4,-36(fp)
   11ef8:	0011c040 	call	11c04 <__udivsi3>
   11efc:	a085883a 	add	r2,r20,r2
   11f00:	1007883a 	mov	r3,r2
   11f04:	e0bff917 	ldw	r2,-28(fp)
   11f08:	10c00015 	stw	r3,0(r2)
   11f0c:	d0a1b217 	ldw	r2,-31032(gp)
   11f10:	1029883a 	mov	r20,r2
   11f14:	e0bff717 	ldw	r2,-36(fp)
   11f18:	1021883a 	mov	r16,r2
   11f1c:	0023883a 	mov	r17,zero
   11f20:	e17ff817 	ldw	r5,-32(fp)
   11f24:	010003f4 	movhi	r4,15
   11f28:	21109004 	addi	r4,r4,16960
   11f2c:	0011c040 	call	11c04 <__udivsi3>
   11f30:	1025883a 	mov	r18,r2
   11f34:	0027883a 	mov	r19,zero
   11f38:	900d883a 	mov	r6,r18
   11f3c:	980f883a 	mov	r7,r19
   11f40:	8009883a 	mov	r4,r16
   11f44:	880b883a 	mov	r5,r17
   11f48:	0011e3c0 	call	11e3c <__muldi3>
   11f4c:	1009883a 	mov	r4,r2
   11f50:	180b883a 	mov	r5,r3
   11f54:	2005883a 	mov	r2,r4
   11f58:	2807883a 	mov	r3,r5
   11f5c:	018003f4 	movhi	r6,15
   11f60:	31909004 	addi	r6,r6,16960
   11f64:	000f883a 	mov	r7,zero
   11f68:	1009883a 	mov	r4,r2
   11f6c:	180b883a 	mov	r5,r3
   11f70:	0013bf80 	call	13bf8 <__umoddi3>
   11f74:	1009883a 	mov	r4,r2
   11f78:	180b883a 	mov	r5,r3
   11f7c:	2005883a 	mov	r2,r4
   11f80:	2807883a 	mov	r3,r5
   11f84:	a085883a 	add	r2,r20,r2
   11f88:	1007883a 	mov	r3,r2
   11f8c:	e0bff917 	ldw	r2,-28(fp)
   11f90:	10c00115 	stw	r3,4(r2)
   11f94:	00001406 	br	11fe8 <gettimeofday+0x14c>
   11f98:	e0bff917 	ldw	r2,-28(fp)
   11f9c:	10800017 	ldw	r2,0(r2)
   11fa0:	00800516 	blt	zero,r2,11fb8 <gettimeofday+0x11c>
   11fa4:	e0bff917 	ldw	r2,-28(fp)
   11fa8:	10000015 	stw	zero,0(r2)
   11fac:	e0bff917 	ldw	r2,-28(fp)
   11fb0:	10000115 	stw	zero,4(r2)
   11fb4:	00000f06 	br	11ff4 <gettimeofday+0x158>
   11fb8:	e0bff917 	ldw	r2,-28(fp)
   11fbc:	10800017 	ldw	r2,0(r2)
   11fc0:	10ffffc4 	addi	r3,r2,-1
   11fc4:	e0bff917 	ldw	r2,-28(fp)
   11fc8:	10c00015 	stw	r3,0(r2)
   11fcc:	e0bff917 	ldw	r2,-28(fp)
   11fd0:	10c00117 	ldw	r3,4(r2)
   11fd4:	008003f4 	movhi	r2,15
   11fd8:	10909004 	addi	r2,r2,16960
   11fdc:	1887883a 	add	r3,r3,r2
   11fe0:	e0bff917 	ldw	r2,-28(fp)
   11fe4:	10c00115 	stw	r3,4(r2)
   11fe8:	e0bff917 	ldw	r2,-28(fp)
   11fec:	10800117 	ldw	r2,4(r2)
   11ff0:	103fe916 	blt	r2,zero,11f98 <__alt_data_end+0xffff1f98>
   11ff4:	00000c06 	br	12028 <gettimeofday+0x18c>
   11ff8:	e0bff917 	ldw	r2,-28(fp)
   11ffc:	10800017 	ldw	r2,0(r2)
   12000:	10c00044 	addi	r3,r2,1
   12004:	e0bff917 	ldw	r2,-28(fp)
   12008:	10c00015 	stw	r3,0(r2)
   1200c:	e0bff917 	ldw	r2,-28(fp)
   12010:	10c00117 	ldw	r3,4(r2)
   12014:	00bffc74 	movhi	r2,65521
   12018:	10af7004 	addi	r2,r2,-16960
   1201c:	1887883a 	add	r3,r3,r2
   12020:	e0bff917 	ldw	r2,-28(fp)
   12024:	10c00115 	stw	r3,4(r2)
   12028:	e0bff917 	ldw	r2,-28(fp)
   1202c:	10c00117 	ldw	r3,4(r2)
   12030:	008003f4 	movhi	r2,15
   12034:	10908fc4 	addi	r2,r2,16959
   12038:	10ffef16 	blt	r2,r3,11ff8 <__alt_data_end+0xffff1ff8>
   1203c:	e0bff617 	ldw	r2,-40(fp)
   12040:	10000626 	beq	r2,zero,1205c <gettimeofday+0x1c0>
   12044:	d0e1af17 	ldw	r3,-31044(gp)
   12048:	e0bff617 	ldw	r2,-40(fp)
   1204c:	10c00015 	stw	r3,0(r2)
   12050:	d0e1b017 	ldw	r3,-31040(gp)
   12054:	e0bff617 	ldw	r2,-40(fp)
   12058:	10c00115 	stw	r3,4(r2)
   1205c:	0005883a 	mov	r2,zero
   12060:	00000106 	br	12068 <gettimeofday+0x1cc>
   12064:	00bfde84 	movi	r2,-134
   12068:	e6fffb04 	addi	sp,fp,-20
   1206c:	dfc00617 	ldw	ra,24(sp)
   12070:	df000517 	ldw	fp,20(sp)
   12074:	dd000417 	ldw	r20,16(sp)
   12078:	dcc00317 	ldw	r19,12(sp)
   1207c:	dc800217 	ldw	r18,8(sp)
   12080:	dc400117 	ldw	r17,4(sp)
   12084:	dc000017 	ldw	r16,0(sp)
   12088:	dec00704 	addi	sp,sp,28
   1208c:	f800283a 	ret

00012090 <alt_load_section>:
   12090:	defffc04 	addi	sp,sp,-16
   12094:	df000315 	stw	fp,12(sp)
   12098:	df000304 	addi	fp,sp,12
   1209c:	e13ffd15 	stw	r4,-12(fp)
   120a0:	e17ffe15 	stw	r5,-8(fp)
   120a4:	e1bfff15 	stw	r6,-4(fp)
   120a8:	e0fffe17 	ldw	r3,-8(fp)
   120ac:	e0bffd17 	ldw	r2,-12(fp)
   120b0:	18800c26 	beq	r3,r2,120e4 <alt_load_section+0x54>
   120b4:	00000806 	br	120d8 <alt_load_section+0x48>
   120b8:	e0bffe17 	ldw	r2,-8(fp)
   120bc:	10c00104 	addi	r3,r2,4
   120c0:	e0fffe15 	stw	r3,-8(fp)
   120c4:	e0fffd17 	ldw	r3,-12(fp)
   120c8:	19000104 	addi	r4,r3,4
   120cc:	e13ffd15 	stw	r4,-12(fp)
   120d0:	18c00017 	ldw	r3,0(r3)
   120d4:	10c00015 	stw	r3,0(r2)
   120d8:	e0fffe17 	ldw	r3,-8(fp)
   120dc:	e0bfff17 	ldw	r2,-4(fp)
   120e0:	18bff51e 	bne	r3,r2,120b8 <__alt_data_end+0xffff20b8>
   120e4:	0001883a 	nop
   120e8:	e037883a 	mov	sp,fp
   120ec:	df000017 	ldw	fp,0(sp)
   120f0:	dec00104 	addi	sp,sp,4
   120f4:	f800283a 	ret

000120f8 <alt_load>:
   120f8:	defffe04 	addi	sp,sp,-8
   120fc:	dfc00115 	stw	ra,4(sp)
   12100:	df000015 	stw	fp,0(sp)
   12104:	d839883a 	mov	fp,sp
   12108:	01800074 	movhi	r6,1
   1210c:	31923f04 	addi	r6,r6,18684
   12110:	01400074 	movhi	r5,1
   12114:	2950aa04 	addi	r5,r5,17064
   12118:	01000074 	movhi	r4,1
   1211c:	21123f04 	addi	r4,r4,18684
   12120:	00120900 	call	12090 <alt_load_section>
   12124:	01800074 	movhi	r6,1
   12128:	31807004 	addi	r6,r6,448
   1212c:	01400074 	movhi	r5,1
   12130:	29400804 	addi	r5,r5,32
   12134:	01000074 	movhi	r4,1
   12138:	21000804 	addi	r4,r4,32
   1213c:	00120900 	call	12090 <alt_load_section>
   12140:	01800074 	movhi	r6,1
   12144:	3190aa04 	addi	r6,r6,17064
   12148:	01400074 	movhi	r5,1
   1214c:	29505904 	addi	r5,r5,16740
   12150:	01000074 	movhi	r4,1
   12154:	21105904 	addi	r4,r4,16740
   12158:	00120900 	call	12090 <alt_load_section>
   1215c:	0012c300 	call	12c30 <alt_dcache_flush_all>
   12160:	0012e440 	call	12e44 <alt_icache_flush_all>
   12164:	0001883a 	nop
   12168:	e037883a 	mov	sp,fp
   1216c:	dfc00117 	ldw	ra,4(sp)
   12170:	df000017 	ldw	fp,0(sp)
   12174:	dec00204 	addi	sp,sp,8
   12178:	f800283a 	ret

0001217c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1217c:	defffd04 	addi	sp,sp,-12
   12180:	dfc00215 	stw	ra,8(sp)
   12184:	df000115 	stw	fp,4(sp)
   12188:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1218c:	0009883a 	mov	r4,zero
   12190:	00124840 	call	12484 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   12194:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   12198:	00124bc0 	call	124bc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1219c:	01800074 	movhi	r6,1
   121a0:	31905a04 	addi	r6,r6,16744
   121a4:	01400074 	movhi	r5,1
   121a8:	29505a04 	addi	r5,r5,16744
   121ac:	01000074 	movhi	r4,1
   121b0:	21105a04 	addi	r4,r4,16744
   121b4:	00131dc0 	call	131dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   121b8:	0012d840 	call	12d84 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   121bc:	01000074 	movhi	r4,1
   121c0:	210b7904 	addi	r4,r4,11748
   121c4:	00138000 	call	13800 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   121c8:	d0a1b317 	ldw	r2,-31028(gp)
   121cc:	d0e1b417 	ldw	r3,-31024(gp)
   121d0:	d121b517 	ldw	r4,-31020(gp)
   121d4:	200d883a 	mov	r6,r4
   121d8:	180b883a 	mov	r5,r3
   121dc:	1009883a 	mov	r4,r2
   121e0:	0011ab40 	call	11ab4 <main>
   121e4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   121e8:	01000044 	movi	r4,1
   121ec:	0012b600 	call	12b60 <close>
  exit (result);
   121f0:	e13fff17 	ldw	r4,-4(fp)
   121f4:	00138140 	call	13814 <exit>

000121f8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   121f8:	defffa04 	addi	sp,sp,-24
   121fc:	df000515 	stw	fp,20(sp)
   12200:	df000504 	addi	fp,sp,20
   12204:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12208:	0005303a 	rdctl	r2,status
   1220c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12210:	e0fffc17 	ldw	r3,-16(fp)
   12214:	00bfff84 	movi	r2,-2
   12218:	1884703a 	and	r2,r3,r2
   1221c:	1001703a 	wrctl	status,r2
  
  return context;
   12220:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   12224:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   12228:	e0bfff17 	ldw	r2,-4(fp)
   1222c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   12230:	e0bffd17 	ldw	r2,-12(fp)
   12234:	10800017 	ldw	r2,0(r2)
   12238:	e0fffd17 	ldw	r3,-12(fp)
   1223c:	18c00117 	ldw	r3,4(r3)
   12240:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   12244:	e0bffd17 	ldw	r2,-12(fp)
   12248:	10800117 	ldw	r2,4(r2)
   1224c:	e0fffd17 	ldw	r3,-12(fp)
   12250:	18c00017 	ldw	r3,0(r3)
   12254:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   12258:	e0bffd17 	ldw	r2,-12(fp)
   1225c:	e0fffd17 	ldw	r3,-12(fp)
   12260:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   12264:	e0bffd17 	ldw	r2,-12(fp)
   12268:	e0fffd17 	ldw	r3,-12(fp)
   1226c:	10c00015 	stw	r3,0(r2)
   12270:	e0bffb17 	ldw	r2,-20(fp)
   12274:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12278:	e0bffe17 	ldw	r2,-8(fp)
   1227c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   12280:	0001883a 	nop
   12284:	e037883a 	mov	sp,fp
   12288:	df000017 	ldw	fp,0(sp)
   1228c:	dec00104 	addi	sp,sp,4
   12290:	f800283a 	ret

00012294 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12294:	defffb04 	addi	sp,sp,-20
   12298:	dfc00415 	stw	ra,16(sp)
   1229c:	df000315 	stw	fp,12(sp)
   122a0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   122a4:	d0a00317 	ldw	r2,-32756(gp)
   122a8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   122ac:	d0a1b717 	ldw	r2,-31012(gp)
   122b0:	10800044 	addi	r2,r2,1
   122b4:	d0a1b715 	stw	r2,-31012(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   122b8:	00002e06 	br	12374 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   122bc:	e0bffd17 	ldw	r2,-12(fp)
   122c0:	10800017 	ldw	r2,0(r2)
   122c4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   122c8:	e0bffd17 	ldw	r2,-12(fp)
   122cc:	10800403 	ldbu	r2,16(r2)
   122d0:	10803fcc 	andi	r2,r2,255
   122d4:	10000426 	beq	r2,zero,122e8 <alt_tick+0x54>
   122d8:	d0a1b717 	ldw	r2,-31012(gp)
   122dc:	1000021e 	bne	r2,zero,122e8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   122e0:	e0bffd17 	ldw	r2,-12(fp)
   122e4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   122e8:	e0bffd17 	ldw	r2,-12(fp)
   122ec:	10800217 	ldw	r2,8(r2)
   122f0:	d0e1b717 	ldw	r3,-31012(gp)
   122f4:	18801d36 	bltu	r3,r2,1236c <alt_tick+0xd8>
   122f8:	e0bffd17 	ldw	r2,-12(fp)
   122fc:	10800403 	ldbu	r2,16(r2)
   12300:	10803fcc 	andi	r2,r2,255
   12304:	1000191e 	bne	r2,zero,1236c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   12308:	e0bffd17 	ldw	r2,-12(fp)
   1230c:	10800317 	ldw	r2,12(r2)
   12310:	e0fffd17 	ldw	r3,-12(fp)
   12314:	18c00517 	ldw	r3,20(r3)
   12318:	1809883a 	mov	r4,r3
   1231c:	103ee83a 	callr	r2
   12320:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   12324:	e0bfff17 	ldw	r2,-4(fp)
   12328:	1000031e 	bne	r2,zero,12338 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1232c:	e13ffd17 	ldw	r4,-12(fp)
   12330:	00121f80 	call	121f8 <alt_alarm_stop>
   12334:	00000d06 	br	1236c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   12338:	e0bffd17 	ldw	r2,-12(fp)
   1233c:	10c00217 	ldw	r3,8(r2)
   12340:	e0bfff17 	ldw	r2,-4(fp)
   12344:	1887883a 	add	r3,r3,r2
   12348:	e0bffd17 	ldw	r2,-12(fp)
   1234c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   12350:	e0bffd17 	ldw	r2,-12(fp)
   12354:	10c00217 	ldw	r3,8(r2)
   12358:	d0a1b717 	ldw	r2,-31012(gp)
   1235c:	1880032e 	bgeu	r3,r2,1236c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   12360:	e0bffd17 	ldw	r2,-12(fp)
   12364:	00c00044 	movi	r3,1
   12368:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1236c:	e0bffe17 	ldw	r2,-8(fp)
   12370:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12374:	e0fffd17 	ldw	r3,-12(fp)
   12378:	d0a00304 	addi	r2,gp,-32756
   1237c:	18bfcf1e 	bne	r3,r2,122bc <__alt_data_end+0xffff22bc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   12380:	0001883a 	nop
}
   12384:	0001883a 	nop
   12388:	e037883a 	mov	sp,fp
   1238c:	dfc00117 	ldw	ra,4(sp)
   12390:	df000017 	ldw	fp,0(sp)
   12394:	dec00204 	addi	sp,sp,8
   12398:	f800283a 	ret

0001239c <alt_get_errno>:
   1239c:	defffe04 	addi	sp,sp,-8
   123a0:	dfc00115 	stw	ra,4(sp)
   123a4:	df000015 	stw	fp,0(sp)
   123a8:	d839883a 	mov	fp,sp
   123ac:	d0a00a17 	ldw	r2,-32728(gp)
   123b0:	10000326 	beq	r2,zero,123c0 <alt_get_errno+0x24>
   123b4:	d0a00a17 	ldw	r2,-32728(gp)
   123b8:	103ee83a 	callr	r2
   123bc:	00000106 	br	123c4 <alt_get_errno+0x28>
   123c0:	d0a1ae04 	addi	r2,gp,-31048
   123c4:	e037883a 	mov	sp,fp
   123c8:	dfc00117 	ldw	ra,4(sp)
   123cc:	df000017 	ldw	fp,0(sp)
   123d0:	dec00204 	addi	sp,sp,8
   123d4:	f800283a 	ret

000123d8 <times>:
   123d8:	defffc04 	addi	sp,sp,-16
   123dc:	dfc00315 	stw	ra,12(sp)
   123e0:	df000215 	stw	fp,8(sp)
   123e4:	df000204 	addi	fp,sp,8
   123e8:	e13fff15 	stw	r4,-4(fp)
   123ec:	d0a1b717 	ldw	r2,-31012(gp)
   123f0:	e0bffe15 	stw	r2,-8(fp)
   123f4:	d0a1b617 	ldw	r2,-31016(gp)
   123f8:	1000061e 	bne	r2,zero,12414 <times+0x3c>
   123fc:	001239c0 	call	1239c <alt_get_errno>
   12400:	1007883a 	mov	r3,r2
   12404:	00801604 	movi	r2,88
   12408:	18800015 	stw	r2,0(r3)
   1240c:	0005883a 	mov	r2,zero
   12410:	00000a06 	br	1243c <times+0x64>
   12414:	e0bfff17 	ldw	r2,-4(fp)
   12418:	10000015 	stw	zero,0(r2)
   1241c:	e0bfff17 	ldw	r2,-4(fp)
   12420:	e0fffe17 	ldw	r3,-8(fp)
   12424:	10c00115 	stw	r3,4(r2)
   12428:	e0bfff17 	ldw	r2,-4(fp)
   1242c:	10000215 	stw	zero,8(r2)
   12430:	e0bfff17 	ldw	r2,-4(fp)
   12434:	10000315 	stw	zero,12(r2)
   12438:	e0bffe17 	ldw	r2,-8(fp)
   1243c:	e037883a 	mov	sp,fp
   12440:	dfc00117 	ldw	ra,4(sp)
   12444:	df000017 	ldw	fp,0(sp)
   12448:	dec00204 	addi	sp,sp,8
   1244c:	f800283a 	ret

00012450 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   12450:	defffd04 	addi	sp,sp,-12
   12454:	dfc00215 	stw	ra,8(sp)
   12458:	df000115 	stw	fp,4(sp)
   1245c:	df000104 	addi	fp,sp,4
   12460:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   12464:	d1600704 	addi	r5,gp,-32740
   12468:	e13fff17 	ldw	r4,-4(fp)
   1246c:	0012ce00 	call	12ce0 <alt_dev_llist_insert>
}
   12470:	e037883a 	mov	sp,fp
   12474:	dfc00117 	ldw	ra,4(sp)
   12478:	df000017 	ldw	fp,0(sp)
   1247c:	dec00204 	addi	sp,sp,8
   12480:	f800283a 	ret

00012484 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   12484:	defffd04 	addi	sp,sp,-12
   12488:	dfc00215 	stw	ra,8(sp)
   1248c:	df000115 	stw	fp,4(sp)
   12490:	df000104 	addi	fp,sp,4
   12494:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   12498:	00135100 	call	13510 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1249c:	00800044 	movi	r2,1
   124a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   124a4:	0001883a 	nop
   124a8:	e037883a 	mov	sp,fp
   124ac:	dfc00117 	ldw	ra,4(sp)
   124b0:	df000017 	ldw	fp,0(sp)
   124b4:	dec00204 	addi	sp,sp,8
   124b8:	f800283a 	ret

000124bc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   124bc:	defffe04 	addi	sp,sp,-8
   124c0:	dfc00115 	stw	ra,4(sp)
   124c4:	df000015 	stw	fp,0(sp)
   124c8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   124cc:	01c0fa04 	movi	r7,1000
   124d0:	01800044 	movi	r6,1
   124d4:	000b883a 	mov	r5,zero
   124d8:	010000b4 	movhi	r4,2
   124dc:	21041804 	addi	r4,r4,4192
   124e0:	00127cc0 	call	127cc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   124e4:	01000074 	movhi	r4,1
   124e8:	2111b304 	addi	r4,r4,18124
   124ec:	00124500 	call	12450 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   124f0:	01000074 	movhi	r4,1
   124f4:	2111be04 	addi	r4,r4,18168
   124f8:	00124500 	call	12450 <alt_dev_reg>
}
   124fc:	0001883a 	nop
   12500:	e037883a 	mov	sp,fp
   12504:	dfc00117 	ldw	ra,4(sp)
   12508:	df000017 	ldw	fp,0(sp)
   1250c:	dec00204 	addi	sp,sp,8
   12510:	f800283a 	ret

00012514 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   12514:	defffa04 	addi	sp,sp,-24
   12518:	dfc00515 	stw	ra,20(sp)
   1251c:	df000415 	stw	fp,16(sp)
   12520:	df000404 	addi	fp,sp,16
   12524:	e13ffd15 	stw	r4,-12(fp)
   12528:	e17ffe15 	stw	r5,-8(fp)
   1252c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12530:	e0bffd17 	ldw	r2,-12(fp)
   12534:	10800017 	ldw	r2,0(r2)
   12538:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1253c:	e0bffc17 	ldw	r2,-16(fp)
   12540:	10c00a04 	addi	r3,r2,40
   12544:	e0bffd17 	ldw	r2,-12(fp)
   12548:	10800217 	ldw	r2,8(r2)
   1254c:	100f883a 	mov	r7,r2
   12550:	e1bfff17 	ldw	r6,-4(fp)
   12554:	e17ffe17 	ldw	r5,-8(fp)
   12558:	1809883a 	mov	r4,r3
   1255c:	00125d40 	call	125d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   12560:	e037883a 	mov	sp,fp
   12564:	dfc00117 	ldw	ra,4(sp)
   12568:	df000017 	ldw	fp,0(sp)
   1256c:	dec00204 	addi	sp,sp,8
   12570:	f800283a 	ret

00012574 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   12574:	defffa04 	addi	sp,sp,-24
   12578:	dfc00515 	stw	ra,20(sp)
   1257c:	df000415 	stw	fp,16(sp)
   12580:	df000404 	addi	fp,sp,16
   12584:	e13ffd15 	stw	r4,-12(fp)
   12588:	e17ffe15 	stw	r5,-8(fp)
   1258c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12590:	e0bffd17 	ldw	r2,-12(fp)
   12594:	10800017 	ldw	r2,0(r2)
   12598:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1259c:	e0bffc17 	ldw	r2,-16(fp)
   125a0:	10c00a04 	addi	r3,r2,40
   125a4:	e0bffd17 	ldw	r2,-12(fp)
   125a8:	10800217 	ldw	r2,8(r2)
   125ac:	100f883a 	mov	r7,r2
   125b0:	e1bfff17 	ldw	r6,-4(fp)
   125b4:	e17ffe17 	ldw	r5,-8(fp)
   125b8:	1809883a 	mov	r4,r3
   125bc:	00126c00 	call	126c0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   125c0:	e037883a 	mov	sp,fp
   125c4:	dfc00117 	ldw	ra,4(sp)
   125c8:	df000017 	ldw	fp,0(sp)
   125cc:	dec00204 	addi	sp,sp,8
   125d0:	f800283a 	ret

000125d4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   125d4:	defff704 	addi	sp,sp,-36
   125d8:	df000815 	stw	fp,32(sp)
   125dc:	df000804 	addi	fp,sp,32
   125e0:	e13ffc15 	stw	r4,-16(fp)
   125e4:	e17ffd15 	stw	r5,-12(fp)
   125e8:	e1bffe15 	stw	r6,-8(fp)
   125ec:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   125f0:	e0bffc17 	ldw	r2,-16(fp)
   125f4:	10800017 	ldw	r2,0(r2)
   125f8:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   125fc:	e0bffd17 	ldw	r2,-12(fp)
   12600:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   12604:	e0bffe17 	ldw	r2,-8(fp)
   12608:	e0fffd17 	ldw	r3,-12(fp)
   1260c:	1885883a 	add	r2,r3,r2
   12610:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   12614:	00001206 	br	12660 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   12618:	e0bff917 	ldw	r2,-28(fp)
   1261c:	10800037 	ldwio	r2,0(r2)
   12620:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   12624:	e0bffb17 	ldw	r2,-20(fp)
   12628:	10a0000c 	andi	r2,r2,32768
   1262c:	10000626 	beq	r2,zero,12648 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   12630:	e0bff817 	ldw	r2,-32(fp)
   12634:	10c00044 	addi	r3,r2,1
   12638:	e0fff815 	stw	r3,-32(fp)
   1263c:	e0fffb17 	ldw	r3,-20(fp)
   12640:	10c00005 	stb	r3,0(r2)
   12644:	00000606 	br	12660 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   12648:	e0fff817 	ldw	r3,-32(fp)
   1264c:	e0bffd17 	ldw	r2,-12(fp)
   12650:	1880071e 	bne	r3,r2,12670 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   12654:	e0bfff17 	ldw	r2,-4(fp)
   12658:	1090000c 	andi	r2,r2,16384
   1265c:	1000061e 	bne	r2,zero,12678 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   12660:	e0fff817 	ldw	r3,-32(fp)
   12664:	e0bffa17 	ldw	r2,-24(fp)
   12668:	18bfeb36 	bltu	r3,r2,12618 <__alt_data_end+0xffff2618>
   1266c:	00000306 	br	1267c <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   12670:	0001883a 	nop
   12674:	00000106 	br	1267c <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   12678:	0001883a 	nop
    
  }

  if (ptr != buffer)
   1267c:	e0fff817 	ldw	r3,-32(fp)
   12680:	e0bffd17 	ldw	r2,-12(fp)
   12684:	18800426 	beq	r3,r2,12698 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   12688:	e0fff817 	ldw	r3,-32(fp)
   1268c:	e0bffd17 	ldw	r2,-12(fp)
   12690:	1885c83a 	sub	r2,r3,r2
   12694:	00000606 	br	126b0 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   12698:	e0bfff17 	ldw	r2,-4(fp)
   1269c:	1090000c 	andi	r2,r2,16384
   126a0:	10000226 	beq	r2,zero,126ac <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   126a4:	00bffd44 	movi	r2,-11
   126a8:	00000106 	br	126b0 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   126ac:	00bffec4 	movi	r2,-5
}
   126b0:	e037883a 	mov	sp,fp
   126b4:	df000017 	ldw	fp,0(sp)
   126b8:	dec00104 	addi	sp,sp,4
   126bc:	f800283a 	ret

000126c0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   126c0:	defff904 	addi	sp,sp,-28
   126c4:	df000615 	stw	fp,24(sp)
   126c8:	df000604 	addi	fp,sp,24
   126cc:	e13ffc15 	stw	r4,-16(fp)
   126d0:	e17ffd15 	stw	r5,-12(fp)
   126d4:	e1bffe15 	stw	r6,-8(fp)
   126d8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   126dc:	e0bffc17 	ldw	r2,-16(fp)
   126e0:	10800017 	ldw	r2,0(r2)
   126e4:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   126e8:	e0bffe17 	ldw	r2,-8(fp)
   126ec:	e0fffd17 	ldw	r3,-12(fp)
   126f0:	1885883a 	add	r2,r3,r2
   126f4:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   126f8:	00000e06 	br	12734 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   126fc:	e0bffa17 	ldw	r2,-24(fp)
   12700:	10800104 	addi	r2,r2,4
   12704:	10800037 	ldwio	r2,0(r2)
   12708:	10bfffec 	andhi	r2,r2,65535
   1270c:	10000926 	beq	r2,zero,12734 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   12710:	e0fffa17 	ldw	r3,-24(fp)
   12714:	e0bffd17 	ldw	r2,-12(fp)
   12718:	11000044 	addi	r4,r2,1
   1271c:	e13ffd15 	stw	r4,-12(fp)
   12720:	10800003 	ldbu	r2,0(r2)
   12724:	10803fcc 	andi	r2,r2,255
   12728:	1080201c 	xori	r2,r2,128
   1272c:	10bfe004 	addi	r2,r2,-128
   12730:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   12734:	e0fffd17 	ldw	r3,-12(fp)
   12738:	e0bffb17 	ldw	r2,-20(fp)
   1273c:	18bfef36 	bltu	r3,r2,126fc <__alt_data_end+0xffff26fc>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   12740:	e0bffe17 	ldw	r2,-8(fp)
}
   12744:	e037883a 	mov	sp,fp
   12748:	df000017 	ldw	fp,0(sp)
   1274c:	dec00104 	addi	sp,sp,4
   12750:	f800283a 	ret

00012754 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   12754:	defffa04 	addi	sp,sp,-24
   12758:	dfc00515 	stw	ra,20(sp)
   1275c:	df000415 	stw	fp,16(sp)
   12760:	df000404 	addi	fp,sp,16
   12764:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   12768:	0007883a 	mov	r3,zero
   1276c:	e0bfff17 	ldw	r2,-4(fp)
   12770:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   12774:	e0bfff17 	ldw	r2,-4(fp)
   12778:	10800104 	addi	r2,r2,4
   1277c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12780:	0005303a 	rdctl	r2,status
   12784:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12788:	e0fffd17 	ldw	r3,-12(fp)
   1278c:	00bfff84 	movi	r2,-2
   12790:	1884703a 	and	r2,r3,r2
   12794:	1001703a 	wrctl	status,r2
  
  return context;
   12798:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1279c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   127a0:	00122940 	call	12294 <alt_tick>
   127a4:	e0bffc17 	ldw	r2,-16(fp)
   127a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   127ac:	e0bffe17 	ldw	r2,-8(fp)
   127b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   127b4:	0001883a 	nop
   127b8:	e037883a 	mov	sp,fp
   127bc:	dfc00117 	ldw	ra,4(sp)
   127c0:	df000017 	ldw	fp,0(sp)
   127c4:	dec00204 	addi	sp,sp,8
   127c8:	f800283a 	ret

000127cc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   127cc:	defff804 	addi	sp,sp,-32
   127d0:	dfc00715 	stw	ra,28(sp)
   127d4:	df000615 	stw	fp,24(sp)
   127d8:	df000604 	addi	fp,sp,24
   127dc:	e13ffc15 	stw	r4,-16(fp)
   127e0:	e17ffd15 	stw	r5,-12(fp)
   127e4:	e1bffe15 	stw	r6,-8(fp)
   127e8:	e1ffff15 	stw	r7,-4(fp)
   127ec:	e0bfff17 	ldw	r2,-4(fp)
   127f0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   127f4:	d0a1b617 	ldw	r2,-31016(gp)
   127f8:	1000021e 	bne	r2,zero,12804 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   127fc:	e0bffb17 	ldw	r2,-20(fp)
   12800:	d0a1b615 	stw	r2,-31016(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   12804:	e0bffc17 	ldw	r2,-16(fp)
   12808:	10800104 	addi	r2,r2,4
   1280c:	00c001c4 	movi	r3,7
   12810:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   12814:	d8000015 	stw	zero,0(sp)
   12818:	e1fffc17 	ldw	r7,-16(fp)
   1281c:	01800074 	movhi	r6,1
   12820:	3189d504 	addi	r6,r6,10068
   12824:	e17ffe17 	ldw	r5,-8(fp)
   12828:	e13ffd17 	ldw	r4,-12(fp)
   1282c:	0012e780 	call	12e78 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   12830:	0001883a 	nop
   12834:	e037883a 	mov	sp,fp
   12838:	dfc00117 	ldw	ra,4(sp)
   1283c:	df000017 	ldw	fp,0(sp)
   12840:	dec00204 	addi	sp,sp,8
   12844:	f800283a 	ret

00012848 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   12848:	defffa04 	addi	sp,sp,-24
   1284c:	dfc00515 	stw	ra,20(sp)
   12850:	df000415 	stw	fp,16(sp)
   12854:	df000404 	addi	fp,sp,16
   12858:	e13ffd15 	stw	r4,-12(fp)
   1285c:	e17ffe15 	stw	r5,-8(fp)
   12860:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   12864:	e0bffd17 	ldw	r2,-12(fp)
   12868:	10800017 	ldw	r2,0(r2)
   1286c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   12870:	e0bffc17 	ldw	r2,-16(fp)
   12874:	10c00a04 	addi	r3,r2,40
   12878:	e0bffd17 	ldw	r2,-12(fp)
   1287c:	10800217 	ldw	r2,8(r2)
   12880:	100f883a 	mov	r7,r2
   12884:	e1bfff17 	ldw	r6,-4(fp)
   12888:	e17ffe17 	ldw	r5,-8(fp)
   1288c:	1809883a 	mov	r4,r3
   12890:	00129440 	call	12944 <altera_avalon_uart_read>
      fd->fd_flags);
}
   12894:	e037883a 	mov	sp,fp
   12898:	dfc00117 	ldw	ra,4(sp)
   1289c:	df000017 	ldw	fp,0(sp)
   128a0:	dec00204 	addi	sp,sp,8
   128a4:	f800283a 	ret

000128a8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   128a8:	defffa04 	addi	sp,sp,-24
   128ac:	dfc00515 	stw	ra,20(sp)
   128b0:	df000415 	stw	fp,16(sp)
   128b4:	df000404 	addi	fp,sp,16
   128b8:	e13ffd15 	stw	r4,-12(fp)
   128bc:	e17ffe15 	stw	r5,-8(fp)
   128c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   128c4:	e0bffd17 	ldw	r2,-12(fp)
   128c8:	10800017 	ldw	r2,0(r2)
   128cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   128d0:	e0bffc17 	ldw	r2,-16(fp)
   128d4:	10c00a04 	addi	r3,r2,40
   128d8:	e0bffd17 	ldw	r2,-12(fp)
   128dc:	10800217 	ldw	r2,8(r2)
   128e0:	100f883a 	mov	r7,r2
   128e4:	e1bfff17 	ldw	r6,-4(fp)
   128e8:	e17ffe17 	ldw	r5,-8(fp)
   128ec:	1809883a 	mov	r4,r3
   128f0:	0012a440 	call	12a44 <altera_avalon_uart_write>
      fd->fd_flags);
}
   128f4:	e037883a 	mov	sp,fp
   128f8:	dfc00117 	ldw	ra,4(sp)
   128fc:	df000017 	ldw	fp,0(sp)
   12900:	dec00204 	addi	sp,sp,8
   12904:	f800283a 	ret

00012908 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12908:	defffe04 	addi	sp,sp,-8
   1290c:	dfc00115 	stw	ra,4(sp)
   12910:	df000015 	stw	fp,0(sp)
   12914:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12918:	d0a00a17 	ldw	r2,-32728(gp)
   1291c:	10000326 	beq	r2,zero,1292c <alt_get_errno+0x24>
   12920:	d0a00a17 	ldw	r2,-32728(gp)
   12924:	103ee83a 	callr	r2
   12928:	00000106 	br	12930 <alt_get_errno+0x28>
   1292c:	d0a1ae04 	addi	r2,gp,-31048
}
   12930:	e037883a 	mov	sp,fp
   12934:	dfc00117 	ldw	ra,4(sp)
   12938:	df000017 	ldw	fp,0(sp)
   1293c:	dec00204 	addi	sp,sp,8
   12940:	f800283a 	ret

00012944 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   12944:	defff804 	addi	sp,sp,-32
   12948:	dfc00715 	stw	ra,28(sp)
   1294c:	df000615 	stw	fp,24(sp)
   12950:	df000604 	addi	fp,sp,24
   12954:	e13ffc15 	stw	r4,-16(fp)
   12958:	e17ffd15 	stw	r5,-12(fp)
   1295c:	e1bffe15 	stw	r6,-8(fp)
   12960:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
   12964:	e0bfff17 	ldw	r2,-4(fp)
   12968:	1090000c 	andi	r2,r2,16384
   1296c:	1005003a 	cmpeq	r2,r2,zero
   12970:	10803fcc 	andi	r2,r2,255
   12974:	e0bffa15 	stw	r2,-24(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   12978:	e0bffc17 	ldw	r2,-16(fp)
   1297c:	10800017 	ldw	r2,0(r2)
   12980:	10800204 	addi	r2,r2,8
   12984:	10800037 	ldwio	r2,0(r2)
   12988:	e0bffb15 	stw	r2,-20(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
   1298c:	e0bffc17 	ldw	r2,-16(fp)
   12990:	10800017 	ldw	r2,0(r2)
   12994:	10800204 	addi	r2,r2,8
   12998:	0007883a 	mov	r3,zero
   1299c:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
   129a0:	e0bffb17 	ldw	r2,-20(fp)
   129a4:	1080200c 	andi	r2,r2,128
   129a8:	10000b26 	beq	r2,zero,129d8 <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   129ac:	e0bffc17 	ldw	r2,-16(fp)
   129b0:	10800017 	ldw	r2,0(r2)
   129b4:	10800037 	ldwio	r2,0(r2)
   129b8:	1007883a 	mov	r3,r2
   129bc:	e0bffd17 	ldw	r2,-12(fp)
   129c0:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   129c4:	e0bffb17 	ldw	r2,-20(fp)
   129c8:	108000cc 	andi	r2,r2,3
   129cc:	1000021e 	bne	r2,zero,129d8 <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
   129d0:	00800044 	movi	r2,1
   129d4:	00000706 	br	129f4 <altera_avalon_uart_read+0xb0>
      }
    }
  }
  while (block);
   129d8:	e0bffa17 	ldw	r2,-24(fp)
   129dc:	103fe61e 	bne	r2,zero,12978 <__alt_data_end+0xffff2978>

  ALT_ERRNO = EWOULDBLOCK;
   129e0:	00129080 	call	12908 <alt_get_errno>
   129e4:	1007883a 	mov	r3,r2
   129e8:	008002c4 	movi	r2,11
   129ec:	18800015 	stw	r2,0(r3)
 
  return 0;
   129f0:	0005883a 	mov	r2,zero
}
   129f4:	e037883a 	mov	sp,fp
   129f8:	dfc00117 	ldw	ra,4(sp)
   129fc:	df000017 	ldw	fp,0(sp)
   12a00:	dec00204 	addi	sp,sp,8
   12a04:	f800283a 	ret

00012a08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12a08:	defffe04 	addi	sp,sp,-8
   12a0c:	dfc00115 	stw	ra,4(sp)
   12a10:	df000015 	stw	fp,0(sp)
   12a14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12a18:	d0a00a17 	ldw	r2,-32728(gp)
   12a1c:	10000326 	beq	r2,zero,12a2c <alt_get_errno+0x24>
   12a20:	d0a00a17 	ldw	r2,-32728(gp)
   12a24:	103ee83a 	callr	r2
   12a28:	00000106 	br	12a30 <alt_get_errno+0x28>
   12a2c:	d0a1ae04 	addi	r2,gp,-31048
}
   12a30:	e037883a 	mov	sp,fp
   12a34:	dfc00117 	ldw	ra,4(sp)
   12a38:	df000017 	ldw	fp,0(sp)
   12a3c:	dec00204 	addi	sp,sp,8
   12a40:	f800283a 	ret

00012a44 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   12a44:	defff704 	addi	sp,sp,-36
   12a48:	dfc00815 	stw	ra,32(sp)
   12a4c:	df000715 	stw	fp,28(sp)
   12a50:	df000704 	addi	fp,sp,28
   12a54:	e13ffc15 	stw	r4,-16(fp)
   12a58:	e17ffd15 	stw	r5,-12(fp)
   12a5c:	e1bffe15 	stw	r6,-8(fp)
   12a60:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
   12a64:	e0bfff17 	ldw	r2,-4(fp)
   12a68:	1090000c 	andi	r2,r2,16384
   12a6c:	1005003a 	cmpeq	r2,r2,zero
   12a70:	10803fcc 	andi	r2,r2,255
   12a74:	e0bffa15 	stw	r2,-24(fp)
  count = len;
   12a78:	e0bffe17 	ldw	r2,-8(fp)
   12a7c:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   12a80:	e0bffc17 	ldw	r2,-16(fp)
   12a84:	10800017 	ldw	r2,0(r2)
   12a88:	10800204 	addi	r2,r2,8
   12a8c:	10800037 	ldwio	r2,0(r2)
   12a90:	e0bffb15 	stw	r2,-20(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
   12a94:	e0bffb17 	ldw	r2,-20(fp)
   12a98:	1080100c 	andi	r2,r2,64
   12a9c:	10000f26 	beq	r2,zero,12adc <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
   12aa0:	e0bffc17 	ldw	r2,-16(fp)
   12aa4:	10800017 	ldw	r2,0(r2)
   12aa8:	10800104 	addi	r2,r2,4
   12aac:	1009883a 	mov	r4,r2
   12ab0:	e0bffd17 	ldw	r2,-12(fp)
   12ab4:	10c00044 	addi	r3,r2,1
   12ab8:	e0fffd15 	stw	r3,-12(fp)
   12abc:	10800003 	ldbu	r2,0(r2)
   12ac0:	10803fcc 	andi	r2,r2,255
   12ac4:	1080201c 	xori	r2,r2,128
   12ac8:	10bfe004 	addi	r2,r2,-128
   12acc:	20800035 	stwio	r2,0(r4)
      count--;
   12ad0:	e0bff917 	ldw	r2,-28(fp)
   12ad4:	10bfffc4 	addi	r2,r2,-1
   12ad8:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
   12adc:	e0bffa17 	ldw	r2,-24(fp)
   12ae0:	10000226 	beq	r2,zero,12aec <altera_avalon_uart_write+0xa8>
   12ae4:	e0bff917 	ldw	r2,-28(fp)
   12ae8:	103fe51e 	bne	r2,zero,12a80 <__alt_data_end+0xffff2a80>

  if (count)
   12aec:	e0bff917 	ldw	r2,-28(fp)
   12af0:	10000426 	beq	r2,zero,12b04 <altera_avalon_uart_write+0xc0>
  {
    ALT_ERRNO = EWOULDBLOCK;
   12af4:	0012a080 	call	12a08 <alt_get_errno>
   12af8:	1007883a 	mov	r3,r2
   12afc:	008002c4 	movi	r2,11
   12b00:	18800015 	stw	r2,0(r3)
  }

  return (len - count);
   12b04:	e0fffe17 	ldw	r3,-8(fp)
   12b08:	e0bff917 	ldw	r2,-28(fp)
   12b0c:	1885c83a 	sub	r2,r3,r2
}
   12b10:	e037883a 	mov	sp,fp
   12b14:	dfc00117 	ldw	ra,4(sp)
   12b18:	df000017 	ldw	fp,0(sp)
   12b1c:	dec00204 	addi	sp,sp,8
   12b20:	f800283a 	ret

00012b24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12b24:	defffe04 	addi	sp,sp,-8
   12b28:	dfc00115 	stw	ra,4(sp)
   12b2c:	df000015 	stw	fp,0(sp)
   12b30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12b34:	d0a00a17 	ldw	r2,-32728(gp)
   12b38:	10000326 	beq	r2,zero,12b48 <alt_get_errno+0x24>
   12b3c:	d0a00a17 	ldw	r2,-32728(gp)
   12b40:	103ee83a 	callr	r2
   12b44:	00000106 	br	12b4c <alt_get_errno+0x28>
   12b48:	d0a1ae04 	addi	r2,gp,-31048
}
   12b4c:	e037883a 	mov	sp,fp
   12b50:	dfc00117 	ldw	ra,4(sp)
   12b54:	df000017 	ldw	fp,0(sp)
   12b58:	dec00204 	addi	sp,sp,8
   12b5c:	f800283a 	ret

00012b60 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   12b60:	defffb04 	addi	sp,sp,-20
   12b64:	dfc00415 	stw	ra,16(sp)
   12b68:	df000315 	stw	fp,12(sp)
   12b6c:	df000304 	addi	fp,sp,12
   12b70:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12b74:	e0bfff17 	ldw	r2,-4(fp)
   12b78:	10000616 	blt	r2,zero,12b94 <close+0x34>
   12b7c:	e0bfff17 	ldw	r2,-4(fp)
   12b80:	10c00324 	muli	r3,r2,12
   12b84:	00800074 	movhi	r2,1
   12b88:	1091d304 	addi	r2,r2,18252
   12b8c:	1885883a 	add	r2,r3,r2
   12b90:	00000106 	br	12b98 <close+0x38>
   12b94:	0005883a 	mov	r2,zero
   12b98:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   12b9c:	e0bffd17 	ldw	r2,-12(fp)
   12ba0:	10001926 	beq	r2,zero,12c08 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   12ba4:	e0bffd17 	ldw	r2,-12(fp)
   12ba8:	10800017 	ldw	r2,0(r2)
   12bac:	10800417 	ldw	r2,16(r2)
   12bb0:	10000626 	beq	r2,zero,12bcc <close+0x6c>
   12bb4:	e0bffd17 	ldw	r2,-12(fp)
   12bb8:	10800017 	ldw	r2,0(r2)
   12bbc:	10800417 	ldw	r2,16(r2)
   12bc0:	e13ffd17 	ldw	r4,-12(fp)
   12bc4:	103ee83a 	callr	r2
   12bc8:	00000106 	br	12bd0 <close+0x70>
   12bcc:	0005883a 	mov	r2,zero
   12bd0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   12bd4:	e13fff17 	ldw	r4,-4(fp)
   12bd8:	00134ac0 	call	134ac <alt_release_fd>
    if (rval < 0)
   12bdc:	e0bffe17 	ldw	r2,-8(fp)
   12be0:	1000070e 	bge	r2,zero,12c00 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   12be4:	0012b240 	call	12b24 <alt_get_errno>
   12be8:	1007883a 	mov	r3,r2
   12bec:	e0bffe17 	ldw	r2,-8(fp)
   12bf0:	0085c83a 	sub	r2,zero,r2
   12bf4:	18800015 	stw	r2,0(r3)
      return -1;
   12bf8:	00bfffc4 	movi	r2,-1
   12bfc:	00000706 	br	12c1c <close+0xbc>
    }
    return 0;
   12c00:	0005883a 	mov	r2,zero
   12c04:	00000506 	br	12c1c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12c08:	0012b240 	call	12b24 <alt_get_errno>
   12c0c:	1007883a 	mov	r3,r2
   12c10:	00801444 	movi	r2,81
   12c14:	18800015 	stw	r2,0(r3)
    return -1;
   12c18:	00bfffc4 	movi	r2,-1
  }
}
   12c1c:	e037883a 	mov	sp,fp
   12c20:	dfc00117 	ldw	ra,4(sp)
   12c24:	df000017 	ldw	fp,0(sp)
   12c28:	dec00204 	addi	sp,sp,8
   12c2c:	f800283a 	ret

00012c30 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   12c30:	defffe04 	addi	sp,sp,-8
   12c34:	df000115 	stw	fp,4(sp)
   12c38:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   12c3c:	e03fff15 	stw	zero,-4(fp)
   12c40:	00000506 	br	12c58 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   12c44:	e0bfff17 	ldw	r2,-4(fp)
   12c48:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   12c4c:	e0bfff17 	ldw	r2,-4(fp)
   12c50:	10800804 	addi	r2,r2,32
   12c54:	e0bfff15 	stw	r2,-4(fp)
   12c58:	e0bfff17 	ldw	r2,-4(fp)
   12c5c:	10820030 	cmpltui	r2,r2,2048
   12c60:	103ff81e 	bne	r2,zero,12c44 <__alt_data_end+0xffff2c44>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   12c64:	0001883a 	nop
   12c68:	e037883a 	mov	sp,fp
   12c6c:	df000017 	ldw	fp,0(sp)
   12c70:	dec00104 	addi	sp,sp,4
   12c74:	f800283a 	ret

00012c78 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   12c78:	defffc04 	addi	sp,sp,-16
   12c7c:	df000315 	stw	fp,12(sp)
   12c80:	df000304 	addi	fp,sp,12
   12c84:	e13ffd15 	stw	r4,-12(fp)
   12c88:	e17ffe15 	stw	r5,-8(fp)
   12c8c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   12c90:	e0bfff17 	ldw	r2,-4(fp)
}
   12c94:	e037883a 	mov	sp,fp
   12c98:	df000017 	ldw	fp,0(sp)
   12c9c:	dec00104 	addi	sp,sp,4
   12ca0:	f800283a 	ret

00012ca4 <alt_get_errno>:
   12ca4:	defffe04 	addi	sp,sp,-8
   12ca8:	dfc00115 	stw	ra,4(sp)
   12cac:	df000015 	stw	fp,0(sp)
   12cb0:	d839883a 	mov	fp,sp
   12cb4:	d0a00a17 	ldw	r2,-32728(gp)
   12cb8:	10000326 	beq	r2,zero,12cc8 <alt_get_errno+0x24>
   12cbc:	d0a00a17 	ldw	r2,-32728(gp)
   12cc0:	103ee83a 	callr	r2
   12cc4:	00000106 	br	12ccc <alt_get_errno+0x28>
   12cc8:	d0a1ae04 	addi	r2,gp,-31048
   12ccc:	e037883a 	mov	sp,fp
   12cd0:	dfc00117 	ldw	ra,4(sp)
   12cd4:	df000017 	ldw	fp,0(sp)
   12cd8:	dec00204 	addi	sp,sp,8
   12cdc:	f800283a 	ret

00012ce0 <alt_dev_llist_insert>:
   12ce0:	defffa04 	addi	sp,sp,-24
   12ce4:	dfc00515 	stw	ra,20(sp)
   12ce8:	df000415 	stw	fp,16(sp)
   12cec:	df000404 	addi	fp,sp,16
   12cf0:	e13ffe15 	stw	r4,-8(fp)
   12cf4:	e17fff15 	stw	r5,-4(fp)
   12cf8:	e0bffe17 	ldw	r2,-8(fp)
   12cfc:	10000326 	beq	r2,zero,12d0c <alt_dev_llist_insert+0x2c>
   12d00:	e0bffe17 	ldw	r2,-8(fp)
   12d04:	10800217 	ldw	r2,8(r2)
   12d08:	1000061e 	bne	r2,zero,12d24 <alt_dev_llist_insert+0x44>
   12d0c:	0012ca40 	call	12ca4 <alt_get_errno>
   12d10:	1007883a 	mov	r3,r2
   12d14:	00800584 	movi	r2,22
   12d18:	18800015 	stw	r2,0(r3)
   12d1c:	00bffa84 	movi	r2,-22
   12d20:	00001306 	br	12d70 <alt_dev_llist_insert+0x90>
   12d24:	e0bffe17 	ldw	r2,-8(fp)
   12d28:	e0ffff17 	ldw	r3,-4(fp)
   12d2c:	e0fffc15 	stw	r3,-16(fp)
   12d30:	e0bffd15 	stw	r2,-12(fp)
   12d34:	e0bffd17 	ldw	r2,-12(fp)
   12d38:	e0fffc17 	ldw	r3,-16(fp)
   12d3c:	10c00115 	stw	r3,4(r2)
   12d40:	e0bffc17 	ldw	r2,-16(fp)
   12d44:	10c00017 	ldw	r3,0(r2)
   12d48:	e0bffd17 	ldw	r2,-12(fp)
   12d4c:	10c00015 	stw	r3,0(r2)
   12d50:	e0bffc17 	ldw	r2,-16(fp)
   12d54:	10800017 	ldw	r2,0(r2)
   12d58:	e0fffd17 	ldw	r3,-12(fp)
   12d5c:	10c00115 	stw	r3,4(r2)
   12d60:	e0bffc17 	ldw	r2,-16(fp)
   12d64:	e0fffd17 	ldw	r3,-12(fp)
   12d68:	10c00015 	stw	r3,0(r2)
   12d6c:	0005883a 	mov	r2,zero
   12d70:	e037883a 	mov	sp,fp
   12d74:	dfc00117 	ldw	ra,4(sp)
   12d78:	df000017 	ldw	fp,0(sp)
   12d7c:	dec00204 	addi	sp,sp,8
   12d80:	f800283a 	ret

00012d84 <_do_ctors>:
   12d84:	defffd04 	addi	sp,sp,-12
   12d88:	dfc00215 	stw	ra,8(sp)
   12d8c:	df000115 	stw	fp,4(sp)
   12d90:	df000104 	addi	fp,sp,4
   12d94:	00800074 	movhi	r2,1
   12d98:	10905804 	addi	r2,r2,16736
   12d9c:	e0bfff15 	stw	r2,-4(fp)
   12da0:	00000606 	br	12dbc <_do_ctors+0x38>
   12da4:	e0bfff17 	ldw	r2,-4(fp)
   12da8:	10800017 	ldw	r2,0(r2)
   12dac:	103ee83a 	callr	r2
   12db0:	e0bfff17 	ldw	r2,-4(fp)
   12db4:	10bfff04 	addi	r2,r2,-4
   12db8:	e0bfff15 	stw	r2,-4(fp)
   12dbc:	e0ffff17 	ldw	r3,-4(fp)
   12dc0:	00800074 	movhi	r2,1
   12dc4:	10905904 	addi	r2,r2,16740
   12dc8:	18bff62e 	bgeu	r3,r2,12da4 <__alt_data_end+0xffff2da4>
   12dcc:	0001883a 	nop
   12dd0:	e037883a 	mov	sp,fp
   12dd4:	dfc00117 	ldw	ra,4(sp)
   12dd8:	df000017 	ldw	fp,0(sp)
   12ddc:	dec00204 	addi	sp,sp,8
   12de0:	f800283a 	ret

00012de4 <_do_dtors>:
   12de4:	defffd04 	addi	sp,sp,-12
   12de8:	dfc00215 	stw	ra,8(sp)
   12dec:	df000115 	stw	fp,4(sp)
   12df0:	df000104 	addi	fp,sp,4
   12df4:	00800074 	movhi	r2,1
   12df8:	10905804 	addi	r2,r2,16736
   12dfc:	e0bfff15 	stw	r2,-4(fp)
   12e00:	00000606 	br	12e1c <_do_dtors+0x38>
   12e04:	e0bfff17 	ldw	r2,-4(fp)
   12e08:	10800017 	ldw	r2,0(r2)
   12e0c:	103ee83a 	callr	r2
   12e10:	e0bfff17 	ldw	r2,-4(fp)
   12e14:	10bfff04 	addi	r2,r2,-4
   12e18:	e0bfff15 	stw	r2,-4(fp)
   12e1c:	e0ffff17 	ldw	r3,-4(fp)
   12e20:	00800074 	movhi	r2,1
   12e24:	10905904 	addi	r2,r2,16740
   12e28:	18bff62e 	bgeu	r3,r2,12e04 <__alt_data_end+0xffff2e04>
   12e2c:	0001883a 	nop
   12e30:	e037883a 	mov	sp,fp
   12e34:	dfc00117 	ldw	ra,4(sp)
   12e38:	df000017 	ldw	fp,0(sp)
   12e3c:	dec00204 	addi	sp,sp,8
   12e40:	f800283a 	ret

00012e44 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   12e44:	defffe04 	addi	sp,sp,-8
   12e48:	dfc00115 	stw	ra,4(sp)
   12e4c:	df000015 	stw	fp,0(sp)
   12e50:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   12e54:	01440004 	movi	r5,4096
   12e58:	0009883a 	mov	r4,zero
   12e5c:	00137700 	call	13770 <alt_icache_flush>
#endif
}
   12e60:	0001883a 	nop
   12e64:	e037883a 	mov	sp,fp
   12e68:	dfc00117 	ldw	ra,4(sp)
   12e6c:	df000017 	ldw	fp,0(sp)
   12e70:	dec00204 	addi	sp,sp,8
   12e74:	f800283a 	ret

00012e78 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   12e78:	defff904 	addi	sp,sp,-28
   12e7c:	dfc00615 	stw	ra,24(sp)
   12e80:	df000515 	stw	fp,20(sp)
   12e84:	df000504 	addi	fp,sp,20
   12e88:	e13ffc15 	stw	r4,-16(fp)
   12e8c:	e17ffd15 	stw	r5,-12(fp)
   12e90:	e1bffe15 	stw	r6,-8(fp)
   12e94:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   12e98:	e0800217 	ldw	r2,8(fp)
   12e9c:	d8800015 	stw	r2,0(sp)
   12ea0:	e1ffff17 	ldw	r7,-4(fp)
   12ea4:	e1bffe17 	ldw	r6,-8(fp)
   12ea8:	e17ffd17 	ldw	r5,-12(fp)
   12eac:	e13ffc17 	ldw	r4,-16(fp)
   12eb0:	00130280 	call	13028 <alt_iic_isr_register>
}  
   12eb4:	e037883a 	mov	sp,fp
   12eb8:	dfc00117 	ldw	ra,4(sp)
   12ebc:	df000017 	ldw	fp,0(sp)
   12ec0:	dec00204 	addi	sp,sp,8
   12ec4:	f800283a 	ret

00012ec8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   12ec8:	defff904 	addi	sp,sp,-28
   12ecc:	df000615 	stw	fp,24(sp)
   12ed0:	df000604 	addi	fp,sp,24
   12ed4:	e13ffe15 	stw	r4,-8(fp)
   12ed8:	e17fff15 	stw	r5,-4(fp)
   12edc:	e0bfff17 	ldw	r2,-4(fp)
   12ee0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ee4:	0005303a 	rdctl	r2,status
   12ee8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12eec:	e0fffb17 	ldw	r3,-20(fp)
   12ef0:	00bfff84 	movi	r2,-2
   12ef4:	1884703a 	and	r2,r3,r2
   12ef8:	1001703a 	wrctl	status,r2
  
  return context;
   12efc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   12f00:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   12f04:	00c00044 	movi	r3,1
   12f08:	e0bffa17 	ldw	r2,-24(fp)
   12f0c:	1884983a 	sll	r2,r3,r2
   12f10:	1007883a 	mov	r3,r2
   12f14:	d0a1b817 	ldw	r2,-31008(gp)
   12f18:	1884b03a 	or	r2,r3,r2
   12f1c:	d0a1b815 	stw	r2,-31008(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12f20:	d0a1b817 	ldw	r2,-31008(gp)
   12f24:	100170fa 	wrctl	ienable,r2
   12f28:	e0bffc17 	ldw	r2,-16(fp)
   12f2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12f30:	e0bffd17 	ldw	r2,-12(fp)
   12f34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   12f38:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   12f3c:	0001883a 	nop
}
   12f40:	e037883a 	mov	sp,fp
   12f44:	df000017 	ldw	fp,0(sp)
   12f48:	dec00104 	addi	sp,sp,4
   12f4c:	f800283a 	ret

00012f50 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   12f50:	defff904 	addi	sp,sp,-28
   12f54:	df000615 	stw	fp,24(sp)
   12f58:	df000604 	addi	fp,sp,24
   12f5c:	e13ffe15 	stw	r4,-8(fp)
   12f60:	e17fff15 	stw	r5,-4(fp)
   12f64:	e0bfff17 	ldw	r2,-4(fp)
   12f68:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12f6c:	0005303a 	rdctl	r2,status
   12f70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12f74:	e0fffb17 	ldw	r3,-20(fp)
   12f78:	00bfff84 	movi	r2,-2
   12f7c:	1884703a 	and	r2,r3,r2
   12f80:	1001703a 	wrctl	status,r2
  
  return context;
   12f84:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   12f88:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   12f8c:	00c00044 	movi	r3,1
   12f90:	e0bffa17 	ldw	r2,-24(fp)
   12f94:	1884983a 	sll	r2,r3,r2
   12f98:	0084303a 	nor	r2,zero,r2
   12f9c:	1007883a 	mov	r3,r2
   12fa0:	d0a1b817 	ldw	r2,-31008(gp)
   12fa4:	1884703a 	and	r2,r3,r2
   12fa8:	d0a1b815 	stw	r2,-31008(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12fac:	d0a1b817 	ldw	r2,-31008(gp)
   12fb0:	100170fa 	wrctl	ienable,r2
   12fb4:	e0bffc17 	ldw	r2,-16(fp)
   12fb8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12fbc:	e0bffd17 	ldw	r2,-12(fp)
   12fc0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   12fc4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   12fc8:	0001883a 	nop
}
   12fcc:	e037883a 	mov	sp,fp
   12fd0:	df000017 	ldw	fp,0(sp)
   12fd4:	dec00104 	addi	sp,sp,4
   12fd8:	f800283a 	ret

00012fdc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   12fdc:	defffc04 	addi	sp,sp,-16
   12fe0:	df000315 	stw	fp,12(sp)
   12fe4:	df000304 	addi	fp,sp,12
   12fe8:	e13ffe15 	stw	r4,-8(fp)
   12fec:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   12ff0:	000530fa 	rdctl	r2,ienable
   12ff4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   12ff8:	00c00044 	movi	r3,1
   12ffc:	e0bfff17 	ldw	r2,-4(fp)
   13000:	1884983a 	sll	r2,r3,r2
   13004:	1007883a 	mov	r3,r2
   13008:	e0bffd17 	ldw	r2,-12(fp)
   1300c:	1884703a 	and	r2,r3,r2
   13010:	1004c03a 	cmpne	r2,r2,zero
   13014:	10803fcc 	andi	r2,r2,255
}
   13018:	e037883a 	mov	sp,fp
   1301c:	df000017 	ldw	fp,0(sp)
   13020:	dec00104 	addi	sp,sp,4
   13024:	f800283a 	ret

00013028 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13028:	defff504 	addi	sp,sp,-44
   1302c:	dfc00a15 	stw	ra,40(sp)
   13030:	df000915 	stw	fp,36(sp)
   13034:	df000904 	addi	fp,sp,36
   13038:	e13ffc15 	stw	r4,-16(fp)
   1303c:	e17ffd15 	stw	r5,-12(fp)
   13040:	e1bffe15 	stw	r6,-8(fp)
   13044:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   13048:	00bffa84 	movi	r2,-22
   1304c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   13050:	e0bffd17 	ldw	r2,-12(fp)
   13054:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   13058:	e0bff817 	ldw	r2,-32(fp)
   1305c:	10800808 	cmpgei	r2,r2,32
   13060:	1000271e 	bne	r2,zero,13100 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13064:	0005303a 	rdctl	r2,status
   13068:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1306c:	e0fffb17 	ldw	r3,-20(fp)
   13070:	00bfff84 	movi	r2,-2
   13074:	1884703a 	and	r2,r3,r2
   13078:	1001703a 	wrctl	status,r2
  
  return context;
   1307c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   13080:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   13084:	00800074 	movhi	r2,1
   13088:	1095a104 	addi	r2,r2,22148
   1308c:	e0fff817 	ldw	r3,-32(fp)
   13090:	180690fa 	slli	r3,r3,3
   13094:	10c5883a 	add	r2,r2,r3
   13098:	e0fffe17 	ldw	r3,-8(fp)
   1309c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   130a0:	00800074 	movhi	r2,1
   130a4:	1095a104 	addi	r2,r2,22148
   130a8:	e0fff817 	ldw	r3,-32(fp)
   130ac:	180690fa 	slli	r3,r3,3
   130b0:	10c5883a 	add	r2,r2,r3
   130b4:	10800104 	addi	r2,r2,4
   130b8:	e0ffff17 	ldw	r3,-4(fp)
   130bc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   130c0:	e0bffe17 	ldw	r2,-8(fp)
   130c4:	10000526 	beq	r2,zero,130dc <alt_iic_isr_register+0xb4>
   130c8:	e0bff817 	ldw	r2,-32(fp)
   130cc:	100b883a 	mov	r5,r2
   130d0:	e13ffc17 	ldw	r4,-16(fp)
   130d4:	0012ec80 	call	12ec8 <alt_ic_irq_enable>
   130d8:	00000406 	br	130ec <alt_iic_isr_register+0xc4>
   130dc:	e0bff817 	ldw	r2,-32(fp)
   130e0:	100b883a 	mov	r5,r2
   130e4:	e13ffc17 	ldw	r4,-16(fp)
   130e8:	0012f500 	call	12f50 <alt_ic_irq_disable>
   130ec:	e0bff715 	stw	r2,-36(fp)
   130f0:	e0bffa17 	ldw	r2,-24(fp)
   130f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   130f8:	e0bff917 	ldw	r2,-28(fp)
   130fc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   13100:	e0bff717 	ldw	r2,-36(fp)
}
   13104:	e037883a 	mov	sp,fp
   13108:	dfc00117 	ldw	ra,4(sp)
   1310c:	df000017 	ldw	fp,0(sp)
   13110:	dec00204 	addi	sp,sp,8
   13114:	f800283a 	ret

00013118 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   13118:	defff904 	addi	sp,sp,-28
   1311c:	dfc00615 	stw	ra,24(sp)
   13120:	df000515 	stw	fp,20(sp)
   13124:	df000504 	addi	fp,sp,20
   13128:	e13ffc15 	stw	r4,-16(fp)
   1312c:	e17ffd15 	stw	r5,-12(fp)
   13130:	e1bffe15 	stw	r6,-8(fp)
   13134:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   13138:	e1bfff17 	ldw	r6,-4(fp)
   1313c:	e17ffe17 	ldw	r5,-8(fp)
   13140:	e13ffd17 	ldw	r4,-12(fp)
   13144:	00133580 	call	13358 <open>
   13148:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1314c:	e0bffb17 	ldw	r2,-20(fp)
   13150:	10001c16 	blt	r2,zero,131c4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   13154:	00800074 	movhi	r2,1
   13158:	1091d304 	addi	r2,r2,18252
   1315c:	e0fffb17 	ldw	r3,-20(fp)
   13160:	18c00324 	muli	r3,r3,12
   13164:	10c5883a 	add	r2,r2,r3
   13168:	10c00017 	ldw	r3,0(r2)
   1316c:	e0bffc17 	ldw	r2,-16(fp)
   13170:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   13174:	00800074 	movhi	r2,1
   13178:	1091d304 	addi	r2,r2,18252
   1317c:	e0fffb17 	ldw	r3,-20(fp)
   13180:	18c00324 	muli	r3,r3,12
   13184:	10c5883a 	add	r2,r2,r3
   13188:	10800104 	addi	r2,r2,4
   1318c:	10c00017 	ldw	r3,0(r2)
   13190:	e0bffc17 	ldw	r2,-16(fp)
   13194:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   13198:	00800074 	movhi	r2,1
   1319c:	1091d304 	addi	r2,r2,18252
   131a0:	e0fffb17 	ldw	r3,-20(fp)
   131a4:	18c00324 	muli	r3,r3,12
   131a8:	10c5883a 	add	r2,r2,r3
   131ac:	10800204 	addi	r2,r2,8
   131b0:	10c00017 	ldw	r3,0(r2)
   131b4:	e0bffc17 	ldw	r2,-16(fp)
   131b8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   131bc:	e13ffb17 	ldw	r4,-20(fp)
   131c0:	00134ac0 	call	134ac <alt_release_fd>
  }
} 
   131c4:	0001883a 	nop
   131c8:	e037883a 	mov	sp,fp
   131cc:	dfc00117 	ldw	ra,4(sp)
   131d0:	df000017 	ldw	fp,0(sp)
   131d4:	dec00204 	addi	sp,sp,8
   131d8:	f800283a 	ret

000131dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   131dc:	defffb04 	addi	sp,sp,-20
   131e0:	dfc00415 	stw	ra,16(sp)
   131e4:	df000315 	stw	fp,12(sp)
   131e8:	df000304 	addi	fp,sp,12
   131ec:	e13ffd15 	stw	r4,-12(fp)
   131f0:	e17ffe15 	stw	r5,-8(fp)
   131f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   131f8:	01c07fc4 	movi	r7,511
   131fc:	01800044 	movi	r6,1
   13200:	e17ffd17 	ldw	r5,-12(fp)
   13204:	01000074 	movhi	r4,1
   13208:	2111d604 	addi	r4,r4,18264
   1320c:	00131180 	call	13118 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   13210:	01c07fc4 	movi	r7,511
   13214:	000d883a 	mov	r6,zero
   13218:	e17ffe17 	ldw	r5,-8(fp)
   1321c:	01000074 	movhi	r4,1
   13220:	2111d304 	addi	r4,r4,18252
   13224:	00131180 	call	13118 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   13228:	01c07fc4 	movi	r7,511
   1322c:	01800044 	movi	r6,1
   13230:	e17fff17 	ldw	r5,-4(fp)
   13234:	01000074 	movhi	r4,1
   13238:	2111d904 	addi	r4,r4,18276
   1323c:	00131180 	call	13118 <alt_open_fd>
}  
   13240:	0001883a 	nop
   13244:	e037883a 	mov	sp,fp
   13248:	dfc00117 	ldw	ra,4(sp)
   1324c:	df000017 	ldw	fp,0(sp)
   13250:	dec00204 	addi	sp,sp,8
   13254:	f800283a 	ret

00013258 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13258:	defffe04 	addi	sp,sp,-8
   1325c:	dfc00115 	stw	ra,4(sp)
   13260:	df000015 	stw	fp,0(sp)
   13264:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13268:	d0a00a17 	ldw	r2,-32728(gp)
   1326c:	10000326 	beq	r2,zero,1327c <alt_get_errno+0x24>
   13270:	d0a00a17 	ldw	r2,-32728(gp)
   13274:	103ee83a 	callr	r2
   13278:	00000106 	br	13280 <alt_get_errno+0x28>
   1327c:	d0a1ae04 	addi	r2,gp,-31048
}
   13280:	e037883a 	mov	sp,fp
   13284:	dfc00117 	ldw	ra,4(sp)
   13288:	df000017 	ldw	fp,0(sp)
   1328c:	dec00204 	addi	sp,sp,8
   13290:	f800283a 	ret

00013294 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   13294:	defffd04 	addi	sp,sp,-12
   13298:	df000215 	stw	fp,8(sp)
   1329c:	df000204 	addi	fp,sp,8
   132a0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   132a4:	e0bfff17 	ldw	r2,-4(fp)
   132a8:	10800217 	ldw	r2,8(r2)
   132ac:	10d00034 	orhi	r3,r2,16384
   132b0:	e0bfff17 	ldw	r2,-4(fp)
   132b4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   132b8:	e03ffe15 	stw	zero,-8(fp)
   132bc:	00001d06 	br	13334 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   132c0:	00800074 	movhi	r2,1
   132c4:	1091d304 	addi	r2,r2,18252
   132c8:	e0fffe17 	ldw	r3,-8(fp)
   132cc:	18c00324 	muli	r3,r3,12
   132d0:	10c5883a 	add	r2,r2,r3
   132d4:	10c00017 	ldw	r3,0(r2)
   132d8:	e0bfff17 	ldw	r2,-4(fp)
   132dc:	10800017 	ldw	r2,0(r2)
   132e0:	1880111e 	bne	r3,r2,13328 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   132e4:	00800074 	movhi	r2,1
   132e8:	1091d304 	addi	r2,r2,18252
   132ec:	e0fffe17 	ldw	r3,-8(fp)
   132f0:	18c00324 	muli	r3,r3,12
   132f4:	10c5883a 	add	r2,r2,r3
   132f8:	10800204 	addi	r2,r2,8
   132fc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   13300:	1000090e 	bge	r2,zero,13328 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   13304:	e0bffe17 	ldw	r2,-8(fp)
   13308:	10c00324 	muli	r3,r2,12
   1330c:	00800074 	movhi	r2,1
   13310:	1091d304 	addi	r2,r2,18252
   13314:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   13318:	e0bfff17 	ldw	r2,-4(fp)
   1331c:	18800226 	beq	r3,r2,13328 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   13320:	00bffcc4 	movi	r2,-13
   13324:	00000806 	br	13348 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   13328:	e0bffe17 	ldw	r2,-8(fp)
   1332c:	10800044 	addi	r2,r2,1
   13330:	e0bffe15 	stw	r2,-8(fp)
   13334:	d0a00917 	ldw	r2,-32732(gp)
   13338:	1007883a 	mov	r3,r2
   1333c:	e0bffe17 	ldw	r2,-8(fp)
   13340:	18bfdf2e 	bgeu	r3,r2,132c0 <__alt_data_end+0xffff32c0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   13344:	0005883a 	mov	r2,zero
}
   13348:	e037883a 	mov	sp,fp
   1334c:	df000017 	ldw	fp,0(sp)
   13350:	dec00104 	addi	sp,sp,4
   13354:	f800283a 	ret

00013358 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   13358:	defff604 	addi	sp,sp,-40
   1335c:	dfc00915 	stw	ra,36(sp)
   13360:	df000815 	stw	fp,32(sp)
   13364:	df000804 	addi	fp,sp,32
   13368:	e13ffd15 	stw	r4,-12(fp)
   1336c:	e17ffe15 	stw	r5,-8(fp)
   13370:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   13374:	00bfffc4 	movi	r2,-1
   13378:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1337c:	00bffb44 	movi	r2,-19
   13380:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   13384:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   13388:	d1600704 	addi	r5,gp,-32740
   1338c:	e13ffd17 	ldw	r4,-12(fp)
   13390:	00135340 	call	13534 <alt_find_dev>
   13394:	e0bff815 	stw	r2,-32(fp)
   13398:	e0bff817 	ldw	r2,-32(fp)
   1339c:	1000051e 	bne	r2,zero,133b4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   133a0:	e13ffd17 	ldw	r4,-12(fp)
   133a4:	00135c40 	call	135c4 <alt_find_file>
   133a8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   133ac:	00800044 	movi	r2,1
   133b0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   133b4:	e0bff817 	ldw	r2,-32(fp)
   133b8:	10002926 	beq	r2,zero,13460 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   133bc:	e13ff817 	ldw	r4,-32(fp)
   133c0:	00136cc0 	call	136cc <alt_get_fd>
   133c4:	e0bff915 	stw	r2,-28(fp)
   133c8:	e0bff917 	ldw	r2,-28(fp)
   133cc:	1000030e 	bge	r2,zero,133dc <open+0x84>
    {
      status = index;
   133d0:	e0bff917 	ldw	r2,-28(fp)
   133d4:	e0bffa15 	stw	r2,-24(fp)
   133d8:	00002306 	br	13468 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   133dc:	e0bff917 	ldw	r2,-28(fp)
   133e0:	10c00324 	muli	r3,r2,12
   133e4:	00800074 	movhi	r2,1
   133e8:	1091d304 	addi	r2,r2,18252
   133ec:	1885883a 	add	r2,r3,r2
   133f0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   133f4:	e0fffe17 	ldw	r3,-8(fp)
   133f8:	00900034 	movhi	r2,16384
   133fc:	10bfffc4 	addi	r2,r2,-1
   13400:	1886703a 	and	r3,r3,r2
   13404:	e0bffc17 	ldw	r2,-16(fp)
   13408:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1340c:	e0bffb17 	ldw	r2,-20(fp)
   13410:	1000051e 	bne	r2,zero,13428 <open+0xd0>
   13414:	e13ffc17 	ldw	r4,-16(fp)
   13418:	00132940 	call	13294 <alt_file_locked>
   1341c:	e0bffa15 	stw	r2,-24(fp)
   13420:	e0bffa17 	ldw	r2,-24(fp)
   13424:	10001016 	blt	r2,zero,13468 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   13428:	e0bff817 	ldw	r2,-32(fp)
   1342c:	10800317 	ldw	r2,12(r2)
   13430:	10000826 	beq	r2,zero,13454 <open+0xfc>
   13434:	e0bff817 	ldw	r2,-32(fp)
   13438:	10800317 	ldw	r2,12(r2)
   1343c:	e1ffff17 	ldw	r7,-4(fp)
   13440:	e1bffe17 	ldw	r6,-8(fp)
   13444:	e17ffd17 	ldw	r5,-12(fp)
   13448:	e13ffc17 	ldw	r4,-16(fp)
   1344c:	103ee83a 	callr	r2
   13450:	00000106 	br	13458 <open+0x100>
   13454:	0005883a 	mov	r2,zero
   13458:	e0bffa15 	stw	r2,-24(fp)
   1345c:	00000206 	br	13468 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   13460:	00bffb44 	movi	r2,-19
   13464:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   13468:	e0bffa17 	ldw	r2,-24(fp)
   1346c:	1000090e 	bge	r2,zero,13494 <open+0x13c>
  {
    alt_release_fd (index);  
   13470:	e13ff917 	ldw	r4,-28(fp)
   13474:	00134ac0 	call	134ac <alt_release_fd>
    ALT_ERRNO = -status;
   13478:	00132580 	call	13258 <alt_get_errno>
   1347c:	1007883a 	mov	r3,r2
   13480:	e0bffa17 	ldw	r2,-24(fp)
   13484:	0085c83a 	sub	r2,zero,r2
   13488:	18800015 	stw	r2,0(r3)
    return -1;
   1348c:	00bfffc4 	movi	r2,-1
   13490:	00000106 	br	13498 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   13494:	e0bff917 	ldw	r2,-28(fp)
}
   13498:	e037883a 	mov	sp,fp
   1349c:	dfc00117 	ldw	ra,4(sp)
   134a0:	df000017 	ldw	fp,0(sp)
   134a4:	dec00204 	addi	sp,sp,8
   134a8:	f800283a 	ret

000134ac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   134ac:	defffe04 	addi	sp,sp,-8
   134b0:	df000115 	stw	fp,4(sp)
   134b4:	df000104 	addi	fp,sp,4
   134b8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   134bc:	e0bfff17 	ldw	r2,-4(fp)
   134c0:	108000d0 	cmplti	r2,r2,3
   134c4:	10000d1e 	bne	r2,zero,134fc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   134c8:	00800074 	movhi	r2,1
   134cc:	1091d304 	addi	r2,r2,18252
   134d0:	e0ffff17 	ldw	r3,-4(fp)
   134d4:	18c00324 	muli	r3,r3,12
   134d8:	10c5883a 	add	r2,r2,r3
   134dc:	10800204 	addi	r2,r2,8
   134e0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   134e4:	00800074 	movhi	r2,1
   134e8:	1091d304 	addi	r2,r2,18252
   134ec:	e0ffff17 	ldw	r3,-4(fp)
   134f0:	18c00324 	muli	r3,r3,12
   134f4:	10c5883a 	add	r2,r2,r3
   134f8:	10000015 	stw	zero,0(r2)
  }
}
   134fc:	0001883a 	nop
   13500:	e037883a 	mov	sp,fp
   13504:	df000017 	ldw	fp,0(sp)
   13508:	dec00104 	addi	sp,sp,4
   1350c:	f800283a 	ret

00013510 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   13510:	deffff04 	addi	sp,sp,-4
   13514:	df000015 	stw	fp,0(sp)
   13518:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1351c:	000170fa 	wrctl	ienable,zero
}
   13520:	0001883a 	nop
   13524:	e037883a 	mov	sp,fp
   13528:	df000017 	ldw	fp,0(sp)
   1352c:	dec00104 	addi	sp,sp,4
   13530:	f800283a 	ret

00013534 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   13534:	defffa04 	addi	sp,sp,-24
   13538:	dfc00515 	stw	ra,20(sp)
   1353c:	df000415 	stw	fp,16(sp)
   13540:	df000404 	addi	fp,sp,16
   13544:	e13ffe15 	stw	r4,-8(fp)
   13548:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1354c:	e0bfff17 	ldw	r2,-4(fp)
   13550:	10800017 	ldw	r2,0(r2)
   13554:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   13558:	e13ffe17 	ldw	r4,-8(fp)
   1355c:	00138c80 	call	138c8 <strlen>
   13560:	10800044 	addi	r2,r2,1
   13564:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13568:	00000d06 	br	135a0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1356c:	e0bffc17 	ldw	r2,-16(fp)
   13570:	10800217 	ldw	r2,8(r2)
   13574:	e0fffd17 	ldw	r3,-12(fp)
   13578:	180d883a 	mov	r6,r3
   1357c:	e17ffe17 	ldw	r5,-8(fp)
   13580:	1009883a 	mov	r4,r2
   13584:	001384c0 	call	1384c <memcmp>
   13588:	1000021e 	bne	r2,zero,13594 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1358c:	e0bffc17 	ldw	r2,-16(fp)
   13590:	00000706 	br	135b0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   13594:	e0bffc17 	ldw	r2,-16(fp)
   13598:	10800017 	ldw	r2,0(r2)
   1359c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   135a0:	e0fffc17 	ldw	r3,-16(fp)
   135a4:	e0bfff17 	ldw	r2,-4(fp)
   135a8:	18bff01e 	bne	r3,r2,1356c <__alt_data_end+0xffff356c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   135ac:	0005883a 	mov	r2,zero
}
   135b0:	e037883a 	mov	sp,fp
   135b4:	dfc00117 	ldw	ra,4(sp)
   135b8:	df000017 	ldw	fp,0(sp)
   135bc:	dec00204 	addi	sp,sp,8
   135c0:	f800283a 	ret

000135c4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   135c4:	defffb04 	addi	sp,sp,-20
   135c8:	dfc00415 	stw	ra,16(sp)
   135cc:	df000315 	stw	fp,12(sp)
   135d0:	df000304 	addi	fp,sp,12
   135d4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   135d8:	d0a00517 	ldw	r2,-32748(gp)
   135dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   135e0:	00003106 	br	136a8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   135e4:	e0bffd17 	ldw	r2,-12(fp)
   135e8:	10800217 	ldw	r2,8(r2)
   135ec:	1009883a 	mov	r4,r2
   135f0:	00138c80 	call	138c8 <strlen>
   135f4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   135f8:	e0bffd17 	ldw	r2,-12(fp)
   135fc:	10c00217 	ldw	r3,8(r2)
   13600:	e0bffe17 	ldw	r2,-8(fp)
   13604:	10bfffc4 	addi	r2,r2,-1
   13608:	1885883a 	add	r2,r3,r2
   1360c:	10800003 	ldbu	r2,0(r2)
   13610:	10803fcc 	andi	r2,r2,255
   13614:	1080201c 	xori	r2,r2,128
   13618:	10bfe004 	addi	r2,r2,-128
   1361c:	10800bd8 	cmpnei	r2,r2,47
   13620:	1000031e 	bne	r2,zero,13630 <alt_find_file+0x6c>
    {
      len -= 1;
   13624:	e0bffe17 	ldw	r2,-8(fp)
   13628:	10bfffc4 	addi	r2,r2,-1
   1362c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   13630:	e0bffe17 	ldw	r2,-8(fp)
   13634:	e0ffff17 	ldw	r3,-4(fp)
   13638:	1885883a 	add	r2,r3,r2
   1363c:	10800003 	ldbu	r2,0(r2)
   13640:	10803fcc 	andi	r2,r2,255
   13644:	1080201c 	xori	r2,r2,128
   13648:	10bfe004 	addi	r2,r2,-128
   1364c:	10800be0 	cmpeqi	r2,r2,47
   13650:	1000081e 	bne	r2,zero,13674 <alt_find_file+0xb0>
   13654:	e0bffe17 	ldw	r2,-8(fp)
   13658:	e0ffff17 	ldw	r3,-4(fp)
   1365c:	1885883a 	add	r2,r3,r2
   13660:	10800003 	ldbu	r2,0(r2)
   13664:	10803fcc 	andi	r2,r2,255
   13668:	1080201c 	xori	r2,r2,128
   1366c:	10bfe004 	addi	r2,r2,-128
   13670:	10000a1e 	bne	r2,zero,1369c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   13674:	e0bffd17 	ldw	r2,-12(fp)
   13678:	10800217 	ldw	r2,8(r2)
   1367c:	e0fffe17 	ldw	r3,-8(fp)
   13680:	180d883a 	mov	r6,r3
   13684:	e17fff17 	ldw	r5,-4(fp)
   13688:	1009883a 	mov	r4,r2
   1368c:	001384c0 	call	1384c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   13690:	1000021e 	bne	r2,zero,1369c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   13694:	e0bffd17 	ldw	r2,-12(fp)
   13698:	00000706 	br	136b8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1369c:	e0bffd17 	ldw	r2,-12(fp)
   136a0:	10800017 	ldw	r2,0(r2)
   136a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   136a8:	e0fffd17 	ldw	r3,-12(fp)
   136ac:	d0a00504 	addi	r2,gp,-32748
   136b0:	18bfcc1e 	bne	r3,r2,135e4 <__alt_data_end+0xffff35e4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   136b4:	0005883a 	mov	r2,zero
}
   136b8:	e037883a 	mov	sp,fp
   136bc:	dfc00117 	ldw	ra,4(sp)
   136c0:	df000017 	ldw	fp,0(sp)
   136c4:	dec00204 	addi	sp,sp,8
   136c8:	f800283a 	ret

000136cc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   136cc:	defffc04 	addi	sp,sp,-16
   136d0:	df000315 	stw	fp,12(sp)
   136d4:	df000304 	addi	fp,sp,12
   136d8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   136dc:	00bffa04 	movi	r2,-24
   136e0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   136e4:	e03ffd15 	stw	zero,-12(fp)
   136e8:	00001906 	br	13750 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   136ec:	00800074 	movhi	r2,1
   136f0:	1091d304 	addi	r2,r2,18252
   136f4:	e0fffd17 	ldw	r3,-12(fp)
   136f8:	18c00324 	muli	r3,r3,12
   136fc:	10c5883a 	add	r2,r2,r3
   13700:	10800017 	ldw	r2,0(r2)
   13704:	10000f1e 	bne	r2,zero,13744 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   13708:	00800074 	movhi	r2,1
   1370c:	1091d304 	addi	r2,r2,18252
   13710:	e0fffd17 	ldw	r3,-12(fp)
   13714:	18c00324 	muli	r3,r3,12
   13718:	10c5883a 	add	r2,r2,r3
   1371c:	e0ffff17 	ldw	r3,-4(fp)
   13720:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   13724:	d0e00917 	ldw	r3,-32732(gp)
   13728:	e0bffd17 	ldw	r2,-12(fp)
   1372c:	1880020e 	bge	r3,r2,13738 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   13730:	e0bffd17 	ldw	r2,-12(fp)
   13734:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
   13738:	e0bffd17 	ldw	r2,-12(fp)
   1373c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   13740:	00000606 	br	1375c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   13744:	e0bffd17 	ldw	r2,-12(fp)
   13748:	10800044 	addi	r2,r2,1
   1374c:	e0bffd15 	stw	r2,-12(fp)
   13750:	e0bffd17 	ldw	r2,-12(fp)
   13754:	10800810 	cmplti	r2,r2,32
   13758:	103fe41e 	bne	r2,zero,136ec <__alt_data_end+0xffff36ec>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1375c:	e0bffe17 	ldw	r2,-8(fp)
}
   13760:	e037883a 	mov	sp,fp
   13764:	df000017 	ldw	fp,0(sp)
   13768:	dec00104 	addi	sp,sp,4
   1376c:	f800283a 	ret

00013770 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   13770:	defffb04 	addi	sp,sp,-20
   13774:	df000415 	stw	fp,16(sp)
   13778:	df000404 	addi	fp,sp,16
   1377c:	e13ffe15 	stw	r4,-8(fp)
   13780:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   13784:	e0bfff17 	ldw	r2,-4(fp)
   13788:	10840070 	cmpltui	r2,r2,4097
   1378c:	1000021e 	bne	r2,zero,13798 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   13790:	00840004 	movi	r2,4096
   13794:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   13798:	e0fffe17 	ldw	r3,-8(fp)
   1379c:	e0bfff17 	ldw	r2,-4(fp)
   137a0:	1885883a 	add	r2,r3,r2
   137a4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   137a8:	e0bffe17 	ldw	r2,-8(fp)
   137ac:	e0bffc15 	stw	r2,-16(fp)
   137b0:	00000506 	br	137c8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   137b4:	e0bffc17 	ldw	r2,-16(fp)
   137b8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   137bc:	e0bffc17 	ldw	r2,-16(fp)
   137c0:	10800804 	addi	r2,r2,32
   137c4:	e0bffc15 	stw	r2,-16(fp)
   137c8:	e0fffc17 	ldw	r3,-16(fp)
   137cc:	e0bffd17 	ldw	r2,-12(fp)
   137d0:	18bff836 	bltu	r3,r2,137b4 <__alt_data_end+0xffff37b4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   137d4:	e0bffe17 	ldw	r2,-8(fp)
   137d8:	108007cc 	andi	r2,r2,31
   137dc:	10000226 	beq	r2,zero,137e8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   137e0:	e0bffc17 	ldw	r2,-16(fp)
   137e4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   137e8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   137ec:	0001883a 	nop
   137f0:	e037883a 	mov	sp,fp
   137f4:	df000017 	ldw	fp,0(sp)
   137f8:	dec00104 	addi	sp,sp,4
   137fc:	f800283a 	ret

00013800 <atexit>:
   13800:	200b883a 	mov	r5,r4
   13804:	000f883a 	mov	r7,zero
   13808:	000d883a 	mov	r6,zero
   1380c:	0009883a 	mov	r4,zero
   13810:	00139601 	jmpi	13960 <__register_exitproc>

00013814 <exit>:
   13814:	defffe04 	addi	sp,sp,-8
   13818:	000b883a 	mov	r5,zero
   1381c:	dc000015 	stw	r16,0(sp)
   13820:	dfc00115 	stw	ra,4(sp)
   13824:	2021883a 	mov	r16,r4
   13828:	0013a780 	call	13a78 <__call_exitprocs>
   1382c:	00800074 	movhi	r2,1
   13830:	10923404 	addi	r2,r2,18640
   13834:	11000017 	ldw	r4,0(r2)
   13838:	20800f17 	ldw	r2,60(r4)
   1383c:	10000126 	beq	r2,zero,13844 <exit+0x30>
   13840:	103ee83a 	callr	r2
   13844:	8009883a 	mov	r4,r16
   13848:	00141300 	call	14130 <_exit>

0001384c <memcmp>:
   1384c:	01c000c4 	movi	r7,3
   13850:	3980192e 	bgeu	r7,r6,138b8 <memcmp+0x6c>
   13854:	2144b03a 	or	r2,r4,r5
   13858:	11c4703a 	and	r2,r2,r7
   1385c:	10000f26 	beq	r2,zero,1389c <memcmp+0x50>
   13860:	20800003 	ldbu	r2,0(r4)
   13864:	28c00003 	ldbu	r3,0(r5)
   13868:	10c0151e 	bne	r2,r3,138c0 <memcmp+0x74>
   1386c:	31bfff84 	addi	r6,r6,-2
   13870:	01ffffc4 	movi	r7,-1
   13874:	00000406 	br	13888 <memcmp+0x3c>
   13878:	20800003 	ldbu	r2,0(r4)
   1387c:	28c00003 	ldbu	r3,0(r5)
   13880:	31bfffc4 	addi	r6,r6,-1
   13884:	10c00e1e 	bne	r2,r3,138c0 <memcmp+0x74>
   13888:	21000044 	addi	r4,r4,1
   1388c:	29400044 	addi	r5,r5,1
   13890:	31fff91e 	bne	r6,r7,13878 <__alt_data_end+0xffff3878>
   13894:	0005883a 	mov	r2,zero
   13898:	f800283a 	ret
   1389c:	20c00017 	ldw	r3,0(r4)
   138a0:	28800017 	ldw	r2,0(r5)
   138a4:	18bfee1e 	bne	r3,r2,13860 <__alt_data_end+0xffff3860>
   138a8:	31bfff04 	addi	r6,r6,-4
   138ac:	21000104 	addi	r4,r4,4
   138b0:	29400104 	addi	r5,r5,4
   138b4:	39bff936 	bltu	r7,r6,1389c <__alt_data_end+0xffff389c>
   138b8:	303fe91e 	bne	r6,zero,13860 <__alt_data_end+0xffff3860>
   138bc:	003ff506 	br	13894 <__alt_data_end+0xffff3894>
   138c0:	10c5c83a 	sub	r2,r2,r3
   138c4:	f800283a 	ret

000138c8 <strlen>:
   138c8:	208000cc 	andi	r2,r4,3
   138cc:	10002026 	beq	r2,zero,13950 <strlen+0x88>
   138d0:	20800007 	ldb	r2,0(r4)
   138d4:	10002026 	beq	r2,zero,13958 <strlen+0x90>
   138d8:	2005883a 	mov	r2,r4
   138dc:	00000206 	br	138e8 <strlen+0x20>
   138e0:	10c00007 	ldb	r3,0(r2)
   138e4:	18001826 	beq	r3,zero,13948 <strlen+0x80>
   138e8:	10800044 	addi	r2,r2,1
   138ec:	10c000cc 	andi	r3,r2,3
   138f0:	183ffb1e 	bne	r3,zero,138e0 <__alt_data_end+0xffff38e0>
   138f4:	10c00017 	ldw	r3,0(r2)
   138f8:	01ffbff4 	movhi	r7,65279
   138fc:	39ffbfc4 	addi	r7,r7,-257
   13900:	00ca303a 	nor	r5,zero,r3
   13904:	01a02074 	movhi	r6,32897
   13908:	19c7883a 	add	r3,r3,r7
   1390c:	31a02004 	addi	r6,r6,-32640
   13910:	1946703a 	and	r3,r3,r5
   13914:	1986703a 	and	r3,r3,r6
   13918:	1800091e 	bne	r3,zero,13940 <strlen+0x78>
   1391c:	10800104 	addi	r2,r2,4
   13920:	10c00017 	ldw	r3,0(r2)
   13924:	19cb883a 	add	r5,r3,r7
   13928:	00c6303a 	nor	r3,zero,r3
   1392c:	28c6703a 	and	r3,r5,r3
   13930:	1986703a 	and	r3,r3,r6
   13934:	183ff926 	beq	r3,zero,1391c <__alt_data_end+0xffff391c>
   13938:	00000106 	br	13940 <strlen+0x78>
   1393c:	10800044 	addi	r2,r2,1
   13940:	10c00007 	ldb	r3,0(r2)
   13944:	183ffd1e 	bne	r3,zero,1393c <__alt_data_end+0xffff393c>
   13948:	1105c83a 	sub	r2,r2,r4
   1394c:	f800283a 	ret
   13950:	2005883a 	mov	r2,r4
   13954:	003fe706 	br	138f4 <__alt_data_end+0xffff38f4>
   13958:	0005883a 	mov	r2,zero
   1395c:	f800283a 	ret

00013960 <__register_exitproc>:
   13960:	defffa04 	addi	sp,sp,-24
   13964:	dc000315 	stw	r16,12(sp)
   13968:	04000074 	movhi	r16,1
   1396c:	84123404 	addi	r16,r16,18640
   13970:	80c00017 	ldw	r3,0(r16)
   13974:	dc400415 	stw	r17,16(sp)
   13978:	dfc00515 	stw	ra,20(sp)
   1397c:	18805217 	ldw	r2,328(r3)
   13980:	2023883a 	mov	r17,r4
   13984:	10003726 	beq	r2,zero,13a64 <__register_exitproc+0x104>
   13988:	10c00117 	ldw	r3,4(r2)
   1398c:	010007c4 	movi	r4,31
   13990:	20c00e16 	blt	r4,r3,139cc <__register_exitproc+0x6c>
   13994:	1a000044 	addi	r8,r3,1
   13998:	8800221e 	bne	r17,zero,13a24 <__register_exitproc+0xc4>
   1399c:	18c00084 	addi	r3,r3,2
   139a0:	18c7883a 	add	r3,r3,r3
   139a4:	18c7883a 	add	r3,r3,r3
   139a8:	12000115 	stw	r8,4(r2)
   139ac:	10c7883a 	add	r3,r2,r3
   139b0:	19400015 	stw	r5,0(r3)
   139b4:	0005883a 	mov	r2,zero
   139b8:	dfc00517 	ldw	ra,20(sp)
   139bc:	dc400417 	ldw	r17,16(sp)
   139c0:	dc000317 	ldw	r16,12(sp)
   139c4:	dec00604 	addi	sp,sp,24
   139c8:	f800283a 	ret
   139cc:	00800034 	movhi	r2,0
   139d0:	10800004 	addi	r2,r2,0
   139d4:	10002626 	beq	r2,zero,13a70 <__register_exitproc+0x110>
   139d8:	01006404 	movi	r4,400
   139dc:	d9400015 	stw	r5,0(sp)
   139e0:	d9800115 	stw	r6,4(sp)
   139e4:	d9c00215 	stw	r7,8(sp)
   139e8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   139ec:	d9400017 	ldw	r5,0(sp)
   139f0:	d9800117 	ldw	r6,4(sp)
   139f4:	d9c00217 	ldw	r7,8(sp)
   139f8:	10001d26 	beq	r2,zero,13a70 <__register_exitproc+0x110>
   139fc:	81000017 	ldw	r4,0(r16)
   13a00:	10000115 	stw	zero,4(r2)
   13a04:	02000044 	movi	r8,1
   13a08:	22405217 	ldw	r9,328(r4)
   13a0c:	0007883a 	mov	r3,zero
   13a10:	12400015 	stw	r9,0(r2)
   13a14:	20805215 	stw	r2,328(r4)
   13a18:	10006215 	stw	zero,392(r2)
   13a1c:	10006315 	stw	zero,396(r2)
   13a20:	883fde26 	beq	r17,zero,1399c <__alt_data_end+0xffff399c>
   13a24:	18c9883a 	add	r4,r3,r3
   13a28:	2109883a 	add	r4,r4,r4
   13a2c:	1109883a 	add	r4,r2,r4
   13a30:	21802215 	stw	r6,136(r4)
   13a34:	01800044 	movi	r6,1
   13a38:	12406217 	ldw	r9,392(r2)
   13a3c:	30cc983a 	sll	r6,r6,r3
   13a40:	4992b03a 	or	r9,r9,r6
   13a44:	12406215 	stw	r9,392(r2)
   13a48:	21c04215 	stw	r7,264(r4)
   13a4c:	01000084 	movi	r4,2
   13a50:	893fd21e 	bne	r17,r4,1399c <__alt_data_end+0xffff399c>
   13a54:	11006317 	ldw	r4,396(r2)
   13a58:	218cb03a 	or	r6,r4,r6
   13a5c:	11806315 	stw	r6,396(r2)
   13a60:	003fce06 	br	1399c <__alt_data_end+0xffff399c>
   13a64:	18805304 	addi	r2,r3,332
   13a68:	18805215 	stw	r2,328(r3)
   13a6c:	003fc606 	br	13988 <__alt_data_end+0xffff3988>
   13a70:	00bfffc4 	movi	r2,-1
   13a74:	003fd006 	br	139b8 <__alt_data_end+0xffff39b8>

00013a78 <__call_exitprocs>:
   13a78:	defff504 	addi	sp,sp,-44
   13a7c:	df000915 	stw	fp,36(sp)
   13a80:	dd400615 	stw	r21,24(sp)
   13a84:	dc800315 	stw	r18,12(sp)
   13a88:	dfc00a15 	stw	ra,40(sp)
   13a8c:	ddc00815 	stw	r23,32(sp)
   13a90:	dd800715 	stw	r22,28(sp)
   13a94:	dd000515 	stw	r20,20(sp)
   13a98:	dcc00415 	stw	r19,16(sp)
   13a9c:	dc400215 	stw	r17,8(sp)
   13aa0:	dc000115 	stw	r16,4(sp)
   13aa4:	d9000015 	stw	r4,0(sp)
   13aa8:	2839883a 	mov	fp,r5
   13aac:	04800044 	movi	r18,1
   13ab0:	057fffc4 	movi	r21,-1
   13ab4:	00800074 	movhi	r2,1
   13ab8:	10923404 	addi	r2,r2,18640
   13abc:	12000017 	ldw	r8,0(r2)
   13ac0:	45005217 	ldw	r20,328(r8)
   13ac4:	44c05204 	addi	r19,r8,328
   13ac8:	a0001c26 	beq	r20,zero,13b3c <__call_exitprocs+0xc4>
   13acc:	a0800117 	ldw	r2,4(r20)
   13ad0:	15ffffc4 	addi	r23,r2,-1
   13ad4:	b8000d16 	blt	r23,zero,13b0c <__call_exitprocs+0x94>
   13ad8:	14000044 	addi	r16,r2,1
   13adc:	8421883a 	add	r16,r16,r16
   13ae0:	8421883a 	add	r16,r16,r16
   13ae4:	84402004 	addi	r17,r16,128
   13ae8:	a463883a 	add	r17,r20,r17
   13aec:	a421883a 	add	r16,r20,r16
   13af0:	e0001e26 	beq	fp,zero,13b6c <__call_exitprocs+0xf4>
   13af4:	80804017 	ldw	r2,256(r16)
   13af8:	e0801c26 	beq	fp,r2,13b6c <__call_exitprocs+0xf4>
   13afc:	bdffffc4 	addi	r23,r23,-1
   13b00:	843fff04 	addi	r16,r16,-4
   13b04:	8c7fff04 	addi	r17,r17,-4
   13b08:	bd7ff91e 	bne	r23,r21,13af0 <__alt_data_end+0xffff3af0>
   13b0c:	00800034 	movhi	r2,0
   13b10:	10800004 	addi	r2,r2,0
   13b14:	10000926 	beq	r2,zero,13b3c <__call_exitprocs+0xc4>
   13b18:	a0800117 	ldw	r2,4(r20)
   13b1c:	1000301e 	bne	r2,zero,13be0 <__call_exitprocs+0x168>
   13b20:	a0800017 	ldw	r2,0(r20)
   13b24:	10003226 	beq	r2,zero,13bf0 <__call_exitprocs+0x178>
   13b28:	a009883a 	mov	r4,r20
   13b2c:	98800015 	stw	r2,0(r19)
   13b30:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   13b34:	9d000017 	ldw	r20,0(r19)
   13b38:	a03fe41e 	bne	r20,zero,13acc <__alt_data_end+0xffff3acc>
   13b3c:	dfc00a17 	ldw	ra,40(sp)
   13b40:	df000917 	ldw	fp,36(sp)
   13b44:	ddc00817 	ldw	r23,32(sp)
   13b48:	dd800717 	ldw	r22,28(sp)
   13b4c:	dd400617 	ldw	r21,24(sp)
   13b50:	dd000517 	ldw	r20,20(sp)
   13b54:	dcc00417 	ldw	r19,16(sp)
   13b58:	dc800317 	ldw	r18,12(sp)
   13b5c:	dc400217 	ldw	r17,8(sp)
   13b60:	dc000117 	ldw	r16,4(sp)
   13b64:	dec00b04 	addi	sp,sp,44
   13b68:	f800283a 	ret
   13b6c:	a0800117 	ldw	r2,4(r20)
   13b70:	80c00017 	ldw	r3,0(r16)
   13b74:	10bfffc4 	addi	r2,r2,-1
   13b78:	15c01426 	beq	r2,r23,13bcc <__call_exitprocs+0x154>
   13b7c:	80000015 	stw	zero,0(r16)
   13b80:	183fde26 	beq	r3,zero,13afc <__alt_data_end+0xffff3afc>
   13b84:	95c8983a 	sll	r4,r18,r23
   13b88:	a0806217 	ldw	r2,392(r20)
   13b8c:	a5800117 	ldw	r22,4(r20)
   13b90:	2084703a 	and	r2,r4,r2
   13b94:	10000b26 	beq	r2,zero,13bc4 <__call_exitprocs+0x14c>
   13b98:	a0806317 	ldw	r2,396(r20)
   13b9c:	2088703a 	and	r4,r4,r2
   13ba0:	20000c1e 	bne	r4,zero,13bd4 <__call_exitprocs+0x15c>
   13ba4:	89400017 	ldw	r5,0(r17)
   13ba8:	d9000017 	ldw	r4,0(sp)
   13bac:	183ee83a 	callr	r3
   13bb0:	a0800117 	ldw	r2,4(r20)
   13bb4:	15bfbf1e 	bne	r2,r22,13ab4 <__alt_data_end+0xffff3ab4>
   13bb8:	98800017 	ldw	r2,0(r19)
   13bbc:	153fcf26 	beq	r2,r20,13afc <__alt_data_end+0xffff3afc>
   13bc0:	003fbc06 	br	13ab4 <__alt_data_end+0xffff3ab4>
   13bc4:	183ee83a 	callr	r3
   13bc8:	003ff906 	br	13bb0 <__alt_data_end+0xffff3bb0>
   13bcc:	a5c00115 	stw	r23,4(r20)
   13bd0:	003feb06 	br	13b80 <__alt_data_end+0xffff3b80>
   13bd4:	89000017 	ldw	r4,0(r17)
   13bd8:	183ee83a 	callr	r3
   13bdc:	003ff406 	br	13bb0 <__alt_data_end+0xffff3bb0>
   13be0:	a0800017 	ldw	r2,0(r20)
   13be4:	a027883a 	mov	r19,r20
   13be8:	1029883a 	mov	r20,r2
   13bec:	003fb606 	br	13ac8 <__alt_data_end+0xffff3ac8>
   13bf0:	0005883a 	mov	r2,zero
   13bf4:	003ffb06 	br	13be4 <__alt_data_end+0xffff3be4>

00013bf8 <__umoddi3>:
   13bf8:	defff404 	addi	sp,sp,-48
   13bfc:	df000a15 	stw	fp,40(sp)
   13c00:	dc400315 	stw	r17,12(sp)
   13c04:	dc000215 	stw	r16,8(sp)
   13c08:	dfc00b15 	stw	ra,44(sp)
   13c0c:	ddc00915 	stw	r23,36(sp)
   13c10:	dd800815 	stw	r22,32(sp)
   13c14:	dd400715 	stw	r21,28(sp)
   13c18:	dd000615 	stw	r20,24(sp)
   13c1c:	dcc00515 	stw	r19,20(sp)
   13c20:	dc800415 	stw	r18,16(sp)
   13c24:	2021883a 	mov	r16,r4
   13c28:	2823883a 	mov	r17,r5
   13c2c:	2839883a 	mov	fp,r5
   13c30:	38003c1e 	bne	r7,zero,13d24 <__umoddi3+0x12c>
   13c34:	3027883a 	mov	r19,r6
   13c38:	2029883a 	mov	r20,r4
   13c3c:	2980512e 	bgeu	r5,r6,13d84 <__umoddi3+0x18c>
   13c40:	00bfffd4 	movui	r2,65535
   13c44:	11809a36 	bltu	r2,r6,13eb0 <__umoddi3+0x2b8>
   13c48:	01003fc4 	movi	r4,255
   13c4c:	2189803a 	cmpltu	r4,r4,r6
   13c50:	200890fa 	slli	r4,r4,3
   13c54:	3104d83a 	srl	r2,r6,r4
   13c58:	00c00074 	movhi	r3,1
   13c5c:	18d06984 	addi	r3,r3,16806
   13c60:	1885883a 	add	r2,r3,r2
   13c64:	10c00003 	ldbu	r3,0(r2)
   13c68:	00800804 	movi	r2,32
   13c6c:	1909883a 	add	r4,r3,r4
   13c70:	1125c83a 	sub	r18,r2,r4
   13c74:	90000526 	beq	r18,zero,13c8c <__umoddi3+0x94>
   13c78:	8ca2983a 	sll	r17,r17,r18
   13c7c:	8108d83a 	srl	r4,r16,r4
   13c80:	34a6983a 	sll	r19,r6,r18
   13c84:	84a8983a 	sll	r20,r16,r18
   13c88:	2478b03a 	or	fp,r4,r17
   13c8c:	982ed43a 	srli	r23,r19,16
   13c90:	e009883a 	mov	r4,fp
   13c94:	9dbfffcc 	andi	r22,r19,65535
   13c98:	b80b883a 	mov	r5,r23
   13c9c:	0011c680 	call	11c68 <__umodsi3>
   13ca0:	e009883a 	mov	r4,fp
   13ca4:	b80b883a 	mov	r5,r23
   13ca8:	102b883a 	mov	r21,r2
   13cac:	0011c040 	call	11c04 <__udivsi3>
   13cb0:	a806943a 	slli	r3,r21,16
   13cb4:	a008d43a 	srli	r4,r20,16
   13cb8:	b085383a 	mul	r2,r22,r2
   13cbc:	20c8b03a 	or	r4,r4,r3
   13cc0:	2080032e 	bgeu	r4,r2,13cd0 <__umoddi3+0xd8>
   13cc4:	24c9883a 	add	r4,r4,r19
   13cc8:	24c00136 	bltu	r4,r19,13cd0 <__umoddi3+0xd8>
   13ccc:	20811036 	bltu	r4,r2,14110 <__umoddi3+0x518>
   13cd0:	20abc83a 	sub	r21,r4,r2
   13cd4:	b80b883a 	mov	r5,r23
   13cd8:	a809883a 	mov	r4,r21
   13cdc:	0011c680 	call	11c68 <__umodsi3>
   13ce0:	1023883a 	mov	r17,r2
   13ce4:	b80b883a 	mov	r5,r23
   13ce8:	a809883a 	mov	r4,r21
   13cec:	0011c040 	call	11c04 <__udivsi3>
   13cf0:	8822943a 	slli	r17,r17,16
   13cf4:	b085383a 	mul	r2,r22,r2
   13cf8:	a0ffffcc 	andi	r3,r20,65535
   13cfc:	1c46b03a 	or	r3,r3,r17
   13d00:	1880042e 	bgeu	r3,r2,13d14 <__umoddi3+0x11c>
   13d04:	1cc7883a 	add	r3,r3,r19
   13d08:	1cc00236 	bltu	r3,r19,13d14 <__umoddi3+0x11c>
   13d0c:	1880012e 	bgeu	r3,r2,13d14 <__umoddi3+0x11c>
   13d10:	1cc7883a 	add	r3,r3,r19
   13d14:	1885c83a 	sub	r2,r3,r2
   13d18:	1484d83a 	srl	r2,r2,r18
   13d1c:	0007883a 	mov	r3,zero
   13d20:	00004f06 	br	13e60 <__umoddi3+0x268>
   13d24:	29c04c36 	bltu	r5,r7,13e58 <__umoddi3+0x260>
   13d28:	00bfffd4 	movui	r2,65535
   13d2c:	11c0582e 	bgeu	r2,r7,13e90 <__umoddi3+0x298>
   13d30:	00804034 	movhi	r2,256
   13d34:	10bfffc4 	addi	r2,r2,-1
   13d38:	11c0e736 	bltu	r2,r7,140d8 <__umoddi3+0x4e0>
   13d3c:	01000404 	movi	r4,16
   13d40:	3904d83a 	srl	r2,r7,r4
   13d44:	00c00074 	movhi	r3,1
   13d48:	18d06984 	addi	r3,r3,16806
   13d4c:	1885883a 	add	r2,r3,r2
   13d50:	14c00003 	ldbu	r19,0(r2)
   13d54:	00c00804 	movi	r3,32
   13d58:	9927883a 	add	r19,r19,r4
   13d5c:	1ce9c83a 	sub	r20,r3,r19
   13d60:	a000581e 	bne	r20,zero,13ec4 <__umoddi3+0x2cc>
   13d64:	3c400136 	bltu	r7,r17,13d6c <__umoddi3+0x174>
   13d68:	8180eb36 	bltu	r16,r6,14118 <__umoddi3+0x520>
   13d6c:	8185c83a 	sub	r2,r16,r6
   13d70:	89e3c83a 	sub	r17,r17,r7
   13d74:	8089803a 	cmpltu	r4,r16,r2
   13d78:	8939c83a 	sub	fp,r17,r4
   13d7c:	e007883a 	mov	r3,fp
   13d80:	00003706 	br	13e60 <__umoddi3+0x268>
   13d84:	3000041e 	bne	r6,zero,13d98 <__umoddi3+0x1a0>
   13d88:	000b883a 	mov	r5,zero
   13d8c:	01000044 	movi	r4,1
   13d90:	0011c040 	call	11c04 <__udivsi3>
   13d94:	1027883a 	mov	r19,r2
   13d98:	00bfffd4 	movui	r2,65535
   13d9c:	14c0402e 	bgeu	r2,r19,13ea0 <__umoddi3+0x2a8>
   13da0:	00804034 	movhi	r2,256
   13da4:	10bfffc4 	addi	r2,r2,-1
   13da8:	14c0cd36 	bltu	r2,r19,140e0 <__umoddi3+0x4e8>
   13dac:	00800404 	movi	r2,16
   13db0:	9886d83a 	srl	r3,r19,r2
   13db4:	01000074 	movhi	r4,1
   13db8:	21106984 	addi	r4,r4,16806
   13dbc:	20c7883a 	add	r3,r4,r3
   13dc0:	18c00003 	ldbu	r3,0(r3)
   13dc4:	1887883a 	add	r3,r3,r2
   13dc8:	00800804 	movi	r2,32
   13dcc:	10e5c83a 	sub	r18,r2,r3
   13dd0:	9000901e 	bne	r18,zero,14014 <__umoddi3+0x41c>
   13dd4:	982cd43a 	srli	r22,r19,16
   13dd8:	8ce3c83a 	sub	r17,r17,r19
   13ddc:	9d7fffcc 	andi	r21,r19,65535
   13de0:	b00b883a 	mov	r5,r22
   13de4:	8809883a 	mov	r4,r17
   13de8:	0011c680 	call	11c68 <__umodsi3>
   13dec:	8809883a 	mov	r4,r17
   13df0:	b00b883a 	mov	r5,r22
   13df4:	1021883a 	mov	r16,r2
   13df8:	0011c040 	call	11c04 <__udivsi3>
   13dfc:	8006943a 	slli	r3,r16,16
   13e00:	a008d43a 	srli	r4,r20,16
   13e04:	1545383a 	mul	r2,r2,r21
   13e08:	20c8b03a 	or	r4,r4,r3
   13e0c:	2080042e 	bgeu	r4,r2,13e20 <__umoddi3+0x228>
   13e10:	24c9883a 	add	r4,r4,r19
   13e14:	24c00236 	bltu	r4,r19,13e20 <__umoddi3+0x228>
   13e18:	2080012e 	bgeu	r4,r2,13e20 <__umoddi3+0x228>
   13e1c:	24c9883a 	add	r4,r4,r19
   13e20:	20a1c83a 	sub	r16,r4,r2
   13e24:	b00b883a 	mov	r5,r22
   13e28:	8009883a 	mov	r4,r16
   13e2c:	0011c680 	call	11c68 <__umodsi3>
   13e30:	1023883a 	mov	r17,r2
   13e34:	b00b883a 	mov	r5,r22
   13e38:	8009883a 	mov	r4,r16
   13e3c:	0011c040 	call	11c04 <__udivsi3>
   13e40:	8822943a 	slli	r17,r17,16
   13e44:	1545383a 	mul	r2,r2,r21
   13e48:	a53fffcc 	andi	r20,r20,65535
   13e4c:	a446b03a 	or	r3,r20,r17
   13e50:	18bfb02e 	bgeu	r3,r2,13d14 <__alt_data_end+0xffff3d14>
   13e54:	003fab06 	br	13d04 <__alt_data_end+0xffff3d04>
   13e58:	2005883a 	mov	r2,r4
   13e5c:	2807883a 	mov	r3,r5
   13e60:	dfc00b17 	ldw	ra,44(sp)
   13e64:	df000a17 	ldw	fp,40(sp)
   13e68:	ddc00917 	ldw	r23,36(sp)
   13e6c:	dd800817 	ldw	r22,32(sp)
   13e70:	dd400717 	ldw	r21,28(sp)
   13e74:	dd000617 	ldw	r20,24(sp)
   13e78:	dcc00517 	ldw	r19,20(sp)
   13e7c:	dc800417 	ldw	r18,16(sp)
   13e80:	dc400317 	ldw	r17,12(sp)
   13e84:	dc000217 	ldw	r16,8(sp)
   13e88:	dec00c04 	addi	sp,sp,48
   13e8c:	f800283a 	ret
   13e90:	04c03fc4 	movi	r19,255
   13e94:	99c9803a 	cmpltu	r4,r19,r7
   13e98:	200890fa 	slli	r4,r4,3
   13e9c:	003fa806 	br	13d40 <__alt_data_end+0xffff3d40>
   13ea0:	00803fc4 	movi	r2,255
   13ea4:	14c5803a 	cmpltu	r2,r2,r19
   13ea8:	100490fa 	slli	r2,r2,3
   13eac:	003fc006 	br	13db0 <__alt_data_end+0xffff3db0>
   13eb0:	00804034 	movhi	r2,256
   13eb4:	10bfffc4 	addi	r2,r2,-1
   13eb8:	11808b36 	bltu	r2,r6,140e8 <__umoddi3+0x4f0>
   13ebc:	01000404 	movi	r4,16
   13ec0:	003f6406 	br	13c54 <__alt_data_end+0xffff3c54>
   13ec4:	34c4d83a 	srl	r2,r6,r19
   13ec8:	3d0e983a 	sll	r7,r7,r20
   13ecc:	8cf8d83a 	srl	fp,r17,r19
   13ed0:	8d10983a 	sll	r8,r17,r20
   13ed4:	38aab03a 	or	r21,r7,r2
   13ed8:	a82cd43a 	srli	r22,r21,16
   13edc:	84e2d83a 	srl	r17,r16,r19
   13ee0:	e009883a 	mov	r4,fp
   13ee4:	b00b883a 	mov	r5,r22
   13ee8:	8a22b03a 	or	r17,r17,r8
   13eec:	3524983a 	sll	r18,r6,r20
   13ef0:	0011c680 	call	11c68 <__umodsi3>
   13ef4:	e009883a 	mov	r4,fp
   13ef8:	b00b883a 	mov	r5,r22
   13efc:	102f883a 	mov	r23,r2
   13f00:	0011c040 	call	11c04 <__udivsi3>
   13f04:	100d883a 	mov	r6,r2
   13f08:	b808943a 	slli	r4,r23,16
   13f0c:	aa3fffcc 	andi	r8,r21,65535
   13f10:	8804d43a 	srli	r2,r17,16
   13f14:	41af383a 	mul	r23,r8,r6
   13f18:	8520983a 	sll	r16,r16,r20
   13f1c:	1104b03a 	or	r2,r2,r4
   13f20:	15c0042e 	bgeu	r2,r23,13f34 <__umoddi3+0x33c>
   13f24:	1545883a 	add	r2,r2,r21
   13f28:	30ffffc4 	addi	r3,r6,-1
   13f2c:	1540742e 	bgeu	r2,r21,14100 <__umoddi3+0x508>
   13f30:	180d883a 	mov	r6,r3
   13f34:	15efc83a 	sub	r23,r2,r23
   13f38:	b00b883a 	mov	r5,r22
   13f3c:	b809883a 	mov	r4,r23
   13f40:	d9800115 	stw	r6,4(sp)
   13f44:	da000015 	stw	r8,0(sp)
   13f48:	0011c680 	call	11c68 <__umodsi3>
   13f4c:	b00b883a 	mov	r5,r22
   13f50:	b809883a 	mov	r4,r23
   13f54:	1039883a 	mov	fp,r2
   13f58:	0011c040 	call	11c04 <__udivsi3>
   13f5c:	da000017 	ldw	r8,0(sp)
   13f60:	e038943a 	slli	fp,fp,16
   13f64:	100b883a 	mov	r5,r2
   13f68:	4089383a 	mul	r4,r8,r2
   13f6c:	8a3fffcc 	andi	r8,r17,65535
   13f70:	4710b03a 	or	r8,r8,fp
   13f74:	d9800117 	ldw	r6,4(sp)
   13f78:	4100042e 	bgeu	r8,r4,13f8c <__umoddi3+0x394>
   13f7c:	4551883a 	add	r8,r8,r21
   13f80:	10bfffc4 	addi	r2,r2,-1
   13f84:	45405a2e 	bgeu	r8,r21,140f0 <__umoddi3+0x4f8>
   13f88:	100b883a 	mov	r5,r2
   13f8c:	300c943a 	slli	r6,r6,16
   13f90:	91ffffcc 	andi	r7,r18,65535
   13f94:	9004d43a 	srli	r2,r18,16
   13f98:	314cb03a 	or	r6,r6,r5
   13f9c:	317fffcc 	andi	r5,r6,65535
   13fa0:	300cd43a 	srli	r6,r6,16
   13fa4:	29d3383a 	mul	r9,r5,r7
   13fa8:	288b383a 	mul	r5,r5,r2
   13fac:	31cf383a 	mul	r7,r6,r7
   13fb0:	4806d43a 	srli	r3,r9,16
   13fb4:	4111c83a 	sub	r8,r8,r4
   13fb8:	29cb883a 	add	r5,r5,r7
   13fbc:	194b883a 	add	r5,r3,r5
   13fc0:	3085383a 	mul	r2,r6,r2
   13fc4:	29c0022e 	bgeu	r5,r7,13fd0 <__umoddi3+0x3d8>
   13fc8:	00c00074 	movhi	r3,1
   13fcc:	10c5883a 	add	r2,r2,r3
   13fd0:	2808d43a 	srli	r4,r5,16
   13fd4:	280a943a 	slli	r5,r5,16
   13fd8:	4a7fffcc 	andi	r9,r9,65535
   13fdc:	2085883a 	add	r2,r4,r2
   13fe0:	2a4b883a 	add	r5,r5,r9
   13fe4:	40803636 	bltu	r8,r2,140c0 <__umoddi3+0x4c8>
   13fe8:	40804d26 	beq	r8,r2,14120 <__umoddi3+0x528>
   13fec:	4089c83a 	sub	r4,r8,r2
   13ff0:	280f883a 	mov	r7,r5
   13ff4:	81cfc83a 	sub	r7,r16,r7
   13ff8:	81c7803a 	cmpltu	r3,r16,r7
   13ffc:	20c7c83a 	sub	r3,r4,r3
   14000:	1cc4983a 	sll	r2,r3,r19
   14004:	3d0ed83a 	srl	r7,r7,r20
   14008:	1d06d83a 	srl	r3,r3,r20
   1400c:	11c4b03a 	or	r2,r2,r7
   14010:	003f9306 	br	13e60 <__alt_data_end+0xffff3e60>
   14014:	9ca6983a 	sll	r19,r19,r18
   14018:	88e8d83a 	srl	r20,r17,r3
   1401c:	80c4d83a 	srl	r2,r16,r3
   14020:	982cd43a 	srli	r22,r19,16
   14024:	8ca2983a 	sll	r17,r17,r18
   14028:	a009883a 	mov	r4,r20
   1402c:	b00b883a 	mov	r5,r22
   14030:	1478b03a 	or	fp,r2,r17
   14034:	0011c680 	call	11c68 <__umodsi3>
   14038:	a009883a 	mov	r4,r20
   1403c:	b00b883a 	mov	r5,r22
   14040:	1023883a 	mov	r17,r2
   14044:	0011c040 	call	11c04 <__udivsi3>
   14048:	9d7fffcc 	andi	r21,r19,65535
   1404c:	880a943a 	slli	r5,r17,16
   14050:	e008d43a 	srli	r4,fp,16
   14054:	a885383a 	mul	r2,r21,r2
   14058:	84a8983a 	sll	r20,r16,r18
   1405c:	2148b03a 	or	r4,r4,r5
   14060:	2080042e 	bgeu	r4,r2,14074 <__umoddi3+0x47c>
   14064:	24c9883a 	add	r4,r4,r19
   14068:	24c00236 	bltu	r4,r19,14074 <__umoddi3+0x47c>
   1406c:	2080012e 	bgeu	r4,r2,14074 <__umoddi3+0x47c>
   14070:	24c9883a 	add	r4,r4,r19
   14074:	20a3c83a 	sub	r17,r4,r2
   14078:	b00b883a 	mov	r5,r22
   1407c:	8809883a 	mov	r4,r17
   14080:	0011c680 	call	11c68 <__umodsi3>
   14084:	102f883a 	mov	r23,r2
   14088:	8809883a 	mov	r4,r17
   1408c:	b00b883a 	mov	r5,r22
   14090:	0011c040 	call	11c04 <__udivsi3>
   14094:	b82e943a 	slli	r23,r23,16
   14098:	a885383a 	mul	r2,r21,r2
   1409c:	e13fffcc 	andi	r4,fp,65535
   140a0:	25c8b03a 	or	r4,r4,r23
   140a4:	2080042e 	bgeu	r4,r2,140b8 <__umoddi3+0x4c0>
   140a8:	24c9883a 	add	r4,r4,r19
   140ac:	24c00236 	bltu	r4,r19,140b8 <__umoddi3+0x4c0>
   140b0:	2080012e 	bgeu	r4,r2,140b8 <__umoddi3+0x4c0>
   140b4:	24c9883a 	add	r4,r4,r19
   140b8:	20a3c83a 	sub	r17,r4,r2
   140bc:	003f4806 	br	13de0 <__alt_data_end+0xffff3de0>
   140c0:	2c8fc83a 	sub	r7,r5,r18
   140c4:	1545c83a 	sub	r2,r2,r21
   140c8:	29cb803a 	cmpltu	r5,r5,r7
   140cc:	1145c83a 	sub	r2,r2,r5
   140d0:	4089c83a 	sub	r4,r8,r2
   140d4:	003fc706 	br	13ff4 <__alt_data_end+0xffff3ff4>
   140d8:	01000604 	movi	r4,24
   140dc:	003f1806 	br	13d40 <__alt_data_end+0xffff3d40>
   140e0:	00800604 	movi	r2,24
   140e4:	003f3206 	br	13db0 <__alt_data_end+0xffff3db0>
   140e8:	01000604 	movi	r4,24
   140ec:	003ed906 	br	13c54 <__alt_data_end+0xffff3c54>
   140f0:	413fa52e 	bgeu	r8,r4,13f88 <__alt_data_end+0xffff3f88>
   140f4:	297fff84 	addi	r5,r5,-2
   140f8:	4551883a 	add	r8,r8,r21
   140fc:	003fa306 	br	13f8c <__alt_data_end+0xffff3f8c>
   14100:	15ff8b2e 	bgeu	r2,r23,13f30 <__alt_data_end+0xffff3f30>
   14104:	31bfff84 	addi	r6,r6,-2
   14108:	1545883a 	add	r2,r2,r21
   1410c:	003f8906 	br	13f34 <__alt_data_end+0xffff3f34>
   14110:	24c9883a 	add	r4,r4,r19
   14114:	003eee06 	br	13cd0 <__alt_data_end+0xffff3cd0>
   14118:	8005883a 	mov	r2,r16
   1411c:	003f1706 	br	13d7c <__alt_data_end+0xffff3d7c>
   14120:	817fe736 	bltu	r16,r5,140c0 <__alt_data_end+0xffff40c0>
   14124:	280f883a 	mov	r7,r5
   14128:	0009883a 	mov	r4,zero
   1412c:	003fb106 	br	13ff4 <__alt_data_end+0xffff3ff4>

00014130 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   14130:	defffd04 	addi	sp,sp,-12
   14134:	df000215 	stw	fp,8(sp)
   14138:	df000204 	addi	fp,sp,8
   1413c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   14140:	0001883a 	nop
   14144:	e0bfff17 	ldw	r2,-4(fp)
   14148:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1414c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   14150:	10000226 	beq	r2,zero,1415c <_exit+0x2c>
    ALT_SIM_FAIL();
   14154:	002af070 	cmpltui	zero,zero,43969
   14158:	00000106 	br	14160 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1415c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   14160:	003fff06 	br	14160 <__alt_data_end+0xffff4160>
