
software_new.elf:     file format elf32-littlenios2
software_new.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00004de0 memsz 0x00004de0 flags r-x
    LOAD off    0x00005e00 vaddr 0x00014e00 paddr 0x00015838 align 2**12
         filesz 0x00000a38 memsz 0x00000a38 flags rw-
    LOAD off    0x00007270 vaddr 0x00016270 paddr 0x00016270 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004bf0  000101c0  000101c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  00014db0  00014db0  00005db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a38  00014e00  00015838  00005e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00016270  00016270  00007270  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000163c0  000163c0  00006838  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00006838  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000009a8  00000000  00000000  00006860  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00015418  00000000  00000000  00007208  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000594a  00000000  00000000  0001c620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006367  00000000  00000000  00021f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000013dc  00000000  00000000  000282d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000020bb  00000000  00000000  000296b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  0002b76b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000301b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000638  00000000  00000000  000301e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00032aae  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00032ab1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00032abd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00032abe  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00032abf  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00032aca  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00032ad5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  00032ae0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000015  00000000  00000000  00032ae4  2**0
                  CONTENTS, READONLY
 26 .jdi          00004005  00000000  00000000  00032af9  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003cbcc  00000000  00000000  00036afe  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101c0 l    d  .text	00000000 .text
00014db0 l    d  .rodata	00000000 .rodata
00014e00 l    d  .rwdata	00000000 .rwdata
00016270 l    d  .bss	00000000 .bss
000163c0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../software_new_bsp//obj/HAL/src/crt0.o
00010208 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00010094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
000103ac l     F .text	00000008 __fp_unlock
000103c0 l     F .text	0000019c __sinit.part.1
0001055c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00014e00 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00013008 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00013114 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013140 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0001322c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001330c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000133f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000135cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00015828 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00013818 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001394c l     F .text	00000034 alt_dev_reg
000157d4 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00013c44 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00013d80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000141f4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00014334 l     F .text	0000003c alt_get_errno
00014370 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00012e00 g     F .text	00000054 _isatty_r
00013508 g     F .text	0000007c alt_main
00010240 g     F .text	000000c0 _puts_r
000162c0 g     O .bss	00000100 alt_irq
00012b28 g     F .text	00000060 _lseek_r
00015838 g       *ABS*	00000000 __flash_rwdata_start
000163c0 g       *ABS*	00000000 __alt_heap_start
000120dc g     F .text	0000005c __sseek
000106fc g     F .text	00000010 __sinit
00010564 g     F .text	00000068 __sfmoreglue
000135a8 g     F .text	00000024 __malloc_unlock
000117c8 g     F .text	0000015c memmove
000106e4 g     F .text	00000018 _cleanup
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012da4 g     F .text	0000005c _fstat_r
0001627c g     O .bss	00000004 errno
00012058 g     F .text	00000008 __seofread
00016284 g     O .bss	00000004 alt_argv
0001d800 g       *ABS*	00000000 _gp
00015654 g     O .rwdata	00000180 alt_fd_list
00014750 g     F .text	00000090 alt_find_dev
00011680 g     F .text	00000148 memcpy
000103b4 g     F .text	0000000c _cleanup_r
000142b8 g     F .text	0000007c alt_io_redirect
00014db0 g       *ABS*	00000000 __DTOR_END__
00010300 g     F .text	00000014 puts
00013ac4 g     F .text	000000ec altera_avalon_jtag_uart_read
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00012f4c g     F .text	00000064 .hidden __udivsi3
00013268 g     F .text	000000a4 isatty
0001498c g     F .text	00000090 alt_icache_flush
00016278 g     O .bss	00000004 __malloc_top_pad
0001074c g     F .text	000004bc __sfvwrite_r
00011fb0 g     F .text	00000054 _sbrk_r
00012d44 g     F .text	00000060 _read_r
00015820 g     O .rwdata	00000004 alt_max_fd
00012348 g     F .text	000000f0 _fclose_r
000126c4 g     F .text	00000030 fflush
00016274 g     O .bss	00000004 __malloc_max_sbrked_mem
00013434 g     F .text	000000d4 lseek
00015800 g     O .rwdata	00000004 _global_impure_ptr
00011a4c g     F .text	00000564 _realloc_r
000163c0 g       *ABS*	00000000 __bss_end
00014104 g     F .text	000000f0 alt_iic_isr_register
00014624 g     F .text	00000108 alt_tick
0001071c g     F .text	00000018 __fp_lock_all
000140b8 g     F .text	0000004c alt_ic_irq_enabled
00014588 g     F .text	0000009c alt_alarm_stop
0001628c g     O .bss	00000004 alt_irq_active
000100ec g     F .exceptions	000000d4 alt_irq_handler
0001562c g     O .rwdata	00000028 alt_dev_null
00013d38 g     F .text	00000048 alt_dcache_flush_all
00015838 g       *ABS*	00000000 __ram_rwdata_end
00015818 g     O .rwdata	00000008 alt_dev_list
00013854 g     F .text	000000f8 write
00014e00 g       *ABS*	00000000 __ram_rodata_end
0001317c g     F .text	000000b0 fstat
00012fb0 g     F .text	00000058 .hidden __umodsi3
000163c0 g       *ABS*	00000000 end
00014db0 g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
00013cbc g     F .text	0000007c alt_avalon_timer_sc_init
00013bb0 g     F .text	00000094 altera_avalon_jtag_uart_write
0001070c g     F .text	00000004 __sfp_lock_acquire
0001159c g     F .text	000000e4 memchr
00012818 g     F .text	00000310 _free_r
00014bfc g     F .text	00000180 __call_exitprocs
00015808 g     O .rwdata	00000004 __malloc_sbrk_base
000101c0 g     F .text	0000004c _start
00016290 g     O .bss	00000004 _alt_tick_rate
00016294 g     O .bss	00000004 _alt_nticks
00013608 g     F .text	000000fc read
000139b8 g     F .text	0000004c alt_sys_init
00014ae4 g     F .text	00000118 __register_exitproc
00014e00 g       *ABS*	00000000 __ram_rwdata_start
00014db0 g       *ABS*	00000000 __ram_rodata_start
00016298 g     O .bss	00000028 __malloc_current_mallinfo
00013a04 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000148e8 g     F .text	000000a4 alt_get_fd
000122f4 g     F .text	00000054 _close_r
00014a68 g     F .text	0000007c memcmp
000163c0 g       *ABS*	00000000 __alt_stack_base
000121a0 g     F .text	00000154 __swsetup_r
000105cc g     F .text	00000118 __sfp
00015224 g     O .rwdata	00000408 __malloc_av_
00010718 g     F .text	00000004 __sinit_lock_release
00012004 g     F .text	00000054 __sread
000147e0 g     F .text	00000108 alt_find_file
00013dbc g     F .text	000000a4 alt_dev_llist_insert
00013584 g     F .text	00000024 __malloc_lock
00013768 g     F .text	000000b0 sbrk
00012668 g     F .text	0000005c _fflush_r
00016270 g       *ABS*	00000000 __bss_start
00011924 g     F .text	00000128 memset
0001020c g     F .text	00000034 main
00016288 g     O .bss	00000004 alt_envp
00016270 g     O .bss	00000004 __malloc_max_total_mem
00013a64 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00012138 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00012438 g     F .text	00000014 fclose
00010d90 g     F .text	0000080c _malloc_r
00015824 g     O .rwdata	00000004 alt_errno
00010c08 g     F .text	000000c4 _fwalk
00012e54 g     F .text	00000084 .hidden __divsi3
000126f4 g     F .text	00000124 _malloc_trim_r
00014db0 g       *ABS*	00000000 __CTOR_END__
00014db0 g       *ABS*	00000000 __flash_rodata_start
00014db0 g       *ABS*	00000000 __DTOR_LIST__
00013980 g     F .text	00000038 alt_irq_init
00013704 g     F .text	00000064 alt_release_fd
00014a1c g     F .text	00000014 atexit
00012140 g     F .text	00000060 _write_r
00015804 g     O .rwdata	00000004 _impure_ptr
00016280 g     O .bss	00000004 alt_argc
0001244c g     F .text	0000021c __sflush_r
00013ec0 g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00010734 g     F .text	00000018 __fp_unlock_all
00015810 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00013f54 g     F .text	00000050 alt_ic_isr_register
00015838 g       *ABS*	00000000 _edata
000163c0 g       *ABS*	00000000 _end
000101c0 g       *ABS*	00000000 __ram_exceptions_end
0001402c g     F .text	0000008c alt_ic_irq_disable
00012060 g     F .text	0000007c __swrite
0001580c g     O .rwdata	00000004 __malloc_trim_threshold
0001472c g     F .text	00000024 altera_nios2_qsys_irq_init
00014a30 g     F .text	00000038 exit
00010ccc g     F .text	000000c4 _fwalk_reent
00012ed8 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010710 g     F .text	00000004 __sfp_lock_release
00014d7c g     F .text	00000034 _exit
00012b88 g     F .text	000001bc __smakebuf_r
00010314 g     F .text	00000098 strlen
00014434 g     F .text	00000154 open
00013f20 g     F .text	00000034 alt_icache_flush_all
0001582c g     O .rwdata	00000004 alt_priority_mask
00013fa4 g     F .text	00000088 alt_ic_irq_enable
00015830 g     O .rwdata	00000008 alt_alarm_list
00013e60 g     F .text	00000060 _do_ctors
00013044 g     F .text	000000d0 close
00013374 g     F .text	00000084 alt_load
00010714 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__alt_data_end+0xffff0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08407014 	ori	at,at,448
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__reset-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100ec0 	call	100ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000306 	br	10098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   1008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)

00010094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   10094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   10098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   1009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100e8:	ef80083a 	eret

000100ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100ec:	defff904 	addi	sp,sp,-28
   100f0:	dfc00615 	stw	ra,24(sp)
   100f4:	df000515 	stw	fp,20(sp)
   100f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   100fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10100:	0005313a 	rdctl	r2,ipending
   10104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10114:	00800044 	movi	r2,1
   10118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	1884703a 	and	r2,r3,r2
   10128:	10001426 	beq	r2,zero,1017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1012c:	00800074 	movhi	r2,1
   10130:	1098b004 	addi	r2,r2,25280
   10134:	e0fffd17 	ldw	r3,-12(fp)
   10138:	180690fa 	slli	r3,r3,3
   1013c:	10c5883a 	add	r2,r2,r3
   10140:	10c00017 	ldw	r3,0(r2)
   10144:	00800074 	movhi	r2,1
   10148:	1098b004 	addi	r2,r2,25280
   1014c:	e13ffd17 	ldw	r4,-12(fp)
   10150:	200890fa 	slli	r4,r4,3
   10154:	1105883a 	add	r2,r2,r4
   10158:	10800104 	addi	r2,r2,4
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	1009883a 	mov	r4,r2
   10164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1016c:	0005313a 	rdctl	r2,ipending
   10170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10174:	e0bfff17 	ldw	r2,-4(fp)
   10178:	00000706 	br	10198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1017c:	e0bffc17 	ldw	r2,-16(fp)
   10180:	1085883a 	add	r2,r2,r2
   10184:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10188:	e0bffd17 	ldw	r2,-12(fp)
   1018c:	10800044 	addi	r2,r2,1
   10190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   10194:	003fe106 	br	1011c <__alt_data_end+0xffff011c>

    active = alt_irq_pending ();
   10198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   1019c:	e0bffb17 	ldw	r2,-20(fp)
   101a0:	103fdb1e 	bne	r2,zero,10110 <__alt_data_end+0xffff0110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101a4:	0001883a 	nop
}
   101a8:	0001883a 	nop
   101ac:	e037883a 	mov	sp,fp
   101b0:	dfc00117 	ldw	ra,4(sp)
   101b4:	df000017 	ldw	fp,0(sp)
   101b8:	dec00204 	addi	sp,sp,8
   101bc:	f800283a 	ret

Disassembly of section .text:

000101c0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   101c0:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   101c4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   101c8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   101cc:	00bffd16 	blt	zero,r2,101c4 <__alt_data_end+0xffff01c4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101d0:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   101d4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   101d8:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   101dc:	d6b60014 	ori	gp,gp,55296
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101e0:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101e4:	10989c14 	ori	r2,r2,25200

    movhi r3, %hi(__bss_end)
   101e8:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101ec:	18d8f014 	ori	r3,r3,25536

    beq r2, r3, 1f
   101f0:	10c00326 	beq	r2,r3,10200 <_start+0x40>

0:
    stw zero, (r2)
   101f4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101f8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101fc:	10fffd36 	bltu	r2,r3,101f4 <__alt_data_end+0xffff01f4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10200:	00133740 	call	13374 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10204:	00135080 	call	13508 <alt_main>

00010208 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10208:	003fff06 	br	10208 <__alt_data_end+0xffff0208>

0001020c <main>:
 */

#include <stdio.h>

int main()
{
   1020c:	defffe04 	addi	sp,sp,-8
   10210:	dfc00115 	stw	ra,4(sp)
   10214:	df000015 	stw	fp,0(sp)
   10218:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   1021c:	01000074 	movhi	r4,1
   10220:	21136c04 	addi	r4,r4,19888
   10224:	00103000 	call	10300 <puts>

  return 0;
   10228:	0005883a 	mov	r2,zero
}
   1022c:	e037883a 	mov	sp,fp
   10230:	dfc00117 	ldw	ra,4(sp)
   10234:	df000017 	ldw	fp,0(sp)
   10238:	dec00204 	addi	sp,sp,8
   1023c:	f800283a 	ret

00010240 <_puts_r>:
   10240:	defff604 	addi	sp,sp,-40
   10244:	dc000715 	stw	r16,28(sp)
   10248:	2021883a 	mov	r16,r4
   1024c:	2809883a 	mov	r4,r5
   10250:	dc400815 	stw	r17,32(sp)
   10254:	dfc00915 	stw	ra,36(sp)
   10258:	2823883a 	mov	r17,r5
   1025c:	00103140 	call	10314 <strlen>
   10260:	10c00044 	addi	r3,r2,1
   10264:	d8800115 	stw	r2,4(sp)
   10268:	00800074 	movhi	r2,1
   1026c:	10937104 	addi	r2,r2,19908
   10270:	d8800215 	stw	r2,8(sp)
   10274:	00800044 	movi	r2,1
   10278:	d8800315 	stw	r2,12(sp)
   1027c:	00800084 	movi	r2,2
   10280:	dc400015 	stw	r17,0(sp)
   10284:	d8c00615 	stw	r3,24(sp)
   10288:	dec00415 	stw	sp,16(sp)
   1028c:	d8800515 	stw	r2,20(sp)
   10290:	80000226 	beq	r16,zero,1029c <_puts_r+0x5c>
   10294:	80800e17 	ldw	r2,56(r16)
   10298:	10001426 	beq	r2,zero,102ec <_puts_r+0xac>
   1029c:	81400217 	ldw	r5,8(r16)
   102a0:	2880030b 	ldhu	r2,12(r5)
   102a4:	10c8000c 	andi	r3,r2,8192
   102a8:	1800061e 	bne	r3,zero,102c4 <_puts_r+0x84>
   102ac:	29001917 	ldw	r4,100(r5)
   102b0:	00f7ffc4 	movi	r3,-8193
   102b4:	10880014 	ori	r2,r2,8192
   102b8:	20c6703a 	and	r3,r4,r3
   102bc:	2880030d 	sth	r2,12(r5)
   102c0:	28c01915 	stw	r3,100(r5)
   102c4:	d9800404 	addi	r6,sp,16
   102c8:	8009883a 	mov	r4,r16
   102cc:	001074c0 	call	1074c <__sfvwrite_r>
   102d0:	1000091e 	bne	r2,zero,102f8 <_puts_r+0xb8>
   102d4:	00800284 	movi	r2,10
   102d8:	dfc00917 	ldw	ra,36(sp)
   102dc:	dc400817 	ldw	r17,32(sp)
   102e0:	dc000717 	ldw	r16,28(sp)
   102e4:	dec00a04 	addi	sp,sp,40
   102e8:	f800283a 	ret
   102ec:	8009883a 	mov	r4,r16
   102f0:	00106fc0 	call	106fc <__sinit>
   102f4:	003fe906 	br	1029c <__alt_data_end+0xffff029c>
   102f8:	00bfffc4 	movi	r2,-1
   102fc:	003ff606 	br	102d8 <__alt_data_end+0xffff02d8>

00010300 <puts>:
   10300:	00800074 	movhi	r2,1
   10304:	10960104 	addi	r2,r2,22532
   10308:	200b883a 	mov	r5,r4
   1030c:	11000017 	ldw	r4,0(r2)
   10310:	00102401 	jmpi	10240 <_puts_r>

00010314 <strlen>:
   10314:	208000cc 	andi	r2,r4,3
   10318:	10002026 	beq	r2,zero,1039c <strlen+0x88>
   1031c:	20800007 	ldb	r2,0(r4)
   10320:	10002026 	beq	r2,zero,103a4 <strlen+0x90>
   10324:	2005883a 	mov	r2,r4
   10328:	00000206 	br	10334 <strlen+0x20>
   1032c:	10c00007 	ldb	r3,0(r2)
   10330:	18001826 	beq	r3,zero,10394 <strlen+0x80>
   10334:	10800044 	addi	r2,r2,1
   10338:	10c000cc 	andi	r3,r2,3
   1033c:	183ffb1e 	bne	r3,zero,1032c <__alt_data_end+0xffff032c>
   10340:	10c00017 	ldw	r3,0(r2)
   10344:	01ffbff4 	movhi	r7,65279
   10348:	39ffbfc4 	addi	r7,r7,-257
   1034c:	00ca303a 	nor	r5,zero,r3
   10350:	01a02074 	movhi	r6,32897
   10354:	19c7883a 	add	r3,r3,r7
   10358:	31a02004 	addi	r6,r6,-32640
   1035c:	1946703a 	and	r3,r3,r5
   10360:	1986703a 	and	r3,r3,r6
   10364:	1800091e 	bne	r3,zero,1038c <strlen+0x78>
   10368:	10800104 	addi	r2,r2,4
   1036c:	10c00017 	ldw	r3,0(r2)
   10370:	19cb883a 	add	r5,r3,r7
   10374:	00c6303a 	nor	r3,zero,r3
   10378:	28c6703a 	and	r3,r5,r3
   1037c:	1986703a 	and	r3,r3,r6
   10380:	183ff926 	beq	r3,zero,10368 <__alt_data_end+0xffff0368>
   10384:	00000106 	br	1038c <strlen+0x78>
   10388:	10800044 	addi	r2,r2,1
   1038c:	10c00007 	ldb	r3,0(r2)
   10390:	183ffd1e 	bne	r3,zero,10388 <__alt_data_end+0xffff0388>
   10394:	1105c83a 	sub	r2,r2,r4
   10398:	f800283a 	ret
   1039c:	2005883a 	mov	r2,r4
   103a0:	003fe706 	br	10340 <__alt_data_end+0xffff0340>
   103a4:	0005883a 	mov	r2,zero
   103a8:	f800283a 	ret

000103ac <__fp_unlock>:
   103ac:	0005883a 	mov	r2,zero
   103b0:	f800283a 	ret

000103b4 <_cleanup_r>:
   103b4:	01400074 	movhi	r5,1
   103b8:	2948d204 	addi	r5,r5,9032
   103bc:	0010ccc1 	jmpi	10ccc <_fwalk_reent>

000103c0 <__sinit.part.1>:
   103c0:	defff704 	addi	sp,sp,-36
   103c4:	00c00074 	movhi	r3,1
   103c8:	dfc00815 	stw	ra,32(sp)
   103cc:	ddc00715 	stw	r23,28(sp)
   103d0:	dd800615 	stw	r22,24(sp)
   103d4:	dd400515 	stw	r21,20(sp)
   103d8:	dd000415 	stw	r20,16(sp)
   103dc:	dcc00315 	stw	r19,12(sp)
   103e0:	dc800215 	stw	r18,8(sp)
   103e4:	dc400115 	stw	r17,4(sp)
   103e8:	dc000015 	stw	r16,0(sp)
   103ec:	18c0ed04 	addi	r3,r3,948
   103f0:	24000117 	ldw	r16,4(r4)
   103f4:	20c00f15 	stw	r3,60(r4)
   103f8:	2080bb04 	addi	r2,r4,748
   103fc:	00c000c4 	movi	r3,3
   10400:	20c0b915 	stw	r3,740(r4)
   10404:	2080ba15 	stw	r2,744(r4)
   10408:	2000b815 	stw	zero,736(r4)
   1040c:	05c00204 	movi	r23,8
   10410:	00800104 	movi	r2,4
   10414:	2025883a 	mov	r18,r4
   10418:	b80d883a 	mov	r6,r23
   1041c:	81001704 	addi	r4,r16,92
   10420:	000b883a 	mov	r5,zero
   10424:	80000015 	stw	zero,0(r16)
   10428:	80000115 	stw	zero,4(r16)
   1042c:	80000215 	stw	zero,8(r16)
   10430:	8080030d 	sth	r2,12(r16)
   10434:	80001915 	stw	zero,100(r16)
   10438:	8000038d 	sth	zero,14(r16)
   1043c:	80000415 	stw	zero,16(r16)
   10440:	80000515 	stw	zero,20(r16)
   10444:	80000615 	stw	zero,24(r16)
   10448:	00119240 	call	11924 <memset>
   1044c:	05800074 	movhi	r22,1
   10450:	94400217 	ldw	r17,8(r18)
   10454:	05400074 	movhi	r21,1
   10458:	05000074 	movhi	r20,1
   1045c:	04c00074 	movhi	r19,1
   10460:	b5880104 	addi	r22,r22,8196
   10464:	ad481804 	addi	r21,r21,8288
   10468:	a5083704 	addi	r20,r20,8412
   1046c:	9cc84e04 	addi	r19,r19,8504
   10470:	85800815 	stw	r22,32(r16)
   10474:	85400915 	stw	r21,36(r16)
   10478:	85000a15 	stw	r20,40(r16)
   1047c:	84c00b15 	stw	r19,44(r16)
   10480:	84000715 	stw	r16,28(r16)
   10484:	00800284 	movi	r2,10
   10488:	8880030d 	sth	r2,12(r17)
   1048c:	00800044 	movi	r2,1
   10490:	b80d883a 	mov	r6,r23
   10494:	89001704 	addi	r4,r17,92
   10498:	000b883a 	mov	r5,zero
   1049c:	88000015 	stw	zero,0(r17)
   104a0:	88000115 	stw	zero,4(r17)
   104a4:	88000215 	stw	zero,8(r17)
   104a8:	88001915 	stw	zero,100(r17)
   104ac:	8880038d 	sth	r2,14(r17)
   104b0:	88000415 	stw	zero,16(r17)
   104b4:	88000515 	stw	zero,20(r17)
   104b8:	88000615 	stw	zero,24(r17)
   104bc:	00119240 	call	11924 <memset>
   104c0:	94000317 	ldw	r16,12(r18)
   104c4:	00800484 	movi	r2,18
   104c8:	8c400715 	stw	r17,28(r17)
   104cc:	8d800815 	stw	r22,32(r17)
   104d0:	8d400915 	stw	r21,36(r17)
   104d4:	8d000a15 	stw	r20,40(r17)
   104d8:	8cc00b15 	stw	r19,44(r17)
   104dc:	8080030d 	sth	r2,12(r16)
   104e0:	00800084 	movi	r2,2
   104e4:	80000015 	stw	zero,0(r16)
   104e8:	80000115 	stw	zero,4(r16)
   104ec:	80000215 	stw	zero,8(r16)
   104f0:	80001915 	stw	zero,100(r16)
   104f4:	8080038d 	sth	r2,14(r16)
   104f8:	80000415 	stw	zero,16(r16)
   104fc:	80000515 	stw	zero,20(r16)
   10500:	80000615 	stw	zero,24(r16)
   10504:	b80d883a 	mov	r6,r23
   10508:	000b883a 	mov	r5,zero
   1050c:	81001704 	addi	r4,r16,92
   10510:	00119240 	call	11924 <memset>
   10514:	00800044 	movi	r2,1
   10518:	84000715 	stw	r16,28(r16)
   1051c:	85800815 	stw	r22,32(r16)
   10520:	85400915 	stw	r21,36(r16)
   10524:	85000a15 	stw	r20,40(r16)
   10528:	84c00b15 	stw	r19,44(r16)
   1052c:	90800e15 	stw	r2,56(r18)
   10530:	dfc00817 	ldw	ra,32(sp)
   10534:	ddc00717 	ldw	r23,28(sp)
   10538:	dd800617 	ldw	r22,24(sp)
   1053c:	dd400517 	ldw	r21,20(sp)
   10540:	dd000417 	ldw	r20,16(sp)
   10544:	dcc00317 	ldw	r19,12(sp)
   10548:	dc800217 	ldw	r18,8(sp)
   1054c:	dc400117 	ldw	r17,4(sp)
   10550:	dc000017 	ldw	r16,0(sp)
   10554:	dec00904 	addi	sp,sp,36
   10558:	f800283a 	ret

0001055c <__fp_lock>:
   1055c:	0005883a 	mov	r2,zero
   10560:	f800283a 	ret

00010564 <__sfmoreglue>:
   10564:	defffc04 	addi	sp,sp,-16
   10568:	dc400115 	stw	r17,4(sp)
   1056c:	2c7fffc4 	addi	r17,r5,-1
   10570:	8c401a24 	muli	r17,r17,104
   10574:	dc800215 	stw	r18,8(sp)
   10578:	2825883a 	mov	r18,r5
   1057c:	89401d04 	addi	r5,r17,116
   10580:	dc000015 	stw	r16,0(sp)
   10584:	dfc00315 	stw	ra,12(sp)
   10588:	0010d900 	call	10d90 <_malloc_r>
   1058c:	1021883a 	mov	r16,r2
   10590:	10000726 	beq	r2,zero,105b0 <__sfmoreglue+0x4c>
   10594:	11000304 	addi	r4,r2,12
   10598:	10000015 	stw	zero,0(r2)
   1059c:	14800115 	stw	r18,4(r2)
   105a0:	11000215 	stw	r4,8(r2)
   105a4:	89801a04 	addi	r6,r17,104
   105a8:	000b883a 	mov	r5,zero
   105ac:	00119240 	call	11924 <memset>
   105b0:	8005883a 	mov	r2,r16
   105b4:	dfc00317 	ldw	ra,12(sp)
   105b8:	dc800217 	ldw	r18,8(sp)
   105bc:	dc400117 	ldw	r17,4(sp)
   105c0:	dc000017 	ldw	r16,0(sp)
   105c4:	dec00404 	addi	sp,sp,16
   105c8:	f800283a 	ret

000105cc <__sfp>:
   105cc:	defffb04 	addi	sp,sp,-20
   105d0:	dc000015 	stw	r16,0(sp)
   105d4:	04000074 	movhi	r16,1
   105d8:	84160004 	addi	r16,r16,22528
   105dc:	dcc00315 	stw	r19,12(sp)
   105e0:	2027883a 	mov	r19,r4
   105e4:	81000017 	ldw	r4,0(r16)
   105e8:	dfc00415 	stw	ra,16(sp)
   105ec:	dc800215 	stw	r18,8(sp)
   105f0:	20800e17 	ldw	r2,56(r4)
   105f4:	dc400115 	stw	r17,4(sp)
   105f8:	1000021e 	bne	r2,zero,10604 <__sfp+0x38>
   105fc:	00103c00 	call	103c0 <__sinit.part.1>
   10600:	81000017 	ldw	r4,0(r16)
   10604:	2480b804 	addi	r18,r4,736
   10608:	047fffc4 	movi	r17,-1
   1060c:	91000117 	ldw	r4,4(r18)
   10610:	94000217 	ldw	r16,8(r18)
   10614:	213fffc4 	addi	r4,r4,-1
   10618:	20000a16 	blt	r4,zero,10644 <__sfp+0x78>
   1061c:	8080030f 	ldh	r2,12(r16)
   10620:	10000c26 	beq	r2,zero,10654 <__sfp+0x88>
   10624:	80c01d04 	addi	r3,r16,116
   10628:	00000206 	br	10634 <__sfp+0x68>
   1062c:	18bfe60f 	ldh	r2,-104(r3)
   10630:	10000826 	beq	r2,zero,10654 <__sfp+0x88>
   10634:	213fffc4 	addi	r4,r4,-1
   10638:	1c3ffd04 	addi	r16,r3,-12
   1063c:	18c01a04 	addi	r3,r3,104
   10640:	247ffa1e 	bne	r4,r17,1062c <__alt_data_end+0xffff062c>
   10644:	90800017 	ldw	r2,0(r18)
   10648:	10001d26 	beq	r2,zero,106c0 <__sfp+0xf4>
   1064c:	1025883a 	mov	r18,r2
   10650:	003fee06 	br	1060c <__alt_data_end+0xffff060c>
   10654:	00bfffc4 	movi	r2,-1
   10658:	8080038d 	sth	r2,14(r16)
   1065c:	00800044 	movi	r2,1
   10660:	8080030d 	sth	r2,12(r16)
   10664:	80001915 	stw	zero,100(r16)
   10668:	80000015 	stw	zero,0(r16)
   1066c:	80000215 	stw	zero,8(r16)
   10670:	80000115 	stw	zero,4(r16)
   10674:	80000415 	stw	zero,16(r16)
   10678:	80000515 	stw	zero,20(r16)
   1067c:	80000615 	stw	zero,24(r16)
   10680:	01800204 	movi	r6,8
   10684:	000b883a 	mov	r5,zero
   10688:	81001704 	addi	r4,r16,92
   1068c:	00119240 	call	11924 <memset>
   10690:	8005883a 	mov	r2,r16
   10694:	80000c15 	stw	zero,48(r16)
   10698:	80000d15 	stw	zero,52(r16)
   1069c:	80001115 	stw	zero,68(r16)
   106a0:	80001215 	stw	zero,72(r16)
   106a4:	dfc00417 	ldw	ra,16(sp)
   106a8:	dcc00317 	ldw	r19,12(sp)
   106ac:	dc800217 	ldw	r18,8(sp)
   106b0:	dc400117 	ldw	r17,4(sp)
   106b4:	dc000017 	ldw	r16,0(sp)
   106b8:	dec00504 	addi	sp,sp,20
   106bc:	f800283a 	ret
   106c0:	01400104 	movi	r5,4
   106c4:	9809883a 	mov	r4,r19
   106c8:	00105640 	call	10564 <__sfmoreglue>
   106cc:	90800015 	stw	r2,0(r18)
   106d0:	103fde1e 	bne	r2,zero,1064c <__alt_data_end+0xffff064c>
   106d4:	00800304 	movi	r2,12
   106d8:	98800015 	stw	r2,0(r19)
   106dc:	0005883a 	mov	r2,zero
   106e0:	003ff006 	br	106a4 <__alt_data_end+0xffff06a4>

000106e4 <_cleanup>:
   106e4:	00800074 	movhi	r2,1
   106e8:	10960004 	addi	r2,r2,22528
   106ec:	11000017 	ldw	r4,0(r2)
   106f0:	01400074 	movhi	r5,1
   106f4:	2948d204 	addi	r5,r5,9032
   106f8:	0010ccc1 	jmpi	10ccc <_fwalk_reent>

000106fc <__sinit>:
   106fc:	20800e17 	ldw	r2,56(r4)
   10700:	10000126 	beq	r2,zero,10708 <__sinit+0xc>
   10704:	f800283a 	ret
   10708:	00103c01 	jmpi	103c0 <__sinit.part.1>

0001070c <__sfp_lock_acquire>:
   1070c:	f800283a 	ret

00010710 <__sfp_lock_release>:
   10710:	f800283a 	ret

00010714 <__sinit_lock_acquire>:
   10714:	f800283a 	ret

00010718 <__sinit_lock_release>:
   10718:	f800283a 	ret

0001071c <__fp_lock_all>:
   1071c:	00800074 	movhi	r2,1
   10720:	10960104 	addi	r2,r2,22532
   10724:	11000017 	ldw	r4,0(r2)
   10728:	01400074 	movhi	r5,1
   1072c:	29415704 	addi	r5,r5,1372
   10730:	0010c081 	jmpi	10c08 <_fwalk>

00010734 <__fp_unlock_all>:
   10734:	00800074 	movhi	r2,1
   10738:	10960104 	addi	r2,r2,22532
   1073c:	11000017 	ldw	r4,0(r2)
   10740:	01400074 	movhi	r5,1
   10744:	2940eb04 	addi	r5,r5,940
   10748:	0010c081 	jmpi	10c08 <_fwalk>

0001074c <__sfvwrite_r>:
   1074c:	30800217 	ldw	r2,8(r6)
   10750:	10006726 	beq	r2,zero,108f0 <__sfvwrite_r+0x1a4>
   10754:	28c0030b 	ldhu	r3,12(r5)
   10758:	defff404 	addi	sp,sp,-48
   1075c:	dd400715 	stw	r21,28(sp)
   10760:	dd000615 	stw	r20,24(sp)
   10764:	dc000215 	stw	r16,8(sp)
   10768:	dfc00b15 	stw	ra,44(sp)
   1076c:	df000a15 	stw	fp,40(sp)
   10770:	ddc00915 	stw	r23,36(sp)
   10774:	dd800815 	stw	r22,32(sp)
   10778:	dcc00515 	stw	r19,20(sp)
   1077c:	dc800415 	stw	r18,16(sp)
   10780:	dc400315 	stw	r17,12(sp)
   10784:	1880020c 	andi	r2,r3,8
   10788:	2821883a 	mov	r16,r5
   1078c:	202b883a 	mov	r21,r4
   10790:	3029883a 	mov	r20,r6
   10794:	10002726 	beq	r2,zero,10834 <__sfvwrite_r+0xe8>
   10798:	28800417 	ldw	r2,16(r5)
   1079c:	10002526 	beq	r2,zero,10834 <__sfvwrite_r+0xe8>
   107a0:	1880008c 	andi	r2,r3,2
   107a4:	a4400017 	ldw	r17,0(r20)
   107a8:	10002a26 	beq	r2,zero,10854 <__sfvwrite_r+0x108>
   107ac:	05a00034 	movhi	r22,32768
   107b0:	0027883a 	mov	r19,zero
   107b4:	0025883a 	mov	r18,zero
   107b8:	b5bf0004 	addi	r22,r22,-1024
   107bc:	980d883a 	mov	r6,r19
   107c0:	a809883a 	mov	r4,r21
   107c4:	90004626 	beq	r18,zero,108e0 <__sfvwrite_r+0x194>
   107c8:	900f883a 	mov	r7,r18
   107cc:	b480022e 	bgeu	r22,r18,107d8 <__sfvwrite_r+0x8c>
   107d0:	01e00034 	movhi	r7,32768
   107d4:	39ff0004 	addi	r7,r7,-1024
   107d8:	80800917 	ldw	r2,36(r16)
   107dc:	81400717 	ldw	r5,28(r16)
   107e0:	103ee83a 	callr	r2
   107e4:	0080570e 	bge	zero,r2,10944 <__sfvwrite_r+0x1f8>
   107e8:	a0c00217 	ldw	r3,8(r20)
   107ec:	98a7883a 	add	r19,r19,r2
   107f0:	90a5c83a 	sub	r18,r18,r2
   107f4:	1885c83a 	sub	r2,r3,r2
   107f8:	a0800215 	stw	r2,8(r20)
   107fc:	103fef1e 	bne	r2,zero,107bc <__alt_data_end+0xffff07bc>
   10800:	0005883a 	mov	r2,zero
   10804:	dfc00b17 	ldw	ra,44(sp)
   10808:	df000a17 	ldw	fp,40(sp)
   1080c:	ddc00917 	ldw	r23,36(sp)
   10810:	dd800817 	ldw	r22,32(sp)
   10814:	dd400717 	ldw	r21,28(sp)
   10818:	dd000617 	ldw	r20,24(sp)
   1081c:	dcc00517 	ldw	r19,20(sp)
   10820:	dc800417 	ldw	r18,16(sp)
   10824:	dc400317 	ldw	r17,12(sp)
   10828:	dc000217 	ldw	r16,8(sp)
   1082c:	dec00c04 	addi	sp,sp,48
   10830:	f800283a 	ret
   10834:	800b883a 	mov	r5,r16
   10838:	a809883a 	mov	r4,r21
   1083c:	00121a00 	call	121a0 <__swsetup_r>
   10840:	1000eb1e 	bne	r2,zero,10bf0 <__sfvwrite_r+0x4a4>
   10844:	80c0030b 	ldhu	r3,12(r16)
   10848:	a4400017 	ldw	r17,0(r20)
   1084c:	1880008c 	andi	r2,r3,2
   10850:	103fd61e 	bne	r2,zero,107ac <__alt_data_end+0xffff07ac>
   10854:	1880004c 	andi	r2,r3,1
   10858:	10003f1e 	bne	r2,zero,10958 <__sfvwrite_r+0x20c>
   1085c:	0039883a 	mov	fp,zero
   10860:	0025883a 	mov	r18,zero
   10864:	90001a26 	beq	r18,zero,108d0 <__sfvwrite_r+0x184>
   10868:	1880800c 	andi	r2,r3,512
   1086c:	84c00217 	ldw	r19,8(r16)
   10870:	10002126 	beq	r2,zero,108f8 <__sfvwrite_r+0x1ac>
   10874:	982f883a 	mov	r23,r19
   10878:	94c09336 	bltu	r18,r19,10ac8 <__sfvwrite_r+0x37c>
   1087c:	1881200c 	andi	r2,r3,1152
   10880:	10009e1e 	bne	r2,zero,10afc <__sfvwrite_r+0x3b0>
   10884:	81000017 	ldw	r4,0(r16)
   10888:	b80d883a 	mov	r6,r23
   1088c:	e00b883a 	mov	r5,fp
   10890:	00117c80 	call	117c8 <memmove>
   10894:	80c00217 	ldw	r3,8(r16)
   10898:	81000017 	ldw	r4,0(r16)
   1089c:	9005883a 	mov	r2,r18
   108a0:	1ce7c83a 	sub	r19,r3,r19
   108a4:	25cf883a 	add	r7,r4,r23
   108a8:	84c00215 	stw	r19,8(r16)
   108ac:	81c00015 	stw	r7,0(r16)
   108b0:	a0c00217 	ldw	r3,8(r20)
   108b4:	e0b9883a 	add	fp,fp,r2
   108b8:	90a5c83a 	sub	r18,r18,r2
   108bc:	18a7c83a 	sub	r19,r3,r2
   108c0:	a4c00215 	stw	r19,8(r20)
   108c4:	983fce26 	beq	r19,zero,10800 <__alt_data_end+0xffff0800>
   108c8:	80c0030b 	ldhu	r3,12(r16)
   108cc:	903fe61e 	bne	r18,zero,10868 <__alt_data_end+0xffff0868>
   108d0:	8f000017 	ldw	fp,0(r17)
   108d4:	8c800117 	ldw	r18,4(r17)
   108d8:	8c400204 	addi	r17,r17,8
   108dc:	003fe106 	br	10864 <__alt_data_end+0xffff0864>
   108e0:	8cc00017 	ldw	r19,0(r17)
   108e4:	8c800117 	ldw	r18,4(r17)
   108e8:	8c400204 	addi	r17,r17,8
   108ec:	003fb306 	br	107bc <__alt_data_end+0xffff07bc>
   108f0:	0005883a 	mov	r2,zero
   108f4:	f800283a 	ret
   108f8:	81000017 	ldw	r4,0(r16)
   108fc:	80800417 	ldw	r2,16(r16)
   10900:	11005736 	bltu	r2,r4,10a60 <__sfvwrite_r+0x314>
   10904:	85c00517 	ldw	r23,20(r16)
   10908:	95c05536 	bltu	r18,r23,10a60 <__sfvwrite_r+0x314>
   1090c:	00a00034 	movhi	r2,32768
   10910:	10bfffc4 	addi	r2,r2,-1
   10914:	9009883a 	mov	r4,r18
   10918:	1480012e 	bgeu	r2,r18,10920 <__sfvwrite_r+0x1d4>
   1091c:	1009883a 	mov	r4,r2
   10920:	b80b883a 	mov	r5,r23
   10924:	0012e540 	call	12e54 <__divsi3>
   10928:	15cf383a 	mul	r7,r2,r23
   1092c:	81400717 	ldw	r5,28(r16)
   10930:	80800917 	ldw	r2,36(r16)
   10934:	e00d883a 	mov	r6,fp
   10938:	a809883a 	mov	r4,r21
   1093c:	103ee83a 	callr	r2
   10940:	00bfdb16 	blt	zero,r2,108b0 <__alt_data_end+0xffff08b0>
   10944:	8080030b 	ldhu	r2,12(r16)
   10948:	10801014 	ori	r2,r2,64
   1094c:	8080030d 	sth	r2,12(r16)
   10950:	00bfffc4 	movi	r2,-1
   10954:	003fab06 	br	10804 <__alt_data_end+0xffff0804>
   10958:	0027883a 	mov	r19,zero
   1095c:	0011883a 	mov	r8,zero
   10960:	0039883a 	mov	fp,zero
   10964:	0025883a 	mov	r18,zero
   10968:	90001f26 	beq	r18,zero,109e8 <__sfvwrite_r+0x29c>
   1096c:	40005a26 	beq	r8,zero,10ad8 <__sfvwrite_r+0x38c>
   10970:	982d883a 	mov	r22,r19
   10974:	94c0012e 	bgeu	r18,r19,1097c <__sfvwrite_r+0x230>
   10978:	902d883a 	mov	r22,r18
   1097c:	81000017 	ldw	r4,0(r16)
   10980:	80800417 	ldw	r2,16(r16)
   10984:	b02f883a 	mov	r23,r22
   10988:	81c00517 	ldw	r7,20(r16)
   1098c:	1100032e 	bgeu	r2,r4,1099c <__sfvwrite_r+0x250>
   10990:	80c00217 	ldw	r3,8(r16)
   10994:	38c7883a 	add	r3,r7,r3
   10998:	1d801816 	blt	r3,r22,109fc <__sfvwrite_r+0x2b0>
   1099c:	b1c03e16 	blt	r22,r7,10a98 <__sfvwrite_r+0x34c>
   109a0:	80800917 	ldw	r2,36(r16)
   109a4:	81400717 	ldw	r5,28(r16)
   109a8:	e00d883a 	mov	r6,fp
   109ac:	da000115 	stw	r8,4(sp)
   109b0:	a809883a 	mov	r4,r21
   109b4:	103ee83a 	callr	r2
   109b8:	102f883a 	mov	r23,r2
   109bc:	da000117 	ldw	r8,4(sp)
   109c0:	00bfe00e 	bge	zero,r2,10944 <__alt_data_end+0xffff0944>
   109c4:	9de7c83a 	sub	r19,r19,r23
   109c8:	98001f26 	beq	r19,zero,10a48 <__sfvwrite_r+0x2fc>
   109cc:	a0800217 	ldw	r2,8(r20)
   109d0:	e5f9883a 	add	fp,fp,r23
   109d4:	95e5c83a 	sub	r18,r18,r23
   109d8:	15efc83a 	sub	r23,r2,r23
   109dc:	a5c00215 	stw	r23,8(r20)
   109e0:	b83f8726 	beq	r23,zero,10800 <__alt_data_end+0xffff0800>
   109e4:	903fe11e 	bne	r18,zero,1096c <__alt_data_end+0xffff096c>
   109e8:	8f000017 	ldw	fp,0(r17)
   109ec:	8c800117 	ldw	r18,4(r17)
   109f0:	0011883a 	mov	r8,zero
   109f4:	8c400204 	addi	r17,r17,8
   109f8:	003fdb06 	br	10968 <__alt_data_end+0xffff0968>
   109fc:	180d883a 	mov	r6,r3
   10a00:	e00b883a 	mov	r5,fp
   10a04:	da000115 	stw	r8,4(sp)
   10a08:	d8c00015 	stw	r3,0(sp)
   10a0c:	00117c80 	call	117c8 <memmove>
   10a10:	d8c00017 	ldw	r3,0(sp)
   10a14:	80800017 	ldw	r2,0(r16)
   10a18:	800b883a 	mov	r5,r16
   10a1c:	a809883a 	mov	r4,r21
   10a20:	10c5883a 	add	r2,r2,r3
   10a24:	80800015 	stw	r2,0(r16)
   10a28:	d8c00015 	stw	r3,0(sp)
   10a2c:	00126680 	call	12668 <_fflush_r>
   10a30:	d8c00017 	ldw	r3,0(sp)
   10a34:	da000117 	ldw	r8,4(sp)
   10a38:	103fc21e 	bne	r2,zero,10944 <__alt_data_end+0xffff0944>
   10a3c:	182f883a 	mov	r23,r3
   10a40:	9de7c83a 	sub	r19,r19,r23
   10a44:	983fe11e 	bne	r19,zero,109cc <__alt_data_end+0xffff09cc>
   10a48:	800b883a 	mov	r5,r16
   10a4c:	a809883a 	mov	r4,r21
   10a50:	00126680 	call	12668 <_fflush_r>
   10a54:	103fbb1e 	bne	r2,zero,10944 <__alt_data_end+0xffff0944>
   10a58:	0011883a 	mov	r8,zero
   10a5c:	003fdb06 	br	109cc <__alt_data_end+0xffff09cc>
   10a60:	94c0012e 	bgeu	r18,r19,10a68 <__sfvwrite_r+0x31c>
   10a64:	9027883a 	mov	r19,r18
   10a68:	980d883a 	mov	r6,r19
   10a6c:	e00b883a 	mov	r5,fp
   10a70:	00117c80 	call	117c8 <memmove>
   10a74:	80800217 	ldw	r2,8(r16)
   10a78:	80c00017 	ldw	r3,0(r16)
   10a7c:	14c5c83a 	sub	r2,r2,r19
   10a80:	1cc7883a 	add	r3,r3,r19
   10a84:	80800215 	stw	r2,8(r16)
   10a88:	80c00015 	stw	r3,0(r16)
   10a8c:	10004326 	beq	r2,zero,10b9c <__sfvwrite_r+0x450>
   10a90:	9805883a 	mov	r2,r19
   10a94:	003f8606 	br	108b0 <__alt_data_end+0xffff08b0>
   10a98:	b00d883a 	mov	r6,r22
   10a9c:	e00b883a 	mov	r5,fp
   10aa0:	da000115 	stw	r8,4(sp)
   10aa4:	00117c80 	call	117c8 <memmove>
   10aa8:	80800217 	ldw	r2,8(r16)
   10aac:	80c00017 	ldw	r3,0(r16)
   10ab0:	da000117 	ldw	r8,4(sp)
   10ab4:	1585c83a 	sub	r2,r2,r22
   10ab8:	1dad883a 	add	r22,r3,r22
   10abc:	80800215 	stw	r2,8(r16)
   10ac0:	85800015 	stw	r22,0(r16)
   10ac4:	003fbf06 	br	109c4 <__alt_data_end+0xffff09c4>
   10ac8:	81000017 	ldw	r4,0(r16)
   10acc:	9027883a 	mov	r19,r18
   10ad0:	902f883a 	mov	r23,r18
   10ad4:	003f6c06 	br	10888 <__alt_data_end+0xffff0888>
   10ad8:	900d883a 	mov	r6,r18
   10adc:	01400284 	movi	r5,10
   10ae0:	e009883a 	mov	r4,fp
   10ae4:	001159c0 	call	1159c <memchr>
   10ae8:	10003e26 	beq	r2,zero,10be4 <__sfvwrite_r+0x498>
   10aec:	10800044 	addi	r2,r2,1
   10af0:	1727c83a 	sub	r19,r2,fp
   10af4:	02000044 	movi	r8,1
   10af8:	003f9d06 	br	10970 <__alt_data_end+0xffff0970>
   10afc:	80800517 	ldw	r2,20(r16)
   10b00:	81400417 	ldw	r5,16(r16)
   10b04:	81c00017 	ldw	r7,0(r16)
   10b08:	10a7883a 	add	r19,r2,r2
   10b0c:	9885883a 	add	r2,r19,r2
   10b10:	1026d7fa 	srli	r19,r2,31
   10b14:	396dc83a 	sub	r22,r7,r5
   10b18:	b1000044 	addi	r4,r22,1
   10b1c:	9885883a 	add	r2,r19,r2
   10b20:	1027d07a 	srai	r19,r2,1
   10b24:	2485883a 	add	r2,r4,r18
   10b28:	980d883a 	mov	r6,r19
   10b2c:	9880022e 	bgeu	r19,r2,10b38 <__sfvwrite_r+0x3ec>
   10b30:	1027883a 	mov	r19,r2
   10b34:	100d883a 	mov	r6,r2
   10b38:	18c1000c 	andi	r3,r3,1024
   10b3c:	18001c26 	beq	r3,zero,10bb0 <__sfvwrite_r+0x464>
   10b40:	300b883a 	mov	r5,r6
   10b44:	a809883a 	mov	r4,r21
   10b48:	0010d900 	call	10d90 <_malloc_r>
   10b4c:	102f883a 	mov	r23,r2
   10b50:	10002926 	beq	r2,zero,10bf8 <__sfvwrite_r+0x4ac>
   10b54:	81400417 	ldw	r5,16(r16)
   10b58:	b00d883a 	mov	r6,r22
   10b5c:	1009883a 	mov	r4,r2
   10b60:	00116800 	call	11680 <memcpy>
   10b64:	8080030b 	ldhu	r2,12(r16)
   10b68:	00fedfc4 	movi	r3,-1153
   10b6c:	10c4703a 	and	r2,r2,r3
   10b70:	10802014 	ori	r2,r2,128
   10b74:	8080030d 	sth	r2,12(r16)
   10b78:	bd89883a 	add	r4,r23,r22
   10b7c:	9d8fc83a 	sub	r7,r19,r22
   10b80:	85c00415 	stw	r23,16(r16)
   10b84:	84c00515 	stw	r19,20(r16)
   10b88:	81000015 	stw	r4,0(r16)
   10b8c:	9027883a 	mov	r19,r18
   10b90:	81c00215 	stw	r7,8(r16)
   10b94:	902f883a 	mov	r23,r18
   10b98:	003f3b06 	br	10888 <__alt_data_end+0xffff0888>
   10b9c:	800b883a 	mov	r5,r16
   10ba0:	a809883a 	mov	r4,r21
   10ba4:	00126680 	call	12668 <_fflush_r>
   10ba8:	103fb926 	beq	r2,zero,10a90 <__alt_data_end+0xffff0a90>
   10bac:	003f6506 	br	10944 <__alt_data_end+0xffff0944>
   10bb0:	a809883a 	mov	r4,r21
   10bb4:	0011a4c0 	call	11a4c <_realloc_r>
   10bb8:	102f883a 	mov	r23,r2
   10bbc:	103fee1e 	bne	r2,zero,10b78 <__alt_data_end+0xffff0b78>
   10bc0:	81400417 	ldw	r5,16(r16)
   10bc4:	a809883a 	mov	r4,r21
   10bc8:	00128180 	call	12818 <_free_r>
   10bcc:	8080030b 	ldhu	r2,12(r16)
   10bd0:	00ffdfc4 	movi	r3,-129
   10bd4:	1884703a 	and	r2,r3,r2
   10bd8:	00c00304 	movi	r3,12
   10bdc:	a8c00015 	stw	r3,0(r21)
   10be0:	003f5906 	br	10948 <__alt_data_end+0xffff0948>
   10be4:	94c00044 	addi	r19,r18,1
   10be8:	02000044 	movi	r8,1
   10bec:	003f6006 	br	10970 <__alt_data_end+0xffff0970>
   10bf0:	00bfffc4 	movi	r2,-1
   10bf4:	003f0306 	br	10804 <__alt_data_end+0xffff0804>
   10bf8:	00800304 	movi	r2,12
   10bfc:	a8800015 	stw	r2,0(r21)
   10c00:	8080030b 	ldhu	r2,12(r16)
   10c04:	003f5006 	br	10948 <__alt_data_end+0xffff0948>

00010c08 <_fwalk>:
   10c08:	defff704 	addi	sp,sp,-36
   10c0c:	dd000415 	stw	r20,16(sp)
   10c10:	dfc00815 	stw	ra,32(sp)
   10c14:	ddc00715 	stw	r23,28(sp)
   10c18:	dd800615 	stw	r22,24(sp)
   10c1c:	dd400515 	stw	r21,20(sp)
   10c20:	dcc00315 	stw	r19,12(sp)
   10c24:	dc800215 	stw	r18,8(sp)
   10c28:	dc400115 	stw	r17,4(sp)
   10c2c:	dc000015 	stw	r16,0(sp)
   10c30:	2500b804 	addi	r20,r4,736
   10c34:	a0002326 	beq	r20,zero,10cc4 <_fwalk+0xbc>
   10c38:	282b883a 	mov	r21,r5
   10c3c:	002f883a 	mov	r23,zero
   10c40:	05800044 	movi	r22,1
   10c44:	04ffffc4 	movi	r19,-1
   10c48:	a4400117 	ldw	r17,4(r20)
   10c4c:	a4800217 	ldw	r18,8(r20)
   10c50:	8c7fffc4 	addi	r17,r17,-1
   10c54:	88000d16 	blt	r17,zero,10c8c <_fwalk+0x84>
   10c58:	94000304 	addi	r16,r18,12
   10c5c:	94800384 	addi	r18,r18,14
   10c60:	8080000b 	ldhu	r2,0(r16)
   10c64:	8c7fffc4 	addi	r17,r17,-1
   10c68:	813ffd04 	addi	r4,r16,-12
   10c6c:	b080042e 	bgeu	r22,r2,10c80 <_fwalk+0x78>
   10c70:	9080000f 	ldh	r2,0(r18)
   10c74:	14c00226 	beq	r2,r19,10c80 <_fwalk+0x78>
   10c78:	a83ee83a 	callr	r21
   10c7c:	b8aeb03a 	or	r23,r23,r2
   10c80:	84001a04 	addi	r16,r16,104
   10c84:	94801a04 	addi	r18,r18,104
   10c88:	8cfff51e 	bne	r17,r19,10c60 <__alt_data_end+0xffff0c60>
   10c8c:	a5000017 	ldw	r20,0(r20)
   10c90:	a03fed1e 	bne	r20,zero,10c48 <__alt_data_end+0xffff0c48>
   10c94:	b805883a 	mov	r2,r23
   10c98:	dfc00817 	ldw	ra,32(sp)
   10c9c:	ddc00717 	ldw	r23,28(sp)
   10ca0:	dd800617 	ldw	r22,24(sp)
   10ca4:	dd400517 	ldw	r21,20(sp)
   10ca8:	dd000417 	ldw	r20,16(sp)
   10cac:	dcc00317 	ldw	r19,12(sp)
   10cb0:	dc800217 	ldw	r18,8(sp)
   10cb4:	dc400117 	ldw	r17,4(sp)
   10cb8:	dc000017 	ldw	r16,0(sp)
   10cbc:	dec00904 	addi	sp,sp,36
   10cc0:	f800283a 	ret
   10cc4:	002f883a 	mov	r23,zero
   10cc8:	003ff206 	br	10c94 <__alt_data_end+0xffff0c94>

00010ccc <_fwalk_reent>:
   10ccc:	defff704 	addi	sp,sp,-36
   10cd0:	dd000415 	stw	r20,16(sp)
   10cd4:	dfc00815 	stw	ra,32(sp)
   10cd8:	ddc00715 	stw	r23,28(sp)
   10cdc:	dd800615 	stw	r22,24(sp)
   10ce0:	dd400515 	stw	r21,20(sp)
   10ce4:	dcc00315 	stw	r19,12(sp)
   10ce8:	dc800215 	stw	r18,8(sp)
   10cec:	dc400115 	stw	r17,4(sp)
   10cf0:	dc000015 	stw	r16,0(sp)
   10cf4:	2500b804 	addi	r20,r4,736
   10cf8:	a0002326 	beq	r20,zero,10d88 <_fwalk_reent+0xbc>
   10cfc:	282b883a 	mov	r21,r5
   10d00:	2027883a 	mov	r19,r4
   10d04:	002f883a 	mov	r23,zero
   10d08:	05800044 	movi	r22,1
   10d0c:	04bfffc4 	movi	r18,-1
   10d10:	a4400117 	ldw	r17,4(r20)
   10d14:	a4000217 	ldw	r16,8(r20)
   10d18:	8c7fffc4 	addi	r17,r17,-1
   10d1c:	88000c16 	blt	r17,zero,10d50 <_fwalk_reent+0x84>
   10d20:	84000304 	addi	r16,r16,12
   10d24:	8080000b 	ldhu	r2,0(r16)
   10d28:	8c7fffc4 	addi	r17,r17,-1
   10d2c:	817ffd04 	addi	r5,r16,-12
   10d30:	b080052e 	bgeu	r22,r2,10d48 <_fwalk_reent+0x7c>
   10d34:	8080008f 	ldh	r2,2(r16)
   10d38:	9809883a 	mov	r4,r19
   10d3c:	14800226 	beq	r2,r18,10d48 <_fwalk_reent+0x7c>
   10d40:	a83ee83a 	callr	r21
   10d44:	b8aeb03a 	or	r23,r23,r2
   10d48:	84001a04 	addi	r16,r16,104
   10d4c:	8cbff51e 	bne	r17,r18,10d24 <__alt_data_end+0xffff0d24>
   10d50:	a5000017 	ldw	r20,0(r20)
   10d54:	a03fee1e 	bne	r20,zero,10d10 <__alt_data_end+0xffff0d10>
   10d58:	b805883a 	mov	r2,r23
   10d5c:	dfc00817 	ldw	ra,32(sp)
   10d60:	ddc00717 	ldw	r23,28(sp)
   10d64:	dd800617 	ldw	r22,24(sp)
   10d68:	dd400517 	ldw	r21,20(sp)
   10d6c:	dd000417 	ldw	r20,16(sp)
   10d70:	dcc00317 	ldw	r19,12(sp)
   10d74:	dc800217 	ldw	r18,8(sp)
   10d78:	dc400117 	ldw	r17,4(sp)
   10d7c:	dc000017 	ldw	r16,0(sp)
   10d80:	dec00904 	addi	sp,sp,36
   10d84:	f800283a 	ret
   10d88:	002f883a 	mov	r23,zero
   10d8c:	003ff206 	br	10d58 <__alt_data_end+0xffff0d58>

00010d90 <_malloc_r>:
   10d90:	defff504 	addi	sp,sp,-44
   10d94:	dc800315 	stw	r18,12(sp)
   10d98:	dfc00a15 	stw	ra,40(sp)
   10d9c:	df000915 	stw	fp,36(sp)
   10da0:	ddc00815 	stw	r23,32(sp)
   10da4:	dd800715 	stw	r22,28(sp)
   10da8:	dd400615 	stw	r21,24(sp)
   10dac:	dd000515 	stw	r20,20(sp)
   10db0:	dcc00415 	stw	r19,16(sp)
   10db4:	dc400215 	stw	r17,8(sp)
   10db8:	dc000115 	stw	r16,4(sp)
   10dbc:	288002c4 	addi	r2,r5,11
   10dc0:	00c00584 	movi	r3,22
   10dc4:	2025883a 	mov	r18,r4
   10dc8:	18807f2e 	bgeu	r3,r2,10fc8 <_malloc_r+0x238>
   10dcc:	047ffe04 	movi	r17,-8
   10dd0:	1462703a 	and	r17,r2,r17
   10dd4:	8800a316 	blt	r17,zero,11064 <_malloc_r+0x2d4>
   10dd8:	8940a236 	bltu	r17,r5,11064 <_malloc_r+0x2d4>
   10ddc:	00135840 	call	13584 <__malloc_lock>
   10de0:	00807dc4 	movi	r2,503
   10de4:	1441e92e 	bgeu	r2,r17,1158c <_malloc_r+0x7fc>
   10de8:	8804d27a 	srli	r2,r17,9
   10dec:	1000a126 	beq	r2,zero,11074 <_malloc_r+0x2e4>
   10df0:	00c00104 	movi	r3,4
   10df4:	18811e36 	bltu	r3,r2,11270 <_malloc_r+0x4e0>
   10df8:	8804d1ba 	srli	r2,r17,6
   10dfc:	12000e44 	addi	r8,r2,57
   10e00:	11c00e04 	addi	r7,r2,56
   10e04:	4209883a 	add	r4,r8,r8
   10e08:	04c00074 	movhi	r19,1
   10e0c:	2109883a 	add	r4,r4,r4
   10e10:	9cd48904 	addi	r19,r19,21028
   10e14:	2109883a 	add	r4,r4,r4
   10e18:	9909883a 	add	r4,r19,r4
   10e1c:	24000117 	ldw	r16,4(r4)
   10e20:	213ffe04 	addi	r4,r4,-8
   10e24:	24009726 	beq	r4,r16,11084 <_malloc_r+0x2f4>
   10e28:	80800117 	ldw	r2,4(r16)
   10e2c:	01bfff04 	movi	r6,-4
   10e30:	014003c4 	movi	r5,15
   10e34:	1184703a 	and	r2,r2,r6
   10e38:	1447c83a 	sub	r3,r2,r17
   10e3c:	28c00716 	blt	r5,r3,10e5c <_malloc_r+0xcc>
   10e40:	1800920e 	bge	r3,zero,1108c <_malloc_r+0x2fc>
   10e44:	84000317 	ldw	r16,12(r16)
   10e48:	24008e26 	beq	r4,r16,11084 <_malloc_r+0x2f4>
   10e4c:	80800117 	ldw	r2,4(r16)
   10e50:	1184703a 	and	r2,r2,r6
   10e54:	1447c83a 	sub	r3,r2,r17
   10e58:	28fff90e 	bge	r5,r3,10e40 <__alt_data_end+0xffff0e40>
   10e5c:	3809883a 	mov	r4,r7
   10e60:	01800074 	movhi	r6,1
   10e64:	9c000417 	ldw	r16,16(r19)
   10e68:	31948904 	addi	r6,r6,21028
   10e6c:	32000204 	addi	r8,r6,8
   10e70:	82013426 	beq	r16,r8,11344 <_malloc_r+0x5b4>
   10e74:	80c00117 	ldw	r3,4(r16)
   10e78:	00bfff04 	movi	r2,-4
   10e7c:	188e703a 	and	r7,r3,r2
   10e80:	3c45c83a 	sub	r2,r7,r17
   10e84:	00c003c4 	movi	r3,15
   10e88:	18811f16 	blt	r3,r2,11308 <_malloc_r+0x578>
   10e8c:	32000515 	stw	r8,20(r6)
   10e90:	32000415 	stw	r8,16(r6)
   10e94:	10007f0e 	bge	r2,zero,11094 <_malloc_r+0x304>
   10e98:	00807fc4 	movi	r2,511
   10e9c:	11c0fd36 	bltu	r2,r7,11294 <_malloc_r+0x504>
   10ea0:	3806d0fa 	srli	r3,r7,3
   10ea4:	01c00044 	movi	r7,1
   10ea8:	30800117 	ldw	r2,4(r6)
   10eac:	19400044 	addi	r5,r3,1
   10eb0:	294b883a 	add	r5,r5,r5
   10eb4:	1807d0ba 	srai	r3,r3,2
   10eb8:	294b883a 	add	r5,r5,r5
   10ebc:	294b883a 	add	r5,r5,r5
   10ec0:	298b883a 	add	r5,r5,r6
   10ec4:	38c6983a 	sll	r3,r7,r3
   10ec8:	29c00017 	ldw	r7,0(r5)
   10ecc:	2a7ffe04 	addi	r9,r5,-8
   10ed0:	1886b03a 	or	r3,r3,r2
   10ed4:	82400315 	stw	r9,12(r16)
   10ed8:	81c00215 	stw	r7,8(r16)
   10edc:	30c00115 	stw	r3,4(r6)
   10ee0:	2c000015 	stw	r16,0(r5)
   10ee4:	3c000315 	stw	r16,12(r7)
   10ee8:	2005d0ba 	srai	r2,r4,2
   10eec:	01400044 	movi	r5,1
   10ef0:	288a983a 	sll	r5,r5,r2
   10ef4:	19406f36 	bltu	r3,r5,110b4 <_malloc_r+0x324>
   10ef8:	28c4703a 	and	r2,r5,r3
   10efc:	10000a1e 	bne	r2,zero,10f28 <_malloc_r+0x198>
   10f00:	00bfff04 	movi	r2,-4
   10f04:	294b883a 	add	r5,r5,r5
   10f08:	2088703a 	and	r4,r4,r2
   10f0c:	28c4703a 	and	r2,r5,r3
   10f10:	21000104 	addi	r4,r4,4
   10f14:	1000041e 	bne	r2,zero,10f28 <_malloc_r+0x198>
   10f18:	294b883a 	add	r5,r5,r5
   10f1c:	28c4703a 	and	r2,r5,r3
   10f20:	21000104 	addi	r4,r4,4
   10f24:	103ffc26 	beq	r2,zero,10f18 <__alt_data_end+0xffff0f18>
   10f28:	02bfff04 	movi	r10,-4
   10f2c:	024003c4 	movi	r9,15
   10f30:	21800044 	addi	r6,r4,1
   10f34:	318d883a 	add	r6,r6,r6
   10f38:	318d883a 	add	r6,r6,r6
   10f3c:	318d883a 	add	r6,r6,r6
   10f40:	998d883a 	add	r6,r19,r6
   10f44:	333ffe04 	addi	r12,r6,-8
   10f48:	2017883a 	mov	r11,r4
   10f4c:	31800104 	addi	r6,r6,4
   10f50:	34000017 	ldw	r16,0(r6)
   10f54:	31fffd04 	addi	r7,r6,-12
   10f58:	81c0041e 	bne	r16,r7,10f6c <_malloc_r+0x1dc>
   10f5c:	0000fb06 	br	1134c <_malloc_r+0x5bc>
   10f60:	1801030e 	bge	r3,zero,11370 <_malloc_r+0x5e0>
   10f64:	84000317 	ldw	r16,12(r16)
   10f68:	81c0f826 	beq	r16,r7,1134c <_malloc_r+0x5bc>
   10f6c:	80800117 	ldw	r2,4(r16)
   10f70:	1284703a 	and	r2,r2,r10
   10f74:	1447c83a 	sub	r3,r2,r17
   10f78:	48fff90e 	bge	r9,r3,10f60 <__alt_data_end+0xffff0f60>
   10f7c:	80800317 	ldw	r2,12(r16)
   10f80:	81000217 	ldw	r4,8(r16)
   10f84:	89400054 	ori	r5,r17,1
   10f88:	81400115 	stw	r5,4(r16)
   10f8c:	20800315 	stw	r2,12(r4)
   10f90:	11000215 	stw	r4,8(r2)
   10f94:	8463883a 	add	r17,r16,r17
   10f98:	9c400515 	stw	r17,20(r19)
   10f9c:	9c400415 	stw	r17,16(r19)
   10fa0:	18800054 	ori	r2,r3,1
   10fa4:	88800115 	stw	r2,4(r17)
   10fa8:	8a000315 	stw	r8,12(r17)
   10fac:	8a000215 	stw	r8,8(r17)
   10fb0:	88e3883a 	add	r17,r17,r3
   10fb4:	88c00015 	stw	r3,0(r17)
   10fb8:	9009883a 	mov	r4,r18
   10fbc:	00135a80 	call	135a8 <__malloc_unlock>
   10fc0:	80800204 	addi	r2,r16,8
   10fc4:	00001b06 	br	11034 <_malloc_r+0x2a4>
   10fc8:	04400404 	movi	r17,16
   10fcc:	89402536 	bltu	r17,r5,11064 <_malloc_r+0x2d4>
   10fd0:	00135840 	call	13584 <__malloc_lock>
   10fd4:	00800184 	movi	r2,6
   10fd8:	01000084 	movi	r4,2
   10fdc:	04c00074 	movhi	r19,1
   10fe0:	1085883a 	add	r2,r2,r2
   10fe4:	9cd48904 	addi	r19,r19,21028
   10fe8:	1085883a 	add	r2,r2,r2
   10fec:	9885883a 	add	r2,r19,r2
   10ff0:	14000117 	ldw	r16,4(r2)
   10ff4:	10fffe04 	addi	r3,r2,-8
   10ff8:	80c0d926 	beq	r16,r3,11360 <_malloc_r+0x5d0>
   10ffc:	80c00117 	ldw	r3,4(r16)
   11000:	81000317 	ldw	r4,12(r16)
   11004:	00bfff04 	movi	r2,-4
   11008:	1884703a 	and	r2,r3,r2
   1100c:	81400217 	ldw	r5,8(r16)
   11010:	8085883a 	add	r2,r16,r2
   11014:	10c00117 	ldw	r3,4(r2)
   11018:	29000315 	stw	r4,12(r5)
   1101c:	21400215 	stw	r5,8(r4)
   11020:	18c00054 	ori	r3,r3,1
   11024:	10c00115 	stw	r3,4(r2)
   11028:	9009883a 	mov	r4,r18
   1102c:	00135a80 	call	135a8 <__malloc_unlock>
   11030:	80800204 	addi	r2,r16,8
   11034:	dfc00a17 	ldw	ra,40(sp)
   11038:	df000917 	ldw	fp,36(sp)
   1103c:	ddc00817 	ldw	r23,32(sp)
   11040:	dd800717 	ldw	r22,28(sp)
   11044:	dd400617 	ldw	r21,24(sp)
   11048:	dd000517 	ldw	r20,20(sp)
   1104c:	dcc00417 	ldw	r19,16(sp)
   11050:	dc800317 	ldw	r18,12(sp)
   11054:	dc400217 	ldw	r17,8(sp)
   11058:	dc000117 	ldw	r16,4(sp)
   1105c:	dec00b04 	addi	sp,sp,44
   11060:	f800283a 	ret
   11064:	00800304 	movi	r2,12
   11068:	90800015 	stw	r2,0(r18)
   1106c:	0005883a 	mov	r2,zero
   11070:	003ff006 	br	11034 <__alt_data_end+0xffff1034>
   11074:	01002004 	movi	r4,128
   11078:	02001004 	movi	r8,64
   1107c:	01c00fc4 	movi	r7,63
   11080:	003f6106 	br	10e08 <__alt_data_end+0xffff0e08>
   11084:	4009883a 	mov	r4,r8
   11088:	003f7506 	br	10e60 <__alt_data_end+0xffff0e60>
   1108c:	81000317 	ldw	r4,12(r16)
   11090:	003fde06 	br	1100c <__alt_data_end+0xffff100c>
   11094:	81c5883a 	add	r2,r16,r7
   11098:	11400117 	ldw	r5,4(r2)
   1109c:	9009883a 	mov	r4,r18
   110a0:	29400054 	ori	r5,r5,1
   110a4:	11400115 	stw	r5,4(r2)
   110a8:	00135a80 	call	135a8 <__malloc_unlock>
   110ac:	80800204 	addi	r2,r16,8
   110b0:	003fe006 	br	11034 <__alt_data_end+0xffff1034>
   110b4:	9c000217 	ldw	r16,8(r19)
   110b8:	00bfff04 	movi	r2,-4
   110bc:	85800117 	ldw	r22,4(r16)
   110c0:	b0ac703a 	and	r22,r22,r2
   110c4:	b4400336 	bltu	r22,r17,110d4 <_malloc_r+0x344>
   110c8:	b445c83a 	sub	r2,r22,r17
   110cc:	00c003c4 	movi	r3,15
   110d0:	18805d16 	blt	r3,r2,11248 <_malloc_r+0x4b8>
   110d4:	05c00074 	movhi	r23,1
   110d8:	00800074 	movhi	r2,1
   110dc:	10989e04 	addi	r2,r2,25208
   110e0:	bdd60204 	addi	r23,r23,22536
   110e4:	15400017 	ldw	r21,0(r2)
   110e8:	b8c00017 	ldw	r3,0(r23)
   110ec:	00bfffc4 	movi	r2,-1
   110f0:	858d883a 	add	r6,r16,r22
   110f4:	8d6b883a 	add	r21,r17,r21
   110f8:	1880ea26 	beq	r3,r2,114a4 <_malloc_r+0x714>
   110fc:	ad4403c4 	addi	r21,r21,4111
   11100:	00bc0004 	movi	r2,-4096
   11104:	a8aa703a 	and	r21,r21,r2
   11108:	a80b883a 	mov	r5,r21
   1110c:	9009883a 	mov	r4,r18
   11110:	d9800015 	stw	r6,0(sp)
   11114:	0011fb00 	call	11fb0 <_sbrk_r>
   11118:	1029883a 	mov	r20,r2
   1111c:	00bfffc4 	movi	r2,-1
   11120:	d9800017 	ldw	r6,0(sp)
   11124:	a080e826 	beq	r20,r2,114c8 <_malloc_r+0x738>
   11128:	a180a636 	bltu	r20,r6,113c4 <_malloc_r+0x634>
   1112c:	07000074 	movhi	fp,1
   11130:	e718a604 	addi	fp,fp,25240
   11134:	e0800017 	ldw	r2,0(fp)
   11138:	a887883a 	add	r3,r21,r2
   1113c:	e0c00015 	stw	r3,0(fp)
   11140:	3500e626 	beq	r6,r20,114dc <_malloc_r+0x74c>
   11144:	b9000017 	ldw	r4,0(r23)
   11148:	00bfffc4 	movi	r2,-1
   1114c:	2080ee26 	beq	r4,r2,11508 <_malloc_r+0x778>
   11150:	a185c83a 	sub	r2,r20,r6
   11154:	10c5883a 	add	r2,r2,r3
   11158:	e0800015 	stw	r2,0(fp)
   1115c:	a0c001cc 	andi	r3,r20,7
   11160:	1800bc26 	beq	r3,zero,11454 <_malloc_r+0x6c4>
   11164:	a0e9c83a 	sub	r20,r20,r3
   11168:	00840204 	movi	r2,4104
   1116c:	a5000204 	addi	r20,r20,8
   11170:	10c7c83a 	sub	r3,r2,r3
   11174:	a545883a 	add	r2,r20,r21
   11178:	1083ffcc 	andi	r2,r2,4095
   1117c:	18abc83a 	sub	r21,r3,r2
   11180:	a80b883a 	mov	r5,r21
   11184:	9009883a 	mov	r4,r18
   11188:	0011fb00 	call	11fb0 <_sbrk_r>
   1118c:	00ffffc4 	movi	r3,-1
   11190:	10c0e126 	beq	r2,r3,11518 <_malloc_r+0x788>
   11194:	1505c83a 	sub	r2,r2,r20
   11198:	1545883a 	add	r2,r2,r21
   1119c:	10800054 	ori	r2,r2,1
   111a0:	e0c00017 	ldw	r3,0(fp)
   111a4:	9d000215 	stw	r20,8(r19)
   111a8:	a0800115 	stw	r2,4(r20)
   111ac:	a8c7883a 	add	r3,r21,r3
   111b0:	e0c00015 	stw	r3,0(fp)
   111b4:	84c00e26 	beq	r16,r19,111f0 <_malloc_r+0x460>
   111b8:	018003c4 	movi	r6,15
   111bc:	3580a72e 	bgeu	r6,r22,1145c <_malloc_r+0x6cc>
   111c0:	81400117 	ldw	r5,4(r16)
   111c4:	013ffe04 	movi	r4,-8
   111c8:	b0bffd04 	addi	r2,r22,-12
   111cc:	1104703a 	and	r2,r2,r4
   111d0:	2900004c 	andi	r4,r5,1
   111d4:	2088b03a 	or	r4,r4,r2
   111d8:	81000115 	stw	r4,4(r16)
   111dc:	01400144 	movi	r5,5
   111e0:	8089883a 	add	r4,r16,r2
   111e4:	21400115 	stw	r5,4(r4)
   111e8:	21400215 	stw	r5,8(r4)
   111ec:	3080cd36 	bltu	r6,r2,11524 <_malloc_r+0x794>
   111f0:	00800074 	movhi	r2,1
   111f4:	10989d04 	addi	r2,r2,25204
   111f8:	11000017 	ldw	r4,0(r2)
   111fc:	20c0012e 	bgeu	r4,r3,11204 <_malloc_r+0x474>
   11200:	10c00015 	stw	r3,0(r2)
   11204:	00800074 	movhi	r2,1
   11208:	10989c04 	addi	r2,r2,25200
   1120c:	11000017 	ldw	r4,0(r2)
   11210:	9c000217 	ldw	r16,8(r19)
   11214:	20c0012e 	bgeu	r4,r3,1121c <_malloc_r+0x48c>
   11218:	10c00015 	stw	r3,0(r2)
   1121c:	80c00117 	ldw	r3,4(r16)
   11220:	00bfff04 	movi	r2,-4
   11224:	1886703a 	and	r3,r3,r2
   11228:	1c45c83a 	sub	r2,r3,r17
   1122c:	1c400236 	bltu	r3,r17,11238 <_malloc_r+0x4a8>
   11230:	00c003c4 	movi	r3,15
   11234:	18800416 	blt	r3,r2,11248 <_malloc_r+0x4b8>
   11238:	9009883a 	mov	r4,r18
   1123c:	00135a80 	call	135a8 <__malloc_unlock>
   11240:	0005883a 	mov	r2,zero
   11244:	003f7b06 	br	11034 <__alt_data_end+0xffff1034>
   11248:	88c00054 	ori	r3,r17,1
   1124c:	80c00115 	stw	r3,4(r16)
   11250:	8463883a 	add	r17,r16,r17
   11254:	10800054 	ori	r2,r2,1
   11258:	9c400215 	stw	r17,8(r19)
   1125c:	88800115 	stw	r2,4(r17)
   11260:	9009883a 	mov	r4,r18
   11264:	00135a80 	call	135a8 <__malloc_unlock>
   11268:	80800204 	addi	r2,r16,8
   1126c:	003f7106 	br	11034 <__alt_data_end+0xffff1034>
   11270:	00c00504 	movi	r3,20
   11274:	18804a2e 	bgeu	r3,r2,113a0 <_malloc_r+0x610>
   11278:	00c01504 	movi	r3,84
   1127c:	18806e36 	bltu	r3,r2,11438 <_malloc_r+0x6a8>
   11280:	8804d33a 	srli	r2,r17,12
   11284:	12001bc4 	addi	r8,r2,111
   11288:	11c01b84 	addi	r7,r2,110
   1128c:	4209883a 	add	r4,r8,r8
   11290:	003edd06 	br	10e08 <__alt_data_end+0xffff0e08>
   11294:	3804d27a 	srli	r2,r7,9
   11298:	00c00104 	movi	r3,4
   1129c:	1880442e 	bgeu	r3,r2,113b0 <_malloc_r+0x620>
   112a0:	00c00504 	movi	r3,20
   112a4:	18808136 	bltu	r3,r2,114ac <_malloc_r+0x71c>
   112a8:	11401704 	addi	r5,r2,92
   112ac:	10c016c4 	addi	r3,r2,91
   112b0:	294b883a 	add	r5,r5,r5
   112b4:	294b883a 	add	r5,r5,r5
   112b8:	294b883a 	add	r5,r5,r5
   112bc:	994b883a 	add	r5,r19,r5
   112c0:	28800017 	ldw	r2,0(r5)
   112c4:	01800074 	movhi	r6,1
   112c8:	297ffe04 	addi	r5,r5,-8
   112cc:	31948904 	addi	r6,r6,21028
   112d0:	28806526 	beq	r5,r2,11468 <_malloc_r+0x6d8>
   112d4:	01bfff04 	movi	r6,-4
   112d8:	10c00117 	ldw	r3,4(r2)
   112dc:	1986703a 	and	r3,r3,r6
   112e0:	38c0022e 	bgeu	r7,r3,112ec <_malloc_r+0x55c>
   112e4:	10800217 	ldw	r2,8(r2)
   112e8:	28bffb1e 	bne	r5,r2,112d8 <__alt_data_end+0xffff12d8>
   112ec:	11400317 	ldw	r5,12(r2)
   112f0:	98c00117 	ldw	r3,4(r19)
   112f4:	81400315 	stw	r5,12(r16)
   112f8:	80800215 	stw	r2,8(r16)
   112fc:	2c000215 	stw	r16,8(r5)
   11300:	14000315 	stw	r16,12(r2)
   11304:	003ef806 	br	10ee8 <__alt_data_end+0xffff0ee8>
   11308:	88c00054 	ori	r3,r17,1
   1130c:	80c00115 	stw	r3,4(r16)
   11310:	8463883a 	add	r17,r16,r17
   11314:	34400515 	stw	r17,20(r6)
   11318:	34400415 	stw	r17,16(r6)
   1131c:	10c00054 	ori	r3,r2,1
   11320:	8a000315 	stw	r8,12(r17)
   11324:	8a000215 	stw	r8,8(r17)
   11328:	88c00115 	stw	r3,4(r17)
   1132c:	88a3883a 	add	r17,r17,r2
   11330:	88800015 	stw	r2,0(r17)
   11334:	9009883a 	mov	r4,r18
   11338:	00135a80 	call	135a8 <__malloc_unlock>
   1133c:	80800204 	addi	r2,r16,8
   11340:	003f3c06 	br	11034 <__alt_data_end+0xffff1034>
   11344:	30c00117 	ldw	r3,4(r6)
   11348:	003ee706 	br	10ee8 <__alt_data_end+0xffff0ee8>
   1134c:	5ac00044 	addi	r11,r11,1
   11350:	588000cc 	andi	r2,r11,3
   11354:	31800204 	addi	r6,r6,8
   11358:	103efd1e 	bne	r2,zero,10f50 <__alt_data_end+0xffff0f50>
   1135c:	00002406 	br	113f0 <_malloc_r+0x660>
   11360:	14000317 	ldw	r16,12(r2)
   11364:	143f251e 	bne	r2,r16,10ffc <__alt_data_end+0xffff0ffc>
   11368:	21000084 	addi	r4,r4,2
   1136c:	003ebc06 	br	10e60 <__alt_data_end+0xffff0e60>
   11370:	8085883a 	add	r2,r16,r2
   11374:	10c00117 	ldw	r3,4(r2)
   11378:	81000317 	ldw	r4,12(r16)
   1137c:	81400217 	ldw	r5,8(r16)
   11380:	18c00054 	ori	r3,r3,1
   11384:	10c00115 	stw	r3,4(r2)
   11388:	29000315 	stw	r4,12(r5)
   1138c:	21400215 	stw	r5,8(r4)
   11390:	9009883a 	mov	r4,r18
   11394:	00135a80 	call	135a8 <__malloc_unlock>
   11398:	80800204 	addi	r2,r16,8
   1139c:	003f2506 	br	11034 <__alt_data_end+0xffff1034>
   113a0:	12001704 	addi	r8,r2,92
   113a4:	11c016c4 	addi	r7,r2,91
   113a8:	4209883a 	add	r4,r8,r8
   113ac:	003e9606 	br	10e08 <__alt_data_end+0xffff0e08>
   113b0:	3804d1ba 	srli	r2,r7,6
   113b4:	11400e44 	addi	r5,r2,57
   113b8:	10c00e04 	addi	r3,r2,56
   113bc:	294b883a 	add	r5,r5,r5
   113c0:	003fbc06 	br	112b4 <__alt_data_end+0xffff12b4>
   113c4:	84ff5926 	beq	r16,r19,1112c <__alt_data_end+0xffff112c>
   113c8:	00800074 	movhi	r2,1
   113cc:	10948904 	addi	r2,r2,21028
   113d0:	14000217 	ldw	r16,8(r2)
   113d4:	00bfff04 	movi	r2,-4
   113d8:	80c00117 	ldw	r3,4(r16)
   113dc:	1886703a 	and	r3,r3,r2
   113e0:	003f9106 	br	11228 <__alt_data_end+0xffff1228>
   113e4:	60800217 	ldw	r2,8(r12)
   113e8:	213fffc4 	addi	r4,r4,-1
   113ec:	1300651e 	bne	r2,r12,11584 <_malloc_r+0x7f4>
   113f0:	208000cc 	andi	r2,r4,3
   113f4:	633ffe04 	addi	r12,r12,-8
   113f8:	103ffa1e 	bne	r2,zero,113e4 <__alt_data_end+0xffff13e4>
   113fc:	98800117 	ldw	r2,4(r19)
   11400:	0146303a 	nor	r3,zero,r5
   11404:	1884703a 	and	r2,r3,r2
   11408:	98800115 	stw	r2,4(r19)
   1140c:	294b883a 	add	r5,r5,r5
   11410:	117f2836 	bltu	r2,r5,110b4 <__alt_data_end+0xffff10b4>
   11414:	283f2726 	beq	r5,zero,110b4 <__alt_data_end+0xffff10b4>
   11418:	2886703a 	and	r3,r5,r2
   1141c:	5809883a 	mov	r4,r11
   11420:	183ec31e 	bne	r3,zero,10f30 <__alt_data_end+0xffff0f30>
   11424:	294b883a 	add	r5,r5,r5
   11428:	2886703a 	and	r3,r5,r2
   1142c:	21000104 	addi	r4,r4,4
   11430:	183ffc26 	beq	r3,zero,11424 <__alt_data_end+0xffff1424>
   11434:	003ebe06 	br	10f30 <__alt_data_end+0xffff0f30>
   11438:	00c05504 	movi	r3,340
   1143c:	18801236 	bltu	r3,r2,11488 <_malloc_r+0x6f8>
   11440:	8804d3fa 	srli	r2,r17,15
   11444:	12001e04 	addi	r8,r2,120
   11448:	11c01dc4 	addi	r7,r2,119
   1144c:	4209883a 	add	r4,r8,r8
   11450:	003e6d06 	br	10e08 <__alt_data_end+0xffff0e08>
   11454:	00c40004 	movi	r3,4096
   11458:	003f4606 	br	11174 <__alt_data_end+0xffff1174>
   1145c:	00800044 	movi	r2,1
   11460:	a0800115 	stw	r2,4(r20)
   11464:	003f7406 	br	11238 <__alt_data_end+0xffff1238>
   11468:	1805d0ba 	srai	r2,r3,2
   1146c:	01c00044 	movi	r7,1
   11470:	30c00117 	ldw	r3,4(r6)
   11474:	388e983a 	sll	r7,r7,r2
   11478:	2805883a 	mov	r2,r5
   1147c:	38c6b03a 	or	r3,r7,r3
   11480:	30c00115 	stw	r3,4(r6)
   11484:	003f9b06 	br	112f4 <__alt_data_end+0xffff12f4>
   11488:	00c15504 	movi	r3,1364
   1148c:	18801a36 	bltu	r3,r2,114f8 <_malloc_r+0x768>
   11490:	8804d4ba 	srli	r2,r17,18
   11494:	12001f44 	addi	r8,r2,125
   11498:	11c01f04 	addi	r7,r2,124
   1149c:	4209883a 	add	r4,r8,r8
   114a0:	003e5906 	br	10e08 <__alt_data_end+0xffff0e08>
   114a4:	ad400404 	addi	r21,r21,16
   114a8:	003f1706 	br	11108 <__alt_data_end+0xffff1108>
   114ac:	00c01504 	movi	r3,84
   114b0:	18802336 	bltu	r3,r2,11540 <_malloc_r+0x7b0>
   114b4:	3804d33a 	srli	r2,r7,12
   114b8:	11401bc4 	addi	r5,r2,111
   114bc:	10c01b84 	addi	r3,r2,110
   114c0:	294b883a 	add	r5,r5,r5
   114c4:	003f7b06 	br	112b4 <__alt_data_end+0xffff12b4>
   114c8:	9c000217 	ldw	r16,8(r19)
   114cc:	00bfff04 	movi	r2,-4
   114d0:	80c00117 	ldw	r3,4(r16)
   114d4:	1886703a 	and	r3,r3,r2
   114d8:	003f5306 	br	11228 <__alt_data_end+0xffff1228>
   114dc:	3083ffcc 	andi	r2,r6,4095
   114e0:	103f181e 	bne	r2,zero,11144 <__alt_data_end+0xffff1144>
   114e4:	99000217 	ldw	r4,8(r19)
   114e8:	b545883a 	add	r2,r22,r21
   114ec:	10800054 	ori	r2,r2,1
   114f0:	20800115 	stw	r2,4(r4)
   114f4:	003f3e06 	br	111f0 <__alt_data_end+0xffff11f0>
   114f8:	01003f84 	movi	r4,254
   114fc:	02001fc4 	movi	r8,127
   11500:	01c01f84 	movi	r7,126
   11504:	003e4006 	br	10e08 <__alt_data_end+0xffff0e08>
   11508:	00800074 	movhi	r2,1
   1150c:	10960204 	addi	r2,r2,22536
   11510:	15000015 	stw	r20,0(r2)
   11514:	003f1106 	br	1115c <__alt_data_end+0xffff115c>
   11518:	00800044 	movi	r2,1
   1151c:	002b883a 	mov	r21,zero
   11520:	003f1f06 	br	111a0 <__alt_data_end+0xffff11a0>
   11524:	81400204 	addi	r5,r16,8
   11528:	9009883a 	mov	r4,r18
   1152c:	00128180 	call	12818 <_free_r>
   11530:	00800074 	movhi	r2,1
   11534:	1098a604 	addi	r2,r2,25240
   11538:	10c00017 	ldw	r3,0(r2)
   1153c:	003f2c06 	br	111f0 <__alt_data_end+0xffff11f0>
   11540:	00c05504 	movi	r3,340
   11544:	18800536 	bltu	r3,r2,1155c <_malloc_r+0x7cc>
   11548:	3804d3fa 	srli	r2,r7,15
   1154c:	11401e04 	addi	r5,r2,120
   11550:	10c01dc4 	addi	r3,r2,119
   11554:	294b883a 	add	r5,r5,r5
   11558:	003f5606 	br	112b4 <__alt_data_end+0xffff12b4>
   1155c:	00c15504 	movi	r3,1364
   11560:	18800536 	bltu	r3,r2,11578 <_malloc_r+0x7e8>
   11564:	3804d4ba 	srli	r2,r7,18
   11568:	11401f44 	addi	r5,r2,125
   1156c:	10c01f04 	addi	r3,r2,124
   11570:	294b883a 	add	r5,r5,r5
   11574:	003f4f06 	br	112b4 <__alt_data_end+0xffff12b4>
   11578:	01403f84 	movi	r5,254
   1157c:	00c01f84 	movi	r3,126
   11580:	003f4c06 	br	112b4 <__alt_data_end+0xffff12b4>
   11584:	98800117 	ldw	r2,4(r19)
   11588:	003fa006 	br	1140c <__alt_data_end+0xffff140c>
   1158c:	8808d0fa 	srli	r4,r17,3
   11590:	20800044 	addi	r2,r4,1
   11594:	1085883a 	add	r2,r2,r2
   11598:	003e9006 	br	10fdc <__alt_data_end+0xffff0fdc>

0001159c <memchr>:
   1159c:	208000cc 	andi	r2,r4,3
   115a0:	280f883a 	mov	r7,r5
   115a4:	10003426 	beq	r2,zero,11678 <memchr+0xdc>
   115a8:	30bfffc4 	addi	r2,r6,-1
   115ac:	30001a26 	beq	r6,zero,11618 <memchr+0x7c>
   115b0:	20c00003 	ldbu	r3,0(r4)
   115b4:	29803fcc 	andi	r6,r5,255
   115b8:	30c0051e 	bne	r6,r3,115d0 <memchr+0x34>
   115bc:	00001806 	br	11620 <memchr+0x84>
   115c0:	10001526 	beq	r2,zero,11618 <memchr+0x7c>
   115c4:	20c00003 	ldbu	r3,0(r4)
   115c8:	10bfffc4 	addi	r2,r2,-1
   115cc:	30c01426 	beq	r6,r3,11620 <memchr+0x84>
   115d0:	21000044 	addi	r4,r4,1
   115d4:	20c000cc 	andi	r3,r4,3
   115d8:	183ff91e 	bne	r3,zero,115c0 <__alt_data_end+0xffff15c0>
   115dc:	020000c4 	movi	r8,3
   115e0:	40801136 	bltu	r8,r2,11628 <memchr+0x8c>
   115e4:	10000c26 	beq	r2,zero,11618 <memchr+0x7c>
   115e8:	20c00003 	ldbu	r3,0(r4)
   115ec:	29403fcc 	andi	r5,r5,255
   115f0:	28c00b26 	beq	r5,r3,11620 <memchr+0x84>
   115f4:	20c00044 	addi	r3,r4,1
   115f8:	39803fcc 	andi	r6,r7,255
   115fc:	2089883a 	add	r4,r4,r2
   11600:	00000306 	br	11610 <memchr+0x74>
   11604:	18c00044 	addi	r3,r3,1
   11608:	197fffc3 	ldbu	r5,-1(r3)
   1160c:	31400526 	beq	r6,r5,11624 <memchr+0x88>
   11610:	1805883a 	mov	r2,r3
   11614:	20fffb1e 	bne	r4,r3,11604 <__alt_data_end+0xffff1604>
   11618:	0005883a 	mov	r2,zero
   1161c:	f800283a 	ret
   11620:	2005883a 	mov	r2,r4
   11624:	f800283a 	ret
   11628:	28c03fcc 	andi	r3,r5,255
   1162c:	1812923a 	slli	r9,r3,8
   11630:	02ffbff4 	movhi	r11,65279
   11634:	02a02074 	movhi	r10,32897
   11638:	48d2b03a 	or	r9,r9,r3
   1163c:	4806943a 	slli	r3,r9,16
   11640:	5affbfc4 	addi	r11,r11,-257
   11644:	52a02004 	addi	r10,r10,-32640
   11648:	48d2b03a 	or	r9,r9,r3
   1164c:	20c00017 	ldw	r3,0(r4)
   11650:	48c6f03a 	xor	r3,r9,r3
   11654:	1acd883a 	add	r6,r3,r11
   11658:	00c6303a 	nor	r3,zero,r3
   1165c:	30c6703a 	and	r3,r6,r3
   11660:	1a86703a 	and	r3,r3,r10
   11664:	183fe01e 	bne	r3,zero,115e8 <__alt_data_end+0xffff15e8>
   11668:	10bfff04 	addi	r2,r2,-4
   1166c:	21000104 	addi	r4,r4,4
   11670:	40bff636 	bltu	r8,r2,1164c <__alt_data_end+0xffff164c>
   11674:	003fdb06 	br	115e4 <__alt_data_end+0xffff15e4>
   11678:	3005883a 	mov	r2,r6
   1167c:	003fd706 	br	115dc <__alt_data_end+0xffff15dc>

00011680 <memcpy>:
   11680:	defffd04 	addi	sp,sp,-12
   11684:	dfc00215 	stw	ra,8(sp)
   11688:	dc400115 	stw	r17,4(sp)
   1168c:	dc000015 	stw	r16,0(sp)
   11690:	00c003c4 	movi	r3,15
   11694:	2005883a 	mov	r2,r4
   11698:	1980452e 	bgeu	r3,r6,117b0 <memcpy+0x130>
   1169c:	2906b03a 	or	r3,r5,r4
   116a0:	18c000cc 	andi	r3,r3,3
   116a4:	1800441e 	bne	r3,zero,117b8 <memcpy+0x138>
   116a8:	347ffc04 	addi	r17,r6,-16
   116ac:	8822d13a 	srli	r17,r17,4
   116b0:	28c00104 	addi	r3,r5,4
   116b4:	23400104 	addi	r13,r4,4
   116b8:	8820913a 	slli	r16,r17,4
   116bc:	2b000204 	addi	r12,r5,8
   116c0:	22c00204 	addi	r11,r4,8
   116c4:	84000504 	addi	r16,r16,20
   116c8:	2a800304 	addi	r10,r5,12
   116cc:	22400304 	addi	r9,r4,12
   116d0:	2c21883a 	add	r16,r5,r16
   116d4:	2811883a 	mov	r8,r5
   116d8:	200f883a 	mov	r7,r4
   116dc:	41000017 	ldw	r4,0(r8)
   116e0:	1fc00017 	ldw	ra,0(r3)
   116e4:	63c00017 	ldw	r15,0(r12)
   116e8:	39000015 	stw	r4,0(r7)
   116ec:	53800017 	ldw	r14,0(r10)
   116f0:	6fc00015 	stw	ra,0(r13)
   116f4:	5bc00015 	stw	r15,0(r11)
   116f8:	4b800015 	stw	r14,0(r9)
   116fc:	18c00404 	addi	r3,r3,16
   11700:	39c00404 	addi	r7,r7,16
   11704:	42000404 	addi	r8,r8,16
   11708:	6b400404 	addi	r13,r13,16
   1170c:	63000404 	addi	r12,r12,16
   11710:	5ac00404 	addi	r11,r11,16
   11714:	52800404 	addi	r10,r10,16
   11718:	4a400404 	addi	r9,r9,16
   1171c:	1c3fef1e 	bne	r3,r16,116dc <__alt_data_end+0xffff16dc>
   11720:	89c00044 	addi	r7,r17,1
   11724:	380e913a 	slli	r7,r7,4
   11728:	310003cc 	andi	r4,r6,15
   1172c:	02c000c4 	movi	r11,3
   11730:	11c7883a 	add	r3,r2,r7
   11734:	29cb883a 	add	r5,r5,r7
   11738:	5900212e 	bgeu	r11,r4,117c0 <memcpy+0x140>
   1173c:	1813883a 	mov	r9,r3
   11740:	2811883a 	mov	r8,r5
   11744:	200f883a 	mov	r7,r4
   11748:	42800017 	ldw	r10,0(r8)
   1174c:	4a400104 	addi	r9,r9,4
   11750:	39ffff04 	addi	r7,r7,-4
   11754:	4abfff15 	stw	r10,-4(r9)
   11758:	42000104 	addi	r8,r8,4
   1175c:	59fffa36 	bltu	r11,r7,11748 <__alt_data_end+0xffff1748>
   11760:	213fff04 	addi	r4,r4,-4
   11764:	2008d0ba 	srli	r4,r4,2
   11768:	318000cc 	andi	r6,r6,3
   1176c:	21000044 	addi	r4,r4,1
   11770:	2109883a 	add	r4,r4,r4
   11774:	2109883a 	add	r4,r4,r4
   11778:	1907883a 	add	r3,r3,r4
   1177c:	290b883a 	add	r5,r5,r4
   11780:	30000626 	beq	r6,zero,1179c <memcpy+0x11c>
   11784:	198d883a 	add	r6,r3,r6
   11788:	29c00003 	ldbu	r7,0(r5)
   1178c:	18c00044 	addi	r3,r3,1
   11790:	29400044 	addi	r5,r5,1
   11794:	19ffffc5 	stb	r7,-1(r3)
   11798:	19bffb1e 	bne	r3,r6,11788 <__alt_data_end+0xffff1788>
   1179c:	dfc00217 	ldw	ra,8(sp)
   117a0:	dc400117 	ldw	r17,4(sp)
   117a4:	dc000017 	ldw	r16,0(sp)
   117a8:	dec00304 	addi	sp,sp,12
   117ac:	f800283a 	ret
   117b0:	2007883a 	mov	r3,r4
   117b4:	003ff206 	br	11780 <__alt_data_end+0xffff1780>
   117b8:	2007883a 	mov	r3,r4
   117bc:	003ff106 	br	11784 <__alt_data_end+0xffff1784>
   117c0:	200d883a 	mov	r6,r4
   117c4:	003fee06 	br	11780 <__alt_data_end+0xffff1780>

000117c8 <memmove>:
   117c8:	2005883a 	mov	r2,r4
   117cc:	29000b2e 	bgeu	r5,r4,117fc <memmove+0x34>
   117d0:	298f883a 	add	r7,r5,r6
   117d4:	21c0092e 	bgeu	r4,r7,117fc <memmove+0x34>
   117d8:	2187883a 	add	r3,r4,r6
   117dc:	198bc83a 	sub	r5,r3,r6
   117e0:	30004826 	beq	r6,zero,11904 <memmove+0x13c>
   117e4:	39ffffc4 	addi	r7,r7,-1
   117e8:	39000003 	ldbu	r4,0(r7)
   117ec:	18ffffc4 	addi	r3,r3,-1
   117f0:	19000005 	stb	r4,0(r3)
   117f4:	28fffb1e 	bne	r5,r3,117e4 <__alt_data_end+0xffff17e4>
   117f8:	f800283a 	ret
   117fc:	00c003c4 	movi	r3,15
   11800:	1980412e 	bgeu	r3,r6,11908 <memmove+0x140>
   11804:	2886b03a 	or	r3,r5,r2
   11808:	18c000cc 	andi	r3,r3,3
   1180c:	1800401e 	bne	r3,zero,11910 <memmove+0x148>
   11810:	33fffc04 	addi	r15,r6,-16
   11814:	781ed13a 	srli	r15,r15,4
   11818:	28c00104 	addi	r3,r5,4
   1181c:	13400104 	addi	r13,r2,4
   11820:	781c913a 	slli	r14,r15,4
   11824:	2b000204 	addi	r12,r5,8
   11828:	12c00204 	addi	r11,r2,8
   1182c:	73800504 	addi	r14,r14,20
   11830:	2a800304 	addi	r10,r5,12
   11834:	12400304 	addi	r9,r2,12
   11838:	2b9d883a 	add	r14,r5,r14
   1183c:	2811883a 	mov	r8,r5
   11840:	100f883a 	mov	r7,r2
   11844:	41000017 	ldw	r4,0(r8)
   11848:	39c00404 	addi	r7,r7,16
   1184c:	18c00404 	addi	r3,r3,16
   11850:	393ffc15 	stw	r4,-16(r7)
   11854:	193ffc17 	ldw	r4,-16(r3)
   11858:	6b400404 	addi	r13,r13,16
   1185c:	5ac00404 	addi	r11,r11,16
   11860:	693ffc15 	stw	r4,-16(r13)
   11864:	61000017 	ldw	r4,0(r12)
   11868:	4a400404 	addi	r9,r9,16
   1186c:	42000404 	addi	r8,r8,16
   11870:	593ffc15 	stw	r4,-16(r11)
   11874:	51000017 	ldw	r4,0(r10)
   11878:	63000404 	addi	r12,r12,16
   1187c:	52800404 	addi	r10,r10,16
   11880:	493ffc15 	stw	r4,-16(r9)
   11884:	1bbfef1e 	bne	r3,r14,11844 <__alt_data_end+0xffff1844>
   11888:	79000044 	addi	r4,r15,1
   1188c:	2008913a 	slli	r4,r4,4
   11890:	328003cc 	andi	r10,r6,15
   11894:	02c000c4 	movi	r11,3
   11898:	1107883a 	add	r3,r2,r4
   1189c:	290b883a 	add	r5,r5,r4
   118a0:	5a801e2e 	bgeu	r11,r10,1191c <memmove+0x154>
   118a4:	1813883a 	mov	r9,r3
   118a8:	2811883a 	mov	r8,r5
   118ac:	500f883a 	mov	r7,r10
   118b0:	41000017 	ldw	r4,0(r8)
   118b4:	4a400104 	addi	r9,r9,4
   118b8:	39ffff04 	addi	r7,r7,-4
   118bc:	493fff15 	stw	r4,-4(r9)
   118c0:	42000104 	addi	r8,r8,4
   118c4:	59fffa36 	bltu	r11,r7,118b0 <__alt_data_end+0xffff18b0>
   118c8:	513fff04 	addi	r4,r10,-4
   118cc:	2008d0ba 	srli	r4,r4,2
   118d0:	318000cc 	andi	r6,r6,3
   118d4:	21000044 	addi	r4,r4,1
   118d8:	2109883a 	add	r4,r4,r4
   118dc:	2109883a 	add	r4,r4,r4
   118e0:	1907883a 	add	r3,r3,r4
   118e4:	290b883a 	add	r5,r5,r4
   118e8:	30000b26 	beq	r6,zero,11918 <memmove+0x150>
   118ec:	198d883a 	add	r6,r3,r6
   118f0:	29c00003 	ldbu	r7,0(r5)
   118f4:	18c00044 	addi	r3,r3,1
   118f8:	29400044 	addi	r5,r5,1
   118fc:	19ffffc5 	stb	r7,-1(r3)
   11900:	19bffb1e 	bne	r3,r6,118f0 <__alt_data_end+0xffff18f0>
   11904:	f800283a 	ret
   11908:	1007883a 	mov	r3,r2
   1190c:	003ff606 	br	118e8 <__alt_data_end+0xffff18e8>
   11910:	1007883a 	mov	r3,r2
   11914:	003ff506 	br	118ec <__alt_data_end+0xffff18ec>
   11918:	f800283a 	ret
   1191c:	500d883a 	mov	r6,r10
   11920:	003ff106 	br	118e8 <__alt_data_end+0xffff18e8>

00011924 <memset>:
   11924:	20c000cc 	andi	r3,r4,3
   11928:	2005883a 	mov	r2,r4
   1192c:	18004426 	beq	r3,zero,11a40 <memset+0x11c>
   11930:	31ffffc4 	addi	r7,r6,-1
   11934:	30004026 	beq	r6,zero,11a38 <memset+0x114>
   11938:	2813883a 	mov	r9,r5
   1193c:	200d883a 	mov	r6,r4
   11940:	2007883a 	mov	r3,r4
   11944:	00000406 	br	11958 <memset+0x34>
   11948:	3a3fffc4 	addi	r8,r7,-1
   1194c:	31800044 	addi	r6,r6,1
   11950:	38003926 	beq	r7,zero,11a38 <memset+0x114>
   11954:	400f883a 	mov	r7,r8
   11958:	18c00044 	addi	r3,r3,1
   1195c:	32400005 	stb	r9,0(r6)
   11960:	1a0000cc 	andi	r8,r3,3
   11964:	403ff81e 	bne	r8,zero,11948 <__alt_data_end+0xffff1948>
   11968:	010000c4 	movi	r4,3
   1196c:	21c02d2e 	bgeu	r4,r7,11a24 <memset+0x100>
   11970:	29003fcc 	andi	r4,r5,255
   11974:	200c923a 	slli	r6,r4,8
   11978:	3108b03a 	or	r4,r6,r4
   1197c:	200c943a 	slli	r6,r4,16
   11980:	218cb03a 	or	r6,r4,r6
   11984:	010003c4 	movi	r4,15
   11988:	21c0182e 	bgeu	r4,r7,119ec <memset+0xc8>
   1198c:	3b3ffc04 	addi	r12,r7,-16
   11990:	6018d13a 	srli	r12,r12,4
   11994:	1a000104 	addi	r8,r3,4
   11998:	1ac00204 	addi	r11,r3,8
   1199c:	6008913a 	slli	r4,r12,4
   119a0:	1a800304 	addi	r10,r3,12
   119a4:	1813883a 	mov	r9,r3
   119a8:	21000504 	addi	r4,r4,20
   119ac:	1909883a 	add	r4,r3,r4
   119b0:	49800015 	stw	r6,0(r9)
   119b4:	41800015 	stw	r6,0(r8)
   119b8:	59800015 	stw	r6,0(r11)
   119bc:	51800015 	stw	r6,0(r10)
   119c0:	42000404 	addi	r8,r8,16
   119c4:	4a400404 	addi	r9,r9,16
   119c8:	5ac00404 	addi	r11,r11,16
   119cc:	52800404 	addi	r10,r10,16
   119d0:	413ff71e 	bne	r8,r4,119b0 <__alt_data_end+0xffff19b0>
   119d4:	63000044 	addi	r12,r12,1
   119d8:	6018913a 	slli	r12,r12,4
   119dc:	39c003cc 	andi	r7,r7,15
   119e0:	010000c4 	movi	r4,3
   119e4:	1b07883a 	add	r3,r3,r12
   119e8:	21c00e2e 	bgeu	r4,r7,11a24 <memset+0x100>
   119ec:	1813883a 	mov	r9,r3
   119f0:	3811883a 	mov	r8,r7
   119f4:	010000c4 	movi	r4,3
   119f8:	49800015 	stw	r6,0(r9)
   119fc:	423fff04 	addi	r8,r8,-4
   11a00:	4a400104 	addi	r9,r9,4
   11a04:	223ffc36 	bltu	r4,r8,119f8 <__alt_data_end+0xffff19f8>
   11a08:	393fff04 	addi	r4,r7,-4
   11a0c:	2008d0ba 	srli	r4,r4,2
   11a10:	39c000cc 	andi	r7,r7,3
   11a14:	21000044 	addi	r4,r4,1
   11a18:	2109883a 	add	r4,r4,r4
   11a1c:	2109883a 	add	r4,r4,r4
   11a20:	1907883a 	add	r3,r3,r4
   11a24:	38000526 	beq	r7,zero,11a3c <memset+0x118>
   11a28:	19cf883a 	add	r7,r3,r7
   11a2c:	19400005 	stb	r5,0(r3)
   11a30:	18c00044 	addi	r3,r3,1
   11a34:	38fffd1e 	bne	r7,r3,11a2c <__alt_data_end+0xffff1a2c>
   11a38:	f800283a 	ret
   11a3c:	f800283a 	ret
   11a40:	2007883a 	mov	r3,r4
   11a44:	300f883a 	mov	r7,r6
   11a48:	003fc706 	br	11968 <__alt_data_end+0xffff1968>

00011a4c <_realloc_r>:
   11a4c:	defff604 	addi	sp,sp,-40
   11a50:	dc800215 	stw	r18,8(sp)
   11a54:	dfc00915 	stw	ra,36(sp)
   11a58:	df000815 	stw	fp,32(sp)
   11a5c:	ddc00715 	stw	r23,28(sp)
   11a60:	dd800615 	stw	r22,24(sp)
   11a64:	dd400515 	stw	r21,20(sp)
   11a68:	dd000415 	stw	r20,16(sp)
   11a6c:	dcc00315 	stw	r19,12(sp)
   11a70:	dc400115 	stw	r17,4(sp)
   11a74:	dc000015 	stw	r16,0(sp)
   11a78:	3025883a 	mov	r18,r6
   11a7c:	2800b726 	beq	r5,zero,11d5c <_realloc_r+0x310>
   11a80:	282b883a 	mov	r21,r5
   11a84:	2029883a 	mov	r20,r4
   11a88:	00135840 	call	13584 <__malloc_lock>
   11a8c:	a8bfff17 	ldw	r2,-4(r21)
   11a90:	043fff04 	movi	r16,-4
   11a94:	90c002c4 	addi	r3,r18,11
   11a98:	01000584 	movi	r4,22
   11a9c:	acfffe04 	addi	r19,r21,-8
   11aa0:	1420703a 	and	r16,r2,r16
   11aa4:	20c0332e 	bgeu	r4,r3,11b74 <_realloc_r+0x128>
   11aa8:	047ffe04 	movi	r17,-8
   11aac:	1c62703a 	and	r17,r3,r17
   11ab0:	8807883a 	mov	r3,r17
   11ab4:	88005816 	blt	r17,zero,11c18 <_realloc_r+0x1cc>
   11ab8:	8c805736 	bltu	r17,r18,11c18 <_realloc_r+0x1cc>
   11abc:	80c0300e 	bge	r16,r3,11b80 <_realloc_r+0x134>
   11ac0:	07000074 	movhi	fp,1
   11ac4:	e7148904 	addi	fp,fp,21028
   11ac8:	e1c00217 	ldw	r7,8(fp)
   11acc:	9c09883a 	add	r4,r19,r16
   11ad0:	22000117 	ldw	r8,4(r4)
   11ad4:	21c06326 	beq	r4,r7,11c64 <_realloc_r+0x218>
   11ad8:	017fff84 	movi	r5,-2
   11adc:	414a703a 	and	r5,r8,r5
   11ae0:	214b883a 	add	r5,r4,r5
   11ae4:	29800117 	ldw	r6,4(r5)
   11ae8:	3180004c 	andi	r6,r6,1
   11aec:	30003f26 	beq	r6,zero,11bec <_realloc_r+0x1a0>
   11af0:	1080004c 	andi	r2,r2,1
   11af4:	10008326 	beq	r2,zero,11d04 <_realloc_r+0x2b8>
   11af8:	900b883a 	mov	r5,r18
   11afc:	a009883a 	mov	r4,r20
   11b00:	0010d900 	call	10d90 <_malloc_r>
   11b04:	1025883a 	mov	r18,r2
   11b08:	10011e26 	beq	r2,zero,11f84 <_realloc_r+0x538>
   11b0c:	a93fff17 	ldw	r4,-4(r21)
   11b10:	10fffe04 	addi	r3,r2,-8
   11b14:	00bfff84 	movi	r2,-2
   11b18:	2084703a 	and	r2,r4,r2
   11b1c:	9885883a 	add	r2,r19,r2
   11b20:	1880ee26 	beq	r3,r2,11edc <_realloc_r+0x490>
   11b24:	81bfff04 	addi	r6,r16,-4
   11b28:	00800904 	movi	r2,36
   11b2c:	1180b836 	bltu	r2,r6,11e10 <_realloc_r+0x3c4>
   11b30:	00c004c4 	movi	r3,19
   11b34:	19809636 	bltu	r3,r6,11d90 <_realloc_r+0x344>
   11b38:	9005883a 	mov	r2,r18
   11b3c:	a807883a 	mov	r3,r21
   11b40:	19000017 	ldw	r4,0(r3)
   11b44:	11000015 	stw	r4,0(r2)
   11b48:	19000117 	ldw	r4,4(r3)
   11b4c:	11000115 	stw	r4,4(r2)
   11b50:	18c00217 	ldw	r3,8(r3)
   11b54:	10c00215 	stw	r3,8(r2)
   11b58:	a80b883a 	mov	r5,r21
   11b5c:	a009883a 	mov	r4,r20
   11b60:	00128180 	call	12818 <_free_r>
   11b64:	a009883a 	mov	r4,r20
   11b68:	00135a80 	call	135a8 <__malloc_unlock>
   11b6c:	9005883a 	mov	r2,r18
   11b70:	00001206 	br	11bbc <_realloc_r+0x170>
   11b74:	00c00404 	movi	r3,16
   11b78:	1823883a 	mov	r17,r3
   11b7c:	003fce06 	br	11ab8 <__alt_data_end+0xffff1ab8>
   11b80:	a825883a 	mov	r18,r21
   11b84:	8445c83a 	sub	r2,r16,r17
   11b88:	00c003c4 	movi	r3,15
   11b8c:	18802636 	bltu	r3,r2,11c28 <_realloc_r+0x1dc>
   11b90:	99800117 	ldw	r6,4(r19)
   11b94:	9c07883a 	add	r3,r19,r16
   11b98:	3180004c 	andi	r6,r6,1
   11b9c:	3420b03a 	or	r16,r6,r16
   11ba0:	9c000115 	stw	r16,4(r19)
   11ba4:	18800117 	ldw	r2,4(r3)
   11ba8:	10800054 	ori	r2,r2,1
   11bac:	18800115 	stw	r2,4(r3)
   11bb0:	a009883a 	mov	r4,r20
   11bb4:	00135a80 	call	135a8 <__malloc_unlock>
   11bb8:	9005883a 	mov	r2,r18
   11bbc:	dfc00917 	ldw	ra,36(sp)
   11bc0:	df000817 	ldw	fp,32(sp)
   11bc4:	ddc00717 	ldw	r23,28(sp)
   11bc8:	dd800617 	ldw	r22,24(sp)
   11bcc:	dd400517 	ldw	r21,20(sp)
   11bd0:	dd000417 	ldw	r20,16(sp)
   11bd4:	dcc00317 	ldw	r19,12(sp)
   11bd8:	dc800217 	ldw	r18,8(sp)
   11bdc:	dc400117 	ldw	r17,4(sp)
   11be0:	dc000017 	ldw	r16,0(sp)
   11be4:	dec00a04 	addi	sp,sp,40
   11be8:	f800283a 	ret
   11bec:	017fff04 	movi	r5,-4
   11bf0:	414a703a 	and	r5,r8,r5
   11bf4:	814d883a 	add	r6,r16,r5
   11bf8:	30c01f16 	blt	r6,r3,11c78 <_realloc_r+0x22c>
   11bfc:	20800317 	ldw	r2,12(r4)
   11c00:	20c00217 	ldw	r3,8(r4)
   11c04:	a825883a 	mov	r18,r21
   11c08:	3021883a 	mov	r16,r6
   11c0c:	18800315 	stw	r2,12(r3)
   11c10:	10c00215 	stw	r3,8(r2)
   11c14:	003fdb06 	br	11b84 <__alt_data_end+0xffff1b84>
   11c18:	00800304 	movi	r2,12
   11c1c:	a0800015 	stw	r2,0(r20)
   11c20:	0005883a 	mov	r2,zero
   11c24:	003fe506 	br	11bbc <__alt_data_end+0xffff1bbc>
   11c28:	98c00117 	ldw	r3,4(r19)
   11c2c:	9c4b883a 	add	r5,r19,r17
   11c30:	11000054 	ori	r4,r2,1
   11c34:	18c0004c 	andi	r3,r3,1
   11c38:	1c62b03a 	or	r17,r3,r17
   11c3c:	9c400115 	stw	r17,4(r19)
   11c40:	29000115 	stw	r4,4(r5)
   11c44:	2885883a 	add	r2,r5,r2
   11c48:	10c00117 	ldw	r3,4(r2)
   11c4c:	29400204 	addi	r5,r5,8
   11c50:	a009883a 	mov	r4,r20
   11c54:	18c00054 	ori	r3,r3,1
   11c58:	10c00115 	stw	r3,4(r2)
   11c5c:	00128180 	call	12818 <_free_r>
   11c60:	003fd306 	br	11bb0 <__alt_data_end+0xffff1bb0>
   11c64:	017fff04 	movi	r5,-4
   11c68:	414a703a 	and	r5,r8,r5
   11c6c:	89800404 	addi	r6,r17,16
   11c70:	8151883a 	add	r8,r16,r5
   11c74:	4180590e 	bge	r8,r6,11ddc <_realloc_r+0x390>
   11c78:	1080004c 	andi	r2,r2,1
   11c7c:	103f9e1e 	bne	r2,zero,11af8 <__alt_data_end+0xffff1af8>
   11c80:	adbffe17 	ldw	r22,-8(r21)
   11c84:	00bfff04 	movi	r2,-4
   11c88:	9dadc83a 	sub	r22,r19,r22
   11c8c:	b1800117 	ldw	r6,4(r22)
   11c90:	3084703a 	and	r2,r6,r2
   11c94:	20002026 	beq	r4,zero,11d18 <_realloc_r+0x2cc>
   11c98:	80af883a 	add	r23,r16,r2
   11c9c:	b96f883a 	add	r23,r23,r5
   11ca0:	21c05f26 	beq	r4,r7,11e20 <_realloc_r+0x3d4>
   11ca4:	b8c01c16 	blt	r23,r3,11d18 <_realloc_r+0x2cc>
   11ca8:	20800317 	ldw	r2,12(r4)
   11cac:	20c00217 	ldw	r3,8(r4)
   11cb0:	81bfff04 	addi	r6,r16,-4
   11cb4:	01000904 	movi	r4,36
   11cb8:	18800315 	stw	r2,12(r3)
   11cbc:	10c00215 	stw	r3,8(r2)
   11cc0:	b0c00217 	ldw	r3,8(r22)
   11cc4:	b0800317 	ldw	r2,12(r22)
   11cc8:	b4800204 	addi	r18,r22,8
   11ccc:	18800315 	stw	r2,12(r3)
   11cd0:	10c00215 	stw	r3,8(r2)
   11cd4:	21801b36 	bltu	r4,r6,11d44 <_realloc_r+0x2f8>
   11cd8:	008004c4 	movi	r2,19
   11cdc:	1180352e 	bgeu	r2,r6,11db4 <_realloc_r+0x368>
   11ce0:	a8800017 	ldw	r2,0(r21)
   11ce4:	b0800215 	stw	r2,8(r22)
   11ce8:	a8800117 	ldw	r2,4(r21)
   11cec:	b0800315 	stw	r2,12(r22)
   11cf0:	008006c4 	movi	r2,27
   11cf4:	11807f36 	bltu	r2,r6,11ef4 <_realloc_r+0x4a8>
   11cf8:	b0800404 	addi	r2,r22,16
   11cfc:	ad400204 	addi	r21,r21,8
   11d00:	00002d06 	br	11db8 <_realloc_r+0x36c>
   11d04:	adbffe17 	ldw	r22,-8(r21)
   11d08:	00bfff04 	movi	r2,-4
   11d0c:	9dadc83a 	sub	r22,r19,r22
   11d10:	b1000117 	ldw	r4,4(r22)
   11d14:	2084703a 	and	r2,r4,r2
   11d18:	b03f7726 	beq	r22,zero,11af8 <__alt_data_end+0xffff1af8>
   11d1c:	80af883a 	add	r23,r16,r2
   11d20:	b8ff7516 	blt	r23,r3,11af8 <__alt_data_end+0xffff1af8>
   11d24:	b0800317 	ldw	r2,12(r22)
   11d28:	b0c00217 	ldw	r3,8(r22)
   11d2c:	81bfff04 	addi	r6,r16,-4
   11d30:	01000904 	movi	r4,36
   11d34:	18800315 	stw	r2,12(r3)
   11d38:	10c00215 	stw	r3,8(r2)
   11d3c:	b4800204 	addi	r18,r22,8
   11d40:	21bfe52e 	bgeu	r4,r6,11cd8 <__alt_data_end+0xffff1cd8>
   11d44:	a80b883a 	mov	r5,r21
   11d48:	9009883a 	mov	r4,r18
   11d4c:	00117c80 	call	117c8 <memmove>
   11d50:	b821883a 	mov	r16,r23
   11d54:	b027883a 	mov	r19,r22
   11d58:	003f8a06 	br	11b84 <__alt_data_end+0xffff1b84>
   11d5c:	300b883a 	mov	r5,r6
   11d60:	dfc00917 	ldw	ra,36(sp)
   11d64:	df000817 	ldw	fp,32(sp)
   11d68:	ddc00717 	ldw	r23,28(sp)
   11d6c:	dd800617 	ldw	r22,24(sp)
   11d70:	dd400517 	ldw	r21,20(sp)
   11d74:	dd000417 	ldw	r20,16(sp)
   11d78:	dcc00317 	ldw	r19,12(sp)
   11d7c:	dc800217 	ldw	r18,8(sp)
   11d80:	dc400117 	ldw	r17,4(sp)
   11d84:	dc000017 	ldw	r16,0(sp)
   11d88:	dec00a04 	addi	sp,sp,40
   11d8c:	0010d901 	jmpi	10d90 <_malloc_r>
   11d90:	a8c00017 	ldw	r3,0(r21)
   11d94:	90c00015 	stw	r3,0(r18)
   11d98:	a8c00117 	ldw	r3,4(r21)
   11d9c:	90c00115 	stw	r3,4(r18)
   11da0:	00c006c4 	movi	r3,27
   11da4:	19804536 	bltu	r3,r6,11ebc <_realloc_r+0x470>
   11da8:	90800204 	addi	r2,r18,8
   11dac:	a8c00204 	addi	r3,r21,8
   11db0:	003f6306 	br	11b40 <__alt_data_end+0xffff1b40>
   11db4:	9005883a 	mov	r2,r18
   11db8:	a8c00017 	ldw	r3,0(r21)
   11dbc:	b821883a 	mov	r16,r23
   11dc0:	b027883a 	mov	r19,r22
   11dc4:	10c00015 	stw	r3,0(r2)
   11dc8:	a8c00117 	ldw	r3,4(r21)
   11dcc:	10c00115 	stw	r3,4(r2)
   11dd0:	a8c00217 	ldw	r3,8(r21)
   11dd4:	10c00215 	stw	r3,8(r2)
   11dd8:	003f6a06 	br	11b84 <__alt_data_end+0xffff1b84>
   11ddc:	9c67883a 	add	r19,r19,r17
   11de0:	4445c83a 	sub	r2,r8,r17
   11de4:	e4c00215 	stw	r19,8(fp)
   11de8:	10800054 	ori	r2,r2,1
   11dec:	98800115 	stw	r2,4(r19)
   11df0:	a8bfff17 	ldw	r2,-4(r21)
   11df4:	a009883a 	mov	r4,r20
   11df8:	1080004c 	andi	r2,r2,1
   11dfc:	1462b03a 	or	r17,r2,r17
   11e00:	ac7fff15 	stw	r17,-4(r21)
   11e04:	00135a80 	call	135a8 <__malloc_unlock>
   11e08:	a805883a 	mov	r2,r21
   11e0c:	003f6b06 	br	11bbc <__alt_data_end+0xffff1bbc>
   11e10:	a80b883a 	mov	r5,r21
   11e14:	9009883a 	mov	r4,r18
   11e18:	00117c80 	call	117c8 <memmove>
   11e1c:	003f4e06 	br	11b58 <__alt_data_end+0xffff1b58>
   11e20:	89000404 	addi	r4,r17,16
   11e24:	b93fbc16 	blt	r23,r4,11d18 <__alt_data_end+0xffff1d18>
   11e28:	b0800317 	ldw	r2,12(r22)
   11e2c:	b0c00217 	ldw	r3,8(r22)
   11e30:	81bfff04 	addi	r6,r16,-4
   11e34:	01000904 	movi	r4,36
   11e38:	18800315 	stw	r2,12(r3)
   11e3c:	10c00215 	stw	r3,8(r2)
   11e40:	b4800204 	addi	r18,r22,8
   11e44:	21804336 	bltu	r4,r6,11f54 <_realloc_r+0x508>
   11e48:	008004c4 	movi	r2,19
   11e4c:	11803f2e 	bgeu	r2,r6,11f4c <_realloc_r+0x500>
   11e50:	a8800017 	ldw	r2,0(r21)
   11e54:	b0800215 	stw	r2,8(r22)
   11e58:	a8800117 	ldw	r2,4(r21)
   11e5c:	b0800315 	stw	r2,12(r22)
   11e60:	008006c4 	movi	r2,27
   11e64:	11803f36 	bltu	r2,r6,11f64 <_realloc_r+0x518>
   11e68:	b0800404 	addi	r2,r22,16
   11e6c:	ad400204 	addi	r21,r21,8
   11e70:	a8c00017 	ldw	r3,0(r21)
   11e74:	10c00015 	stw	r3,0(r2)
   11e78:	a8c00117 	ldw	r3,4(r21)
   11e7c:	10c00115 	stw	r3,4(r2)
   11e80:	a8c00217 	ldw	r3,8(r21)
   11e84:	10c00215 	stw	r3,8(r2)
   11e88:	b447883a 	add	r3,r22,r17
   11e8c:	bc45c83a 	sub	r2,r23,r17
   11e90:	e0c00215 	stw	r3,8(fp)
   11e94:	10800054 	ori	r2,r2,1
   11e98:	18800115 	stw	r2,4(r3)
   11e9c:	b0800117 	ldw	r2,4(r22)
   11ea0:	a009883a 	mov	r4,r20
   11ea4:	1080004c 	andi	r2,r2,1
   11ea8:	1462b03a 	or	r17,r2,r17
   11eac:	b4400115 	stw	r17,4(r22)
   11eb0:	00135a80 	call	135a8 <__malloc_unlock>
   11eb4:	9005883a 	mov	r2,r18
   11eb8:	003f4006 	br	11bbc <__alt_data_end+0xffff1bbc>
   11ebc:	a8c00217 	ldw	r3,8(r21)
   11ec0:	90c00215 	stw	r3,8(r18)
   11ec4:	a8c00317 	ldw	r3,12(r21)
   11ec8:	90c00315 	stw	r3,12(r18)
   11ecc:	30801126 	beq	r6,r2,11f14 <_realloc_r+0x4c8>
   11ed0:	90800404 	addi	r2,r18,16
   11ed4:	a8c00404 	addi	r3,r21,16
   11ed8:	003f1906 	br	11b40 <__alt_data_end+0xffff1b40>
   11edc:	90ffff17 	ldw	r3,-4(r18)
   11ee0:	00bfff04 	movi	r2,-4
   11ee4:	a825883a 	mov	r18,r21
   11ee8:	1884703a 	and	r2,r3,r2
   11eec:	80a1883a 	add	r16,r16,r2
   11ef0:	003f2406 	br	11b84 <__alt_data_end+0xffff1b84>
   11ef4:	a8800217 	ldw	r2,8(r21)
   11ef8:	b0800415 	stw	r2,16(r22)
   11efc:	a8800317 	ldw	r2,12(r21)
   11f00:	b0800515 	stw	r2,20(r22)
   11f04:	31000a26 	beq	r6,r4,11f30 <_realloc_r+0x4e4>
   11f08:	b0800604 	addi	r2,r22,24
   11f0c:	ad400404 	addi	r21,r21,16
   11f10:	003fa906 	br	11db8 <__alt_data_end+0xffff1db8>
   11f14:	a9000417 	ldw	r4,16(r21)
   11f18:	90800604 	addi	r2,r18,24
   11f1c:	a8c00604 	addi	r3,r21,24
   11f20:	91000415 	stw	r4,16(r18)
   11f24:	a9000517 	ldw	r4,20(r21)
   11f28:	91000515 	stw	r4,20(r18)
   11f2c:	003f0406 	br	11b40 <__alt_data_end+0xffff1b40>
   11f30:	a8c00417 	ldw	r3,16(r21)
   11f34:	ad400604 	addi	r21,r21,24
   11f38:	b0800804 	addi	r2,r22,32
   11f3c:	b0c00615 	stw	r3,24(r22)
   11f40:	a8ffff17 	ldw	r3,-4(r21)
   11f44:	b0c00715 	stw	r3,28(r22)
   11f48:	003f9b06 	br	11db8 <__alt_data_end+0xffff1db8>
   11f4c:	9005883a 	mov	r2,r18
   11f50:	003fc706 	br	11e70 <__alt_data_end+0xffff1e70>
   11f54:	a80b883a 	mov	r5,r21
   11f58:	9009883a 	mov	r4,r18
   11f5c:	00117c80 	call	117c8 <memmove>
   11f60:	003fc906 	br	11e88 <__alt_data_end+0xffff1e88>
   11f64:	a8800217 	ldw	r2,8(r21)
   11f68:	b0800415 	stw	r2,16(r22)
   11f6c:	a8800317 	ldw	r2,12(r21)
   11f70:	b0800515 	stw	r2,20(r22)
   11f74:	31000726 	beq	r6,r4,11f94 <_realloc_r+0x548>
   11f78:	b0800604 	addi	r2,r22,24
   11f7c:	ad400404 	addi	r21,r21,16
   11f80:	003fbb06 	br	11e70 <__alt_data_end+0xffff1e70>
   11f84:	a009883a 	mov	r4,r20
   11f88:	00135a80 	call	135a8 <__malloc_unlock>
   11f8c:	0005883a 	mov	r2,zero
   11f90:	003f0a06 	br	11bbc <__alt_data_end+0xffff1bbc>
   11f94:	a8c00417 	ldw	r3,16(r21)
   11f98:	ad400604 	addi	r21,r21,24
   11f9c:	b0800804 	addi	r2,r22,32
   11fa0:	b0c00615 	stw	r3,24(r22)
   11fa4:	a8ffff17 	ldw	r3,-4(r21)
   11fa8:	b0c00715 	stw	r3,28(r22)
   11fac:	003fb006 	br	11e70 <__alt_data_end+0xffff1e70>

00011fb0 <_sbrk_r>:
   11fb0:	defffd04 	addi	sp,sp,-12
   11fb4:	dc000015 	stw	r16,0(sp)
   11fb8:	04000074 	movhi	r16,1
   11fbc:	dc400115 	stw	r17,4(sp)
   11fc0:	84189f04 	addi	r16,r16,25212
   11fc4:	2023883a 	mov	r17,r4
   11fc8:	2809883a 	mov	r4,r5
   11fcc:	dfc00215 	stw	ra,8(sp)
   11fd0:	80000015 	stw	zero,0(r16)
   11fd4:	00137680 	call	13768 <sbrk>
   11fd8:	00ffffc4 	movi	r3,-1
   11fdc:	10c00526 	beq	r2,r3,11ff4 <_sbrk_r+0x44>
   11fe0:	dfc00217 	ldw	ra,8(sp)
   11fe4:	dc400117 	ldw	r17,4(sp)
   11fe8:	dc000017 	ldw	r16,0(sp)
   11fec:	dec00304 	addi	sp,sp,12
   11ff0:	f800283a 	ret
   11ff4:	80c00017 	ldw	r3,0(r16)
   11ff8:	183ff926 	beq	r3,zero,11fe0 <__alt_data_end+0xffff1fe0>
   11ffc:	88c00015 	stw	r3,0(r17)
   12000:	003ff706 	br	11fe0 <__alt_data_end+0xffff1fe0>

00012004 <__sread>:
   12004:	defffe04 	addi	sp,sp,-8
   12008:	dc000015 	stw	r16,0(sp)
   1200c:	2821883a 	mov	r16,r5
   12010:	2940038f 	ldh	r5,14(r5)
   12014:	dfc00115 	stw	ra,4(sp)
   12018:	0012d440 	call	12d44 <_read_r>
   1201c:	10000716 	blt	r2,zero,1203c <__sread+0x38>
   12020:	80c01417 	ldw	r3,80(r16)
   12024:	1887883a 	add	r3,r3,r2
   12028:	80c01415 	stw	r3,80(r16)
   1202c:	dfc00117 	ldw	ra,4(sp)
   12030:	dc000017 	ldw	r16,0(sp)
   12034:	dec00204 	addi	sp,sp,8
   12038:	f800283a 	ret
   1203c:	80c0030b 	ldhu	r3,12(r16)
   12040:	18fbffcc 	andi	r3,r3,61439
   12044:	80c0030d 	sth	r3,12(r16)
   12048:	dfc00117 	ldw	ra,4(sp)
   1204c:	dc000017 	ldw	r16,0(sp)
   12050:	dec00204 	addi	sp,sp,8
   12054:	f800283a 	ret

00012058 <__seofread>:
   12058:	0005883a 	mov	r2,zero
   1205c:	f800283a 	ret

00012060 <__swrite>:
   12060:	2880030b 	ldhu	r2,12(r5)
   12064:	defffb04 	addi	sp,sp,-20
   12068:	dcc00315 	stw	r19,12(sp)
   1206c:	dc800215 	stw	r18,8(sp)
   12070:	dc400115 	stw	r17,4(sp)
   12074:	dc000015 	stw	r16,0(sp)
   12078:	dfc00415 	stw	ra,16(sp)
   1207c:	10c0400c 	andi	r3,r2,256
   12080:	2821883a 	mov	r16,r5
   12084:	2023883a 	mov	r17,r4
   12088:	3025883a 	mov	r18,r6
   1208c:	3827883a 	mov	r19,r7
   12090:	18000526 	beq	r3,zero,120a8 <__swrite+0x48>
   12094:	2940038f 	ldh	r5,14(r5)
   12098:	01c00084 	movi	r7,2
   1209c:	000d883a 	mov	r6,zero
   120a0:	0012b280 	call	12b28 <_lseek_r>
   120a4:	8080030b 	ldhu	r2,12(r16)
   120a8:	8140038f 	ldh	r5,14(r16)
   120ac:	10bbffcc 	andi	r2,r2,61439
   120b0:	980f883a 	mov	r7,r19
   120b4:	900d883a 	mov	r6,r18
   120b8:	8809883a 	mov	r4,r17
   120bc:	8080030d 	sth	r2,12(r16)
   120c0:	dfc00417 	ldw	ra,16(sp)
   120c4:	dcc00317 	ldw	r19,12(sp)
   120c8:	dc800217 	ldw	r18,8(sp)
   120cc:	dc400117 	ldw	r17,4(sp)
   120d0:	dc000017 	ldw	r16,0(sp)
   120d4:	dec00504 	addi	sp,sp,20
   120d8:	00121401 	jmpi	12140 <_write_r>

000120dc <__sseek>:
   120dc:	defffe04 	addi	sp,sp,-8
   120e0:	dc000015 	stw	r16,0(sp)
   120e4:	2821883a 	mov	r16,r5
   120e8:	2940038f 	ldh	r5,14(r5)
   120ec:	dfc00115 	stw	ra,4(sp)
   120f0:	0012b280 	call	12b28 <_lseek_r>
   120f4:	00ffffc4 	movi	r3,-1
   120f8:	10c00826 	beq	r2,r3,1211c <__sseek+0x40>
   120fc:	80c0030b 	ldhu	r3,12(r16)
   12100:	80801415 	stw	r2,80(r16)
   12104:	18c40014 	ori	r3,r3,4096
   12108:	80c0030d 	sth	r3,12(r16)
   1210c:	dfc00117 	ldw	ra,4(sp)
   12110:	dc000017 	ldw	r16,0(sp)
   12114:	dec00204 	addi	sp,sp,8
   12118:	f800283a 	ret
   1211c:	80c0030b 	ldhu	r3,12(r16)
   12120:	18fbffcc 	andi	r3,r3,61439
   12124:	80c0030d 	sth	r3,12(r16)
   12128:	dfc00117 	ldw	ra,4(sp)
   1212c:	dc000017 	ldw	r16,0(sp)
   12130:	dec00204 	addi	sp,sp,8
   12134:	f800283a 	ret

00012138 <__sclose>:
   12138:	2940038f 	ldh	r5,14(r5)
   1213c:	00122f41 	jmpi	122f4 <_close_r>

00012140 <_write_r>:
   12140:	defffd04 	addi	sp,sp,-12
   12144:	2805883a 	mov	r2,r5
   12148:	dc000015 	stw	r16,0(sp)
   1214c:	04000074 	movhi	r16,1
   12150:	dc400115 	stw	r17,4(sp)
   12154:	300b883a 	mov	r5,r6
   12158:	84189f04 	addi	r16,r16,25212
   1215c:	2023883a 	mov	r17,r4
   12160:	380d883a 	mov	r6,r7
   12164:	1009883a 	mov	r4,r2
   12168:	dfc00215 	stw	ra,8(sp)
   1216c:	80000015 	stw	zero,0(r16)
   12170:	00138540 	call	13854 <write>
   12174:	00ffffc4 	movi	r3,-1
   12178:	10c00526 	beq	r2,r3,12190 <_write_r+0x50>
   1217c:	dfc00217 	ldw	ra,8(sp)
   12180:	dc400117 	ldw	r17,4(sp)
   12184:	dc000017 	ldw	r16,0(sp)
   12188:	dec00304 	addi	sp,sp,12
   1218c:	f800283a 	ret
   12190:	80c00017 	ldw	r3,0(r16)
   12194:	183ff926 	beq	r3,zero,1217c <__alt_data_end+0xffff217c>
   12198:	88c00015 	stw	r3,0(r17)
   1219c:	003ff706 	br	1217c <__alt_data_end+0xffff217c>

000121a0 <__swsetup_r>:
   121a0:	00800074 	movhi	r2,1
   121a4:	defffd04 	addi	sp,sp,-12
   121a8:	10960104 	addi	r2,r2,22532
   121ac:	dc400115 	stw	r17,4(sp)
   121b0:	2023883a 	mov	r17,r4
   121b4:	11000017 	ldw	r4,0(r2)
   121b8:	dc000015 	stw	r16,0(sp)
   121bc:	dfc00215 	stw	ra,8(sp)
   121c0:	2821883a 	mov	r16,r5
   121c4:	20000226 	beq	r4,zero,121d0 <__swsetup_r+0x30>
   121c8:	20800e17 	ldw	r2,56(r4)
   121cc:	10003126 	beq	r2,zero,12294 <__swsetup_r+0xf4>
   121d0:	8080030b 	ldhu	r2,12(r16)
   121d4:	10c0020c 	andi	r3,r2,8
   121d8:	1009883a 	mov	r4,r2
   121dc:	18000f26 	beq	r3,zero,1221c <__swsetup_r+0x7c>
   121e0:	80c00417 	ldw	r3,16(r16)
   121e4:	18001526 	beq	r3,zero,1223c <__swsetup_r+0x9c>
   121e8:	1100004c 	andi	r4,r2,1
   121ec:	20001c1e 	bne	r4,zero,12260 <__swsetup_r+0xc0>
   121f0:	1080008c 	andi	r2,r2,2
   121f4:	1000291e 	bne	r2,zero,1229c <__swsetup_r+0xfc>
   121f8:	80800517 	ldw	r2,20(r16)
   121fc:	80800215 	stw	r2,8(r16)
   12200:	18001c26 	beq	r3,zero,12274 <__swsetup_r+0xd4>
   12204:	0005883a 	mov	r2,zero
   12208:	dfc00217 	ldw	ra,8(sp)
   1220c:	dc400117 	ldw	r17,4(sp)
   12210:	dc000017 	ldw	r16,0(sp)
   12214:	dec00304 	addi	sp,sp,12
   12218:	f800283a 	ret
   1221c:	2080040c 	andi	r2,r4,16
   12220:	10002e26 	beq	r2,zero,122dc <__swsetup_r+0x13c>
   12224:	2080010c 	andi	r2,r4,4
   12228:	10001e1e 	bne	r2,zero,122a4 <__swsetup_r+0x104>
   1222c:	80c00417 	ldw	r3,16(r16)
   12230:	20800214 	ori	r2,r4,8
   12234:	8080030d 	sth	r2,12(r16)
   12238:	183feb1e 	bne	r3,zero,121e8 <__alt_data_end+0xffff21e8>
   1223c:	1100a00c 	andi	r4,r2,640
   12240:	01408004 	movi	r5,512
   12244:	217fe826 	beq	r4,r5,121e8 <__alt_data_end+0xffff21e8>
   12248:	800b883a 	mov	r5,r16
   1224c:	8809883a 	mov	r4,r17
   12250:	0012b880 	call	12b88 <__smakebuf_r>
   12254:	8080030b 	ldhu	r2,12(r16)
   12258:	80c00417 	ldw	r3,16(r16)
   1225c:	003fe206 	br	121e8 <__alt_data_end+0xffff21e8>
   12260:	80800517 	ldw	r2,20(r16)
   12264:	80000215 	stw	zero,8(r16)
   12268:	0085c83a 	sub	r2,zero,r2
   1226c:	80800615 	stw	r2,24(r16)
   12270:	183fe41e 	bne	r3,zero,12204 <__alt_data_end+0xffff2204>
   12274:	80c0030b 	ldhu	r3,12(r16)
   12278:	0005883a 	mov	r2,zero
   1227c:	1900200c 	andi	r4,r3,128
   12280:	203fe126 	beq	r4,zero,12208 <__alt_data_end+0xffff2208>
   12284:	18c01014 	ori	r3,r3,64
   12288:	80c0030d 	sth	r3,12(r16)
   1228c:	00bfffc4 	movi	r2,-1
   12290:	003fdd06 	br	12208 <__alt_data_end+0xffff2208>
   12294:	00106fc0 	call	106fc <__sinit>
   12298:	003fcd06 	br	121d0 <__alt_data_end+0xffff21d0>
   1229c:	0005883a 	mov	r2,zero
   122a0:	003fd606 	br	121fc <__alt_data_end+0xffff21fc>
   122a4:	81400c17 	ldw	r5,48(r16)
   122a8:	28000626 	beq	r5,zero,122c4 <__swsetup_r+0x124>
   122ac:	80801004 	addi	r2,r16,64
   122b0:	28800326 	beq	r5,r2,122c0 <__swsetup_r+0x120>
   122b4:	8809883a 	mov	r4,r17
   122b8:	00128180 	call	12818 <_free_r>
   122bc:	8100030b 	ldhu	r4,12(r16)
   122c0:	80000c15 	stw	zero,48(r16)
   122c4:	80c00417 	ldw	r3,16(r16)
   122c8:	00bff6c4 	movi	r2,-37
   122cc:	1108703a 	and	r4,r2,r4
   122d0:	80000115 	stw	zero,4(r16)
   122d4:	80c00015 	stw	r3,0(r16)
   122d8:	003fd506 	br	12230 <__alt_data_end+0xffff2230>
   122dc:	00800244 	movi	r2,9
   122e0:	88800015 	stw	r2,0(r17)
   122e4:	20801014 	ori	r2,r4,64
   122e8:	8080030d 	sth	r2,12(r16)
   122ec:	00bfffc4 	movi	r2,-1
   122f0:	003fc506 	br	12208 <__alt_data_end+0xffff2208>

000122f4 <_close_r>:
   122f4:	defffd04 	addi	sp,sp,-12
   122f8:	dc000015 	stw	r16,0(sp)
   122fc:	04000074 	movhi	r16,1
   12300:	dc400115 	stw	r17,4(sp)
   12304:	84189f04 	addi	r16,r16,25212
   12308:	2023883a 	mov	r17,r4
   1230c:	2809883a 	mov	r4,r5
   12310:	dfc00215 	stw	ra,8(sp)
   12314:	80000015 	stw	zero,0(r16)
   12318:	00130440 	call	13044 <close>
   1231c:	00ffffc4 	movi	r3,-1
   12320:	10c00526 	beq	r2,r3,12338 <_close_r+0x44>
   12324:	dfc00217 	ldw	ra,8(sp)
   12328:	dc400117 	ldw	r17,4(sp)
   1232c:	dc000017 	ldw	r16,0(sp)
   12330:	dec00304 	addi	sp,sp,12
   12334:	f800283a 	ret
   12338:	80c00017 	ldw	r3,0(r16)
   1233c:	183ff926 	beq	r3,zero,12324 <__alt_data_end+0xffff2324>
   12340:	88c00015 	stw	r3,0(r17)
   12344:	003ff706 	br	12324 <__alt_data_end+0xffff2324>

00012348 <_fclose_r>:
   12348:	28003926 	beq	r5,zero,12430 <_fclose_r+0xe8>
   1234c:	defffc04 	addi	sp,sp,-16
   12350:	dc400115 	stw	r17,4(sp)
   12354:	dc000015 	stw	r16,0(sp)
   12358:	dfc00315 	stw	ra,12(sp)
   1235c:	dc800215 	stw	r18,8(sp)
   12360:	2023883a 	mov	r17,r4
   12364:	2821883a 	mov	r16,r5
   12368:	20000226 	beq	r4,zero,12374 <_fclose_r+0x2c>
   1236c:	20800e17 	ldw	r2,56(r4)
   12370:	10002726 	beq	r2,zero,12410 <_fclose_r+0xc8>
   12374:	8080030f 	ldh	r2,12(r16)
   12378:	1000071e 	bne	r2,zero,12398 <_fclose_r+0x50>
   1237c:	0005883a 	mov	r2,zero
   12380:	dfc00317 	ldw	ra,12(sp)
   12384:	dc800217 	ldw	r18,8(sp)
   12388:	dc400117 	ldw	r17,4(sp)
   1238c:	dc000017 	ldw	r16,0(sp)
   12390:	dec00404 	addi	sp,sp,16
   12394:	f800283a 	ret
   12398:	800b883a 	mov	r5,r16
   1239c:	8809883a 	mov	r4,r17
   123a0:	001244c0 	call	1244c <__sflush_r>
   123a4:	1025883a 	mov	r18,r2
   123a8:	80800b17 	ldw	r2,44(r16)
   123ac:	10000426 	beq	r2,zero,123c0 <_fclose_r+0x78>
   123b0:	81400717 	ldw	r5,28(r16)
   123b4:	8809883a 	mov	r4,r17
   123b8:	103ee83a 	callr	r2
   123bc:	10001616 	blt	r2,zero,12418 <_fclose_r+0xd0>
   123c0:	8080030b 	ldhu	r2,12(r16)
   123c4:	1080200c 	andi	r2,r2,128
   123c8:	1000151e 	bne	r2,zero,12420 <_fclose_r+0xd8>
   123cc:	81400c17 	ldw	r5,48(r16)
   123d0:	28000526 	beq	r5,zero,123e8 <_fclose_r+0xa0>
   123d4:	80801004 	addi	r2,r16,64
   123d8:	28800226 	beq	r5,r2,123e4 <_fclose_r+0x9c>
   123dc:	8809883a 	mov	r4,r17
   123e0:	00128180 	call	12818 <_free_r>
   123e4:	80000c15 	stw	zero,48(r16)
   123e8:	81401117 	ldw	r5,68(r16)
   123ec:	28000326 	beq	r5,zero,123fc <_fclose_r+0xb4>
   123f0:	8809883a 	mov	r4,r17
   123f4:	00128180 	call	12818 <_free_r>
   123f8:	80001115 	stw	zero,68(r16)
   123fc:	001070c0 	call	1070c <__sfp_lock_acquire>
   12400:	8000030d 	sth	zero,12(r16)
   12404:	00107100 	call	10710 <__sfp_lock_release>
   12408:	9005883a 	mov	r2,r18
   1240c:	003fdc06 	br	12380 <__alt_data_end+0xffff2380>
   12410:	00106fc0 	call	106fc <__sinit>
   12414:	003fd706 	br	12374 <__alt_data_end+0xffff2374>
   12418:	04bfffc4 	movi	r18,-1
   1241c:	003fe806 	br	123c0 <__alt_data_end+0xffff23c0>
   12420:	81400417 	ldw	r5,16(r16)
   12424:	8809883a 	mov	r4,r17
   12428:	00128180 	call	12818 <_free_r>
   1242c:	003fe706 	br	123cc <__alt_data_end+0xffff23cc>
   12430:	0005883a 	mov	r2,zero
   12434:	f800283a 	ret

00012438 <fclose>:
   12438:	00800074 	movhi	r2,1
   1243c:	10960104 	addi	r2,r2,22532
   12440:	200b883a 	mov	r5,r4
   12444:	11000017 	ldw	r4,0(r2)
   12448:	00123481 	jmpi	12348 <_fclose_r>

0001244c <__sflush_r>:
   1244c:	2880030b 	ldhu	r2,12(r5)
   12450:	defffb04 	addi	sp,sp,-20
   12454:	dcc00315 	stw	r19,12(sp)
   12458:	dc400115 	stw	r17,4(sp)
   1245c:	dfc00415 	stw	ra,16(sp)
   12460:	dc800215 	stw	r18,8(sp)
   12464:	dc000015 	stw	r16,0(sp)
   12468:	10c0020c 	andi	r3,r2,8
   1246c:	2823883a 	mov	r17,r5
   12470:	2027883a 	mov	r19,r4
   12474:	1800311e 	bne	r3,zero,1253c <__sflush_r+0xf0>
   12478:	28c00117 	ldw	r3,4(r5)
   1247c:	10820014 	ori	r2,r2,2048
   12480:	2880030d 	sth	r2,12(r5)
   12484:	00c04b0e 	bge	zero,r3,125b4 <__sflush_r+0x168>
   12488:	8a000a17 	ldw	r8,40(r17)
   1248c:	40002326 	beq	r8,zero,1251c <__sflush_r+0xd0>
   12490:	9c000017 	ldw	r16,0(r19)
   12494:	10c4000c 	andi	r3,r2,4096
   12498:	98000015 	stw	zero,0(r19)
   1249c:	18004826 	beq	r3,zero,125c0 <__sflush_r+0x174>
   124a0:	89801417 	ldw	r6,80(r17)
   124a4:	10c0010c 	andi	r3,r2,4
   124a8:	18000626 	beq	r3,zero,124c4 <__sflush_r+0x78>
   124ac:	88c00117 	ldw	r3,4(r17)
   124b0:	88800c17 	ldw	r2,48(r17)
   124b4:	30cdc83a 	sub	r6,r6,r3
   124b8:	10000226 	beq	r2,zero,124c4 <__sflush_r+0x78>
   124bc:	88800f17 	ldw	r2,60(r17)
   124c0:	308dc83a 	sub	r6,r6,r2
   124c4:	89400717 	ldw	r5,28(r17)
   124c8:	000f883a 	mov	r7,zero
   124cc:	9809883a 	mov	r4,r19
   124d0:	403ee83a 	callr	r8
   124d4:	00ffffc4 	movi	r3,-1
   124d8:	10c04426 	beq	r2,r3,125ec <__sflush_r+0x1a0>
   124dc:	88c0030b 	ldhu	r3,12(r17)
   124e0:	89000417 	ldw	r4,16(r17)
   124e4:	88000115 	stw	zero,4(r17)
   124e8:	197dffcc 	andi	r5,r3,63487
   124ec:	8940030d 	sth	r5,12(r17)
   124f0:	89000015 	stw	r4,0(r17)
   124f4:	18c4000c 	andi	r3,r3,4096
   124f8:	18002c1e 	bne	r3,zero,125ac <__sflush_r+0x160>
   124fc:	89400c17 	ldw	r5,48(r17)
   12500:	9c000015 	stw	r16,0(r19)
   12504:	28000526 	beq	r5,zero,1251c <__sflush_r+0xd0>
   12508:	88801004 	addi	r2,r17,64
   1250c:	28800226 	beq	r5,r2,12518 <__sflush_r+0xcc>
   12510:	9809883a 	mov	r4,r19
   12514:	00128180 	call	12818 <_free_r>
   12518:	88000c15 	stw	zero,48(r17)
   1251c:	0005883a 	mov	r2,zero
   12520:	dfc00417 	ldw	ra,16(sp)
   12524:	dcc00317 	ldw	r19,12(sp)
   12528:	dc800217 	ldw	r18,8(sp)
   1252c:	dc400117 	ldw	r17,4(sp)
   12530:	dc000017 	ldw	r16,0(sp)
   12534:	dec00504 	addi	sp,sp,20
   12538:	f800283a 	ret
   1253c:	2c800417 	ldw	r18,16(r5)
   12540:	903ff626 	beq	r18,zero,1251c <__alt_data_end+0xffff251c>
   12544:	2c000017 	ldw	r16,0(r5)
   12548:	108000cc 	andi	r2,r2,3
   1254c:	2c800015 	stw	r18,0(r5)
   12550:	84a1c83a 	sub	r16,r16,r18
   12554:	1000131e 	bne	r2,zero,125a4 <__sflush_r+0x158>
   12558:	28800517 	ldw	r2,20(r5)
   1255c:	88800215 	stw	r2,8(r17)
   12560:	04000316 	blt	zero,r16,12570 <__sflush_r+0x124>
   12564:	003fed06 	br	1251c <__alt_data_end+0xffff251c>
   12568:	90a5883a 	add	r18,r18,r2
   1256c:	043feb0e 	bge	zero,r16,1251c <__alt_data_end+0xffff251c>
   12570:	88800917 	ldw	r2,36(r17)
   12574:	89400717 	ldw	r5,28(r17)
   12578:	800f883a 	mov	r7,r16
   1257c:	900d883a 	mov	r6,r18
   12580:	9809883a 	mov	r4,r19
   12584:	103ee83a 	callr	r2
   12588:	80a1c83a 	sub	r16,r16,r2
   1258c:	00bff616 	blt	zero,r2,12568 <__alt_data_end+0xffff2568>
   12590:	88c0030b 	ldhu	r3,12(r17)
   12594:	00bfffc4 	movi	r2,-1
   12598:	18c01014 	ori	r3,r3,64
   1259c:	88c0030d 	sth	r3,12(r17)
   125a0:	003fdf06 	br	12520 <__alt_data_end+0xffff2520>
   125a4:	0005883a 	mov	r2,zero
   125a8:	003fec06 	br	1255c <__alt_data_end+0xffff255c>
   125ac:	88801415 	stw	r2,80(r17)
   125b0:	003fd206 	br	124fc <__alt_data_end+0xffff24fc>
   125b4:	28c00f17 	ldw	r3,60(r5)
   125b8:	00ffb316 	blt	zero,r3,12488 <__alt_data_end+0xffff2488>
   125bc:	003fd706 	br	1251c <__alt_data_end+0xffff251c>
   125c0:	89400717 	ldw	r5,28(r17)
   125c4:	000d883a 	mov	r6,zero
   125c8:	01c00044 	movi	r7,1
   125cc:	9809883a 	mov	r4,r19
   125d0:	403ee83a 	callr	r8
   125d4:	100d883a 	mov	r6,r2
   125d8:	00bfffc4 	movi	r2,-1
   125dc:	30801426 	beq	r6,r2,12630 <__sflush_r+0x1e4>
   125e0:	8880030b 	ldhu	r2,12(r17)
   125e4:	8a000a17 	ldw	r8,40(r17)
   125e8:	003fae06 	br	124a4 <__alt_data_end+0xffff24a4>
   125ec:	98c00017 	ldw	r3,0(r19)
   125f0:	183fba26 	beq	r3,zero,124dc <__alt_data_end+0xffff24dc>
   125f4:	01000744 	movi	r4,29
   125f8:	19000626 	beq	r3,r4,12614 <__sflush_r+0x1c8>
   125fc:	01000584 	movi	r4,22
   12600:	19000426 	beq	r3,r4,12614 <__sflush_r+0x1c8>
   12604:	88c0030b 	ldhu	r3,12(r17)
   12608:	18c01014 	ori	r3,r3,64
   1260c:	88c0030d 	sth	r3,12(r17)
   12610:	003fc306 	br	12520 <__alt_data_end+0xffff2520>
   12614:	8880030b 	ldhu	r2,12(r17)
   12618:	88c00417 	ldw	r3,16(r17)
   1261c:	88000115 	stw	zero,4(r17)
   12620:	10bdffcc 	andi	r2,r2,63487
   12624:	8880030d 	sth	r2,12(r17)
   12628:	88c00015 	stw	r3,0(r17)
   1262c:	003fb306 	br	124fc <__alt_data_end+0xffff24fc>
   12630:	98800017 	ldw	r2,0(r19)
   12634:	103fea26 	beq	r2,zero,125e0 <__alt_data_end+0xffff25e0>
   12638:	00c00744 	movi	r3,29
   1263c:	10c00226 	beq	r2,r3,12648 <__sflush_r+0x1fc>
   12640:	00c00584 	movi	r3,22
   12644:	10c0031e 	bne	r2,r3,12654 <__sflush_r+0x208>
   12648:	9c000015 	stw	r16,0(r19)
   1264c:	0005883a 	mov	r2,zero
   12650:	003fb306 	br	12520 <__alt_data_end+0xffff2520>
   12654:	88c0030b 	ldhu	r3,12(r17)
   12658:	3005883a 	mov	r2,r6
   1265c:	18c01014 	ori	r3,r3,64
   12660:	88c0030d 	sth	r3,12(r17)
   12664:	003fae06 	br	12520 <__alt_data_end+0xffff2520>

00012668 <_fflush_r>:
   12668:	defffd04 	addi	sp,sp,-12
   1266c:	dc000115 	stw	r16,4(sp)
   12670:	dfc00215 	stw	ra,8(sp)
   12674:	2021883a 	mov	r16,r4
   12678:	20000226 	beq	r4,zero,12684 <_fflush_r+0x1c>
   1267c:	20800e17 	ldw	r2,56(r4)
   12680:	10000c26 	beq	r2,zero,126b4 <_fflush_r+0x4c>
   12684:	2880030f 	ldh	r2,12(r5)
   12688:	1000051e 	bne	r2,zero,126a0 <_fflush_r+0x38>
   1268c:	0005883a 	mov	r2,zero
   12690:	dfc00217 	ldw	ra,8(sp)
   12694:	dc000117 	ldw	r16,4(sp)
   12698:	dec00304 	addi	sp,sp,12
   1269c:	f800283a 	ret
   126a0:	8009883a 	mov	r4,r16
   126a4:	dfc00217 	ldw	ra,8(sp)
   126a8:	dc000117 	ldw	r16,4(sp)
   126ac:	dec00304 	addi	sp,sp,12
   126b0:	001244c1 	jmpi	1244c <__sflush_r>
   126b4:	d9400015 	stw	r5,0(sp)
   126b8:	00106fc0 	call	106fc <__sinit>
   126bc:	d9400017 	ldw	r5,0(sp)
   126c0:	003ff006 	br	12684 <__alt_data_end+0xffff2684>

000126c4 <fflush>:
   126c4:	20000526 	beq	r4,zero,126dc <fflush+0x18>
   126c8:	00800074 	movhi	r2,1
   126cc:	10960104 	addi	r2,r2,22532
   126d0:	200b883a 	mov	r5,r4
   126d4:	11000017 	ldw	r4,0(r2)
   126d8:	00126681 	jmpi	12668 <_fflush_r>
   126dc:	00800074 	movhi	r2,1
   126e0:	10960004 	addi	r2,r2,22528
   126e4:	11000017 	ldw	r4,0(r2)
   126e8:	01400074 	movhi	r5,1
   126ec:	29499a04 	addi	r5,r5,9832
   126f0:	0010ccc1 	jmpi	10ccc <_fwalk_reent>

000126f4 <_malloc_trim_r>:
   126f4:	defffb04 	addi	sp,sp,-20
   126f8:	dcc00315 	stw	r19,12(sp)
   126fc:	04c00074 	movhi	r19,1
   12700:	dc800215 	stw	r18,8(sp)
   12704:	dc400115 	stw	r17,4(sp)
   12708:	dc000015 	stw	r16,0(sp)
   1270c:	dfc00415 	stw	ra,16(sp)
   12710:	2821883a 	mov	r16,r5
   12714:	9cd48904 	addi	r19,r19,21028
   12718:	2025883a 	mov	r18,r4
   1271c:	00135840 	call	13584 <__malloc_lock>
   12720:	98800217 	ldw	r2,8(r19)
   12724:	14400117 	ldw	r17,4(r2)
   12728:	00bfff04 	movi	r2,-4
   1272c:	88a2703a 	and	r17,r17,r2
   12730:	8c21c83a 	sub	r16,r17,r16
   12734:	8403fbc4 	addi	r16,r16,4079
   12738:	8020d33a 	srli	r16,r16,12
   1273c:	0083ffc4 	movi	r2,4095
   12740:	843fffc4 	addi	r16,r16,-1
   12744:	8020933a 	slli	r16,r16,12
   12748:	1400060e 	bge	r2,r16,12764 <_malloc_trim_r+0x70>
   1274c:	000b883a 	mov	r5,zero
   12750:	9009883a 	mov	r4,r18
   12754:	0011fb00 	call	11fb0 <_sbrk_r>
   12758:	98c00217 	ldw	r3,8(r19)
   1275c:	1c47883a 	add	r3,r3,r17
   12760:	10c00a26 	beq	r2,r3,1278c <_malloc_trim_r+0x98>
   12764:	9009883a 	mov	r4,r18
   12768:	00135a80 	call	135a8 <__malloc_unlock>
   1276c:	0005883a 	mov	r2,zero
   12770:	dfc00417 	ldw	ra,16(sp)
   12774:	dcc00317 	ldw	r19,12(sp)
   12778:	dc800217 	ldw	r18,8(sp)
   1277c:	dc400117 	ldw	r17,4(sp)
   12780:	dc000017 	ldw	r16,0(sp)
   12784:	dec00504 	addi	sp,sp,20
   12788:	f800283a 	ret
   1278c:	040bc83a 	sub	r5,zero,r16
   12790:	9009883a 	mov	r4,r18
   12794:	0011fb00 	call	11fb0 <_sbrk_r>
   12798:	00ffffc4 	movi	r3,-1
   1279c:	10c00d26 	beq	r2,r3,127d4 <_malloc_trim_r+0xe0>
   127a0:	00c00074 	movhi	r3,1
   127a4:	18d8a604 	addi	r3,r3,25240
   127a8:	18800017 	ldw	r2,0(r3)
   127ac:	99000217 	ldw	r4,8(r19)
   127b0:	8c23c83a 	sub	r17,r17,r16
   127b4:	8c400054 	ori	r17,r17,1
   127b8:	1421c83a 	sub	r16,r2,r16
   127bc:	24400115 	stw	r17,4(r4)
   127c0:	9009883a 	mov	r4,r18
   127c4:	1c000015 	stw	r16,0(r3)
   127c8:	00135a80 	call	135a8 <__malloc_unlock>
   127cc:	00800044 	movi	r2,1
   127d0:	003fe706 	br	12770 <__alt_data_end+0xffff2770>
   127d4:	000b883a 	mov	r5,zero
   127d8:	9009883a 	mov	r4,r18
   127dc:	0011fb00 	call	11fb0 <_sbrk_r>
   127e0:	99000217 	ldw	r4,8(r19)
   127e4:	014003c4 	movi	r5,15
   127e8:	1107c83a 	sub	r3,r2,r4
   127ec:	28ffdd0e 	bge	r5,r3,12764 <__alt_data_end+0xffff2764>
   127f0:	01400074 	movhi	r5,1
   127f4:	29560204 	addi	r5,r5,22536
   127f8:	29400017 	ldw	r5,0(r5)
   127fc:	18c00054 	ori	r3,r3,1
   12800:	20c00115 	stw	r3,4(r4)
   12804:	00c00074 	movhi	r3,1
   12808:	1145c83a 	sub	r2,r2,r5
   1280c:	18d8a604 	addi	r3,r3,25240
   12810:	18800015 	stw	r2,0(r3)
   12814:	003fd306 	br	12764 <__alt_data_end+0xffff2764>

00012818 <_free_r>:
   12818:	28004126 	beq	r5,zero,12920 <_free_r+0x108>
   1281c:	defffd04 	addi	sp,sp,-12
   12820:	dc400115 	stw	r17,4(sp)
   12824:	dc000015 	stw	r16,0(sp)
   12828:	2023883a 	mov	r17,r4
   1282c:	2821883a 	mov	r16,r5
   12830:	dfc00215 	stw	ra,8(sp)
   12834:	00135840 	call	13584 <__malloc_lock>
   12838:	81ffff17 	ldw	r7,-4(r16)
   1283c:	00bfff84 	movi	r2,-2
   12840:	01000074 	movhi	r4,1
   12844:	81bffe04 	addi	r6,r16,-8
   12848:	3884703a 	and	r2,r7,r2
   1284c:	21148904 	addi	r4,r4,21028
   12850:	308b883a 	add	r5,r6,r2
   12854:	2a400117 	ldw	r9,4(r5)
   12858:	22000217 	ldw	r8,8(r4)
   1285c:	00ffff04 	movi	r3,-4
   12860:	48c6703a 	and	r3,r9,r3
   12864:	2a005726 	beq	r5,r8,129c4 <_free_r+0x1ac>
   12868:	28c00115 	stw	r3,4(r5)
   1286c:	39c0004c 	andi	r7,r7,1
   12870:	3800091e 	bne	r7,zero,12898 <_free_r+0x80>
   12874:	823ffe17 	ldw	r8,-8(r16)
   12878:	22400204 	addi	r9,r4,8
   1287c:	320dc83a 	sub	r6,r6,r8
   12880:	31c00217 	ldw	r7,8(r6)
   12884:	1205883a 	add	r2,r2,r8
   12888:	3a406526 	beq	r7,r9,12a20 <_free_r+0x208>
   1288c:	32000317 	ldw	r8,12(r6)
   12890:	3a000315 	stw	r8,12(r7)
   12894:	41c00215 	stw	r7,8(r8)
   12898:	28cf883a 	add	r7,r5,r3
   1289c:	39c00117 	ldw	r7,4(r7)
   128a0:	39c0004c 	andi	r7,r7,1
   128a4:	38003a26 	beq	r7,zero,12990 <_free_r+0x178>
   128a8:	10c00054 	ori	r3,r2,1
   128ac:	30c00115 	stw	r3,4(r6)
   128b0:	3087883a 	add	r3,r6,r2
   128b4:	18800015 	stw	r2,0(r3)
   128b8:	00c07fc4 	movi	r3,511
   128bc:	18801936 	bltu	r3,r2,12924 <_free_r+0x10c>
   128c0:	1004d0fa 	srli	r2,r2,3
   128c4:	01c00044 	movi	r7,1
   128c8:	21400117 	ldw	r5,4(r4)
   128cc:	10c00044 	addi	r3,r2,1
   128d0:	18c7883a 	add	r3,r3,r3
   128d4:	1005d0ba 	srai	r2,r2,2
   128d8:	18c7883a 	add	r3,r3,r3
   128dc:	18c7883a 	add	r3,r3,r3
   128e0:	1907883a 	add	r3,r3,r4
   128e4:	3884983a 	sll	r2,r7,r2
   128e8:	19c00017 	ldw	r7,0(r3)
   128ec:	1a3ffe04 	addi	r8,r3,-8
   128f0:	1144b03a 	or	r2,r2,r5
   128f4:	32000315 	stw	r8,12(r6)
   128f8:	31c00215 	stw	r7,8(r6)
   128fc:	20800115 	stw	r2,4(r4)
   12900:	19800015 	stw	r6,0(r3)
   12904:	39800315 	stw	r6,12(r7)
   12908:	8809883a 	mov	r4,r17
   1290c:	dfc00217 	ldw	ra,8(sp)
   12910:	dc400117 	ldw	r17,4(sp)
   12914:	dc000017 	ldw	r16,0(sp)
   12918:	dec00304 	addi	sp,sp,12
   1291c:	00135a81 	jmpi	135a8 <__malloc_unlock>
   12920:	f800283a 	ret
   12924:	100ad27a 	srli	r5,r2,9
   12928:	00c00104 	movi	r3,4
   1292c:	19404a36 	bltu	r3,r5,12a58 <_free_r+0x240>
   12930:	100ad1ba 	srli	r5,r2,6
   12934:	28c00e44 	addi	r3,r5,57
   12938:	18c7883a 	add	r3,r3,r3
   1293c:	29400e04 	addi	r5,r5,56
   12940:	18c7883a 	add	r3,r3,r3
   12944:	18c7883a 	add	r3,r3,r3
   12948:	1909883a 	add	r4,r3,r4
   1294c:	20c00017 	ldw	r3,0(r4)
   12950:	01c00074 	movhi	r7,1
   12954:	213ffe04 	addi	r4,r4,-8
   12958:	39d48904 	addi	r7,r7,21028
   1295c:	20c04426 	beq	r4,r3,12a70 <_free_r+0x258>
   12960:	01ffff04 	movi	r7,-4
   12964:	19400117 	ldw	r5,4(r3)
   12968:	29ca703a 	and	r5,r5,r7
   1296c:	1140022e 	bgeu	r2,r5,12978 <_free_r+0x160>
   12970:	18c00217 	ldw	r3,8(r3)
   12974:	20fffb1e 	bne	r4,r3,12964 <__alt_data_end+0xffff2964>
   12978:	19000317 	ldw	r4,12(r3)
   1297c:	31000315 	stw	r4,12(r6)
   12980:	30c00215 	stw	r3,8(r6)
   12984:	21800215 	stw	r6,8(r4)
   12988:	19800315 	stw	r6,12(r3)
   1298c:	003fde06 	br	12908 <__alt_data_end+0xffff2908>
   12990:	29c00217 	ldw	r7,8(r5)
   12994:	10c5883a 	add	r2,r2,r3
   12998:	00c00074 	movhi	r3,1
   1299c:	18d48b04 	addi	r3,r3,21036
   129a0:	38c03b26 	beq	r7,r3,12a90 <_free_r+0x278>
   129a4:	2a000317 	ldw	r8,12(r5)
   129a8:	11400054 	ori	r5,r2,1
   129ac:	3087883a 	add	r3,r6,r2
   129b0:	3a000315 	stw	r8,12(r7)
   129b4:	41c00215 	stw	r7,8(r8)
   129b8:	31400115 	stw	r5,4(r6)
   129bc:	18800015 	stw	r2,0(r3)
   129c0:	003fbd06 	br	128b8 <__alt_data_end+0xffff28b8>
   129c4:	39c0004c 	andi	r7,r7,1
   129c8:	10c5883a 	add	r2,r2,r3
   129cc:	3800071e 	bne	r7,zero,129ec <_free_r+0x1d4>
   129d0:	81fffe17 	ldw	r7,-8(r16)
   129d4:	31cdc83a 	sub	r6,r6,r7
   129d8:	30c00317 	ldw	r3,12(r6)
   129dc:	31400217 	ldw	r5,8(r6)
   129e0:	11c5883a 	add	r2,r2,r7
   129e4:	28c00315 	stw	r3,12(r5)
   129e8:	19400215 	stw	r5,8(r3)
   129ec:	10c00054 	ori	r3,r2,1
   129f0:	30c00115 	stw	r3,4(r6)
   129f4:	00c00074 	movhi	r3,1
   129f8:	18d60304 	addi	r3,r3,22540
   129fc:	18c00017 	ldw	r3,0(r3)
   12a00:	21800215 	stw	r6,8(r4)
   12a04:	10ffc036 	bltu	r2,r3,12908 <__alt_data_end+0xffff2908>
   12a08:	00800074 	movhi	r2,1
   12a0c:	10989e04 	addi	r2,r2,25208
   12a10:	11400017 	ldw	r5,0(r2)
   12a14:	8809883a 	mov	r4,r17
   12a18:	00126f40 	call	126f4 <_malloc_trim_r>
   12a1c:	003fba06 	br	12908 <__alt_data_end+0xffff2908>
   12a20:	28c9883a 	add	r4,r5,r3
   12a24:	21000117 	ldw	r4,4(r4)
   12a28:	2100004c 	andi	r4,r4,1
   12a2c:	2000391e 	bne	r4,zero,12b14 <_free_r+0x2fc>
   12a30:	29c00217 	ldw	r7,8(r5)
   12a34:	29000317 	ldw	r4,12(r5)
   12a38:	1885883a 	add	r2,r3,r2
   12a3c:	10c00054 	ori	r3,r2,1
   12a40:	39000315 	stw	r4,12(r7)
   12a44:	21c00215 	stw	r7,8(r4)
   12a48:	30c00115 	stw	r3,4(r6)
   12a4c:	308d883a 	add	r6,r6,r2
   12a50:	30800015 	stw	r2,0(r6)
   12a54:	003fac06 	br	12908 <__alt_data_end+0xffff2908>
   12a58:	00c00504 	movi	r3,20
   12a5c:	19401536 	bltu	r3,r5,12ab4 <_free_r+0x29c>
   12a60:	28c01704 	addi	r3,r5,92
   12a64:	18c7883a 	add	r3,r3,r3
   12a68:	294016c4 	addi	r5,r5,91
   12a6c:	003fb406 	br	12940 <__alt_data_end+0xffff2940>
   12a70:	280bd0ba 	srai	r5,r5,2
   12a74:	00c00044 	movi	r3,1
   12a78:	38800117 	ldw	r2,4(r7)
   12a7c:	194a983a 	sll	r5,r3,r5
   12a80:	2007883a 	mov	r3,r4
   12a84:	2884b03a 	or	r2,r5,r2
   12a88:	38800115 	stw	r2,4(r7)
   12a8c:	003fbb06 	br	1297c <__alt_data_end+0xffff297c>
   12a90:	21800515 	stw	r6,20(r4)
   12a94:	21800415 	stw	r6,16(r4)
   12a98:	10c00054 	ori	r3,r2,1
   12a9c:	31c00315 	stw	r7,12(r6)
   12aa0:	31c00215 	stw	r7,8(r6)
   12aa4:	30c00115 	stw	r3,4(r6)
   12aa8:	308d883a 	add	r6,r6,r2
   12aac:	30800015 	stw	r2,0(r6)
   12ab0:	003f9506 	br	12908 <__alt_data_end+0xffff2908>
   12ab4:	00c01504 	movi	r3,84
   12ab8:	19400536 	bltu	r3,r5,12ad0 <_free_r+0x2b8>
   12abc:	100ad33a 	srli	r5,r2,12
   12ac0:	28c01bc4 	addi	r3,r5,111
   12ac4:	18c7883a 	add	r3,r3,r3
   12ac8:	29401b84 	addi	r5,r5,110
   12acc:	003f9c06 	br	12940 <__alt_data_end+0xffff2940>
   12ad0:	00c05504 	movi	r3,340
   12ad4:	19400536 	bltu	r3,r5,12aec <_free_r+0x2d4>
   12ad8:	100ad3fa 	srli	r5,r2,15
   12adc:	28c01e04 	addi	r3,r5,120
   12ae0:	18c7883a 	add	r3,r3,r3
   12ae4:	29401dc4 	addi	r5,r5,119
   12ae8:	003f9506 	br	12940 <__alt_data_end+0xffff2940>
   12aec:	00c15504 	movi	r3,1364
   12af0:	19400536 	bltu	r3,r5,12b08 <_free_r+0x2f0>
   12af4:	100ad4ba 	srli	r5,r2,18
   12af8:	28c01f44 	addi	r3,r5,125
   12afc:	18c7883a 	add	r3,r3,r3
   12b00:	29401f04 	addi	r5,r5,124
   12b04:	003f8e06 	br	12940 <__alt_data_end+0xffff2940>
   12b08:	00c03f84 	movi	r3,254
   12b0c:	01401f84 	movi	r5,126
   12b10:	003f8b06 	br	12940 <__alt_data_end+0xffff2940>
   12b14:	10c00054 	ori	r3,r2,1
   12b18:	30c00115 	stw	r3,4(r6)
   12b1c:	308d883a 	add	r6,r6,r2
   12b20:	30800015 	stw	r2,0(r6)
   12b24:	003f7806 	br	12908 <__alt_data_end+0xffff2908>

00012b28 <_lseek_r>:
   12b28:	defffd04 	addi	sp,sp,-12
   12b2c:	2805883a 	mov	r2,r5
   12b30:	dc000015 	stw	r16,0(sp)
   12b34:	04000074 	movhi	r16,1
   12b38:	dc400115 	stw	r17,4(sp)
   12b3c:	300b883a 	mov	r5,r6
   12b40:	84189f04 	addi	r16,r16,25212
   12b44:	2023883a 	mov	r17,r4
   12b48:	380d883a 	mov	r6,r7
   12b4c:	1009883a 	mov	r4,r2
   12b50:	dfc00215 	stw	ra,8(sp)
   12b54:	80000015 	stw	zero,0(r16)
   12b58:	00134340 	call	13434 <lseek>
   12b5c:	00ffffc4 	movi	r3,-1
   12b60:	10c00526 	beq	r2,r3,12b78 <_lseek_r+0x50>
   12b64:	dfc00217 	ldw	ra,8(sp)
   12b68:	dc400117 	ldw	r17,4(sp)
   12b6c:	dc000017 	ldw	r16,0(sp)
   12b70:	dec00304 	addi	sp,sp,12
   12b74:	f800283a 	ret
   12b78:	80c00017 	ldw	r3,0(r16)
   12b7c:	183ff926 	beq	r3,zero,12b64 <__alt_data_end+0xffff2b64>
   12b80:	88c00015 	stw	r3,0(r17)
   12b84:	003ff706 	br	12b64 <__alt_data_end+0xffff2b64>

00012b88 <__smakebuf_r>:
   12b88:	2880030b 	ldhu	r2,12(r5)
   12b8c:	10c0008c 	andi	r3,r2,2
   12b90:	1800411e 	bne	r3,zero,12c98 <__smakebuf_r+0x110>
   12b94:	deffec04 	addi	sp,sp,-80
   12b98:	dc000f15 	stw	r16,60(sp)
   12b9c:	2821883a 	mov	r16,r5
   12ba0:	2940038f 	ldh	r5,14(r5)
   12ba4:	dc401015 	stw	r17,64(sp)
   12ba8:	dfc01315 	stw	ra,76(sp)
   12bac:	dcc01215 	stw	r19,72(sp)
   12bb0:	dc801115 	stw	r18,68(sp)
   12bb4:	2023883a 	mov	r17,r4
   12bb8:	28001c16 	blt	r5,zero,12c2c <__smakebuf_r+0xa4>
   12bbc:	d80d883a 	mov	r6,sp
   12bc0:	0012da40 	call	12da4 <_fstat_r>
   12bc4:	10001816 	blt	r2,zero,12c28 <__smakebuf_r+0xa0>
   12bc8:	d8800117 	ldw	r2,4(sp)
   12bcc:	00e00014 	movui	r3,32768
   12bd0:	10bc000c 	andi	r2,r2,61440
   12bd4:	14c80020 	cmpeqi	r19,r2,8192
   12bd8:	10c03726 	beq	r2,r3,12cb8 <__smakebuf_r+0x130>
   12bdc:	80c0030b 	ldhu	r3,12(r16)
   12be0:	18c20014 	ori	r3,r3,2048
   12be4:	80c0030d 	sth	r3,12(r16)
   12be8:	00c80004 	movi	r3,8192
   12bec:	10c0521e 	bne	r2,r3,12d38 <__smakebuf_r+0x1b0>
   12bf0:	8140038f 	ldh	r5,14(r16)
   12bf4:	8809883a 	mov	r4,r17
   12bf8:	0012e000 	call	12e00 <_isatty_r>
   12bfc:	10004c26 	beq	r2,zero,12d30 <__smakebuf_r+0x1a8>
   12c00:	8080030b 	ldhu	r2,12(r16)
   12c04:	80c010c4 	addi	r3,r16,67
   12c08:	80c00015 	stw	r3,0(r16)
   12c0c:	10800054 	ori	r2,r2,1
   12c10:	8080030d 	sth	r2,12(r16)
   12c14:	00800044 	movi	r2,1
   12c18:	80c00415 	stw	r3,16(r16)
   12c1c:	80800515 	stw	r2,20(r16)
   12c20:	04810004 	movi	r18,1024
   12c24:	00000706 	br	12c44 <__smakebuf_r+0xbc>
   12c28:	8080030b 	ldhu	r2,12(r16)
   12c2c:	10c0200c 	andi	r3,r2,128
   12c30:	18001f1e 	bne	r3,zero,12cb0 <__smakebuf_r+0x128>
   12c34:	04810004 	movi	r18,1024
   12c38:	10820014 	ori	r2,r2,2048
   12c3c:	8080030d 	sth	r2,12(r16)
   12c40:	0027883a 	mov	r19,zero
   12c44:	900b883a 	mov	r5,r18
   12c48:	8809883a 	mov	r4,r17
   12c4c:	0010d900 	call	10d90 <_malloc_r>
   12c50:	10002c26 	beq	r2,zero,12d04 <__smakebuf_r+0x17c>
   12c54:	80c0030b 	ldhu	r3,12(r16)
   12c58:	01000074 	movhi	r4,1
   12c5c:	2100ed04 	addi	r4,r4,948
   12c60:	89000f15 	stw	r4,60(r17)
   12c64:	18c02014 	ori	r3,r3,128
   12c68:	80c0030d 	sth	r3,12(r16)
   12c6c:	80800015 	stw	r2,0(r16)
   12c70:	80800415 	stw	r2,16(r16)
   12c74:	84800515 	stw	r18,20(r16)
   12c78:	98001a1e 	bne	r19,zero,12ce4 <__smakebuf_r+0x15c>
   12c7c:	dfc01317 	ldw	ra,76(sp)
   12c80:	dcc01217 	ldw	r19,72(sp)
   12c84:	dc801117 	ldw	r18,68(sp)
   12c88:	dc401017 	ldw	r17,64(sp)
   12c8c:	dc000f17 	ldw	r16,60(sp)
   12c90:	dec01404 	addi	sp,sp,80
   12c94:	f800283a 	ret
   12c98:	288010c4 	addi	r2,r5,67
   12c9c:	28800015 	stw	r2,0(r5)
   12ca0:	28800415 	stw	r2,16(r5)
   12ca4:	00800044 	movi	r2,1
   12ca8:	28800515 	stw	r2,20(r5)
   12cac:	f800283a 	ret
   12cb0:	04801004 	movi	r18,64
   12cb4:	003fe006 	br	12c38 <__alt_data_end+0xffff2c38>
   12cb8:	81000a17 	ldw	r4,40(r16)
   12cbc:	00c00074 	movhi	r3,1
   12cc0:	18c83704 	addi	r3,r3,8412
   12cc4:	20ffc51e 	bne	r4,r3,12bdc <__alt_data_end+0xffff2bdc>
   12cc8:	8080030b 	ldhu	r2,12(r16)
   12ccc:	04810004 	movi	r18,1024
   12cd0:	84801315 	stw	r18,76(r16)
   12cd4:	1484b03a 	or	r2,r2,r18
   12cd8:	8080030d 	sth	r2,12(r16)
   12cdc:	0027883a 	mov	r19,zero
   12ce0:	003fd806 	br	12c44 <__alt_data_end+0xffff2c44>
   12ce4:	8140038f 	ldh	r5,14(r16)
   12ce8:	8809883a 	mov	r4,r17
   12cec:	0012e000 	call	12e00 <_isatty_r>
   12cf0:	103fe226 	beq	r2,zero,12c7c <__alt_data_end+0xffff2c7c>
   12cf4:	8080030b 	ldhu	r2,12(r16)
   12cf8:	10800054 	ori	r2,r2,1
   12cfc:	8080030d 	sth	r2,12(r16)
   12d00:	003fde06 	br	12c7c <__alt_data_end+0xffff2c7c>
   12d04:	8080030b 	ldhu	r2,12(r16)
   12d08:	10c0800c 	andi	r3,r2,512
   12d0c:	183fdb1e 	bne	r3,zero,12c7c <__alt_data_end+0xffff2c7c>
   12d10:	10800094 	ori	r2,r2,2
   12d14:	80c010c4 	addi	r3,r16,67
   12d18:	8080030d 	sth	r2,12(r16)
   12d1c:	00800044 	movi	r2,1
   12d20:	80c00015 	stw	r3,0(r16)
   12d24:	80c00415 	stw	r3,16(r16)
   12d28:	80800515 	stw	r2,20(r16)
   12d2c:	003fd306 	br	12c7c <__alt_data_end+0xffff2c7c>
   12d30:	04810004 	movi	r18,1024
   12d34:	003fc306 	br	12c44 <__alt_data_end+0xffff2c44>
   12d38:	0027883a 	mov	r19,zero
   12d3c:	04810004 	movi	r18,1024
   12d40:	003fc006 	br	12c44 <__alt_data_end+0xffff2c44>

00012d44 <_read_r>:
   12d44:	defffd04 	addi	sp,sp,-12
   12d48:	2805883a 	mov	r2,r5
   12d4c:	dc000015 	stw	r16,0(sp)
   12d50:	04000074 	movhi	r16,1
   12d54:	dc400115 	stw	r17,4(sp)
   12d58:	300b883a 	mov	r5,r6
   12d5c:	84189f04 	addi	r16,r16,25212
   12d60:	2023883a 	mov	r17,r4
   12d64:	380d883a 	mov	r6,r7
   12d68:	1009883a 	mov	r4,r2
   12d6c:	dfc00215 	stw	ra,8(sp)
   12d70:	80000015 	stw	zero,0(r16)
   12d74:	00136080 	call	13608 <read>
   12d78:	00ffffc4 	movi	r3,-1
   12d7c:	10c00526 	beq	r2,r3,12d94 <_read_r+0x50>
   12d80:	dfc00217 	ldw	ra,8(sp)
   12d84:	dc400117 	ldw	r17,4(sp)
   12d88:	dc000017 	ldw	r16,0(sp)
   12d8c:	dec00304 	addi	sp,sp,12
   12d90:	f800283a 	ret
   12d94:	80c00017 	ldw	r3,0(r16)
   12d98:	183ff926 	beq	r3,zero,12d80 <__alt_data_end+0xffff2d80>
   12d9c:	88c00015 	stw	r3,0(r17)
   12da0:	003ff706 	br	12d80 <__alt_data_end+0xffff2d80>

00012da4 <_fstat_r>:
   12da4:	defffd04 	addi	sp,sp,-12
   12da8:	2805883a 	mov	r2,r5
   12dac:	dc000015 	stw	r16,0(sp)
   12db0:	04000074 	movhi	r16,1
   12db4:	dc400115 	stw	r17,4(sp)
   12db8:	84189f04 	addi	r16,r16,25212
   12dbc:	2023883a 	mov	r17,r4
   12dc0:	300b883a 	mov	r5,r6
   12dc4:	1009883a 	mov	r4,r2
   12dc8:	dfc00215 	stw	ra,8(sp)
   12dcc:	80000015 	stw	zero,0(r16)
   12dd0:	001317c0 	call	1317c <fstat>
   12dd4:	00ffffc4 	movi	r3,-1
   12dd8:	10c00526 	beq	r2,r3,12df0 <_fstat_r+0x4c>
   12ddc:	dfc00217 	ldw	ra,8(sp)
   12de0:	dc400117 	ldw	r17,4(sp)
   12de4:	dc000017 	ldw	r16,0(sp)
   12de8:	dec00304 	addi	sp,sp,12
   12dec:	f800283a 	ret
   12df0:	80c00017 	ldw	r3,0(r16)
   12df4:	183ff926 	beq	r3,zero,12ddc <__alt_data_end+0xffff2ddc>
   12df8:	88c00015 	stw	r3,0(r17)
   12dfc:	003ff706 	br	12ddc <__alt_data_end+0xffff2ddc>

00012e00 <_isatty_r>:
   12e00:	defffd04 	addi	sp,sp,-12
   12e04:	dc000015 	stw	r16,0(sp)
   12e08:	04000074 	movhi	r16,1
   12e0c:	dc400115 	stw	r17,4(sp)
   12e10:	84189f04 	addi	r16,r16,25212
   12e14:	2023883a 	mov	r17,r4
   12e18:	2809883a 	mov	r4,r5
   12e1c:	dfc00215 	stw	ra,8(sp)
   12e20:	80000015 	stw	zero,0(r16)
   12e24:	00132680 	call	13268 <isatty>
   12e28:	00ffffc4 	movi	r3,-1
   12e2c:	10c00526 	beq	r2,r3,12e44 <_isatty_r+0x44>
   12e30:	dfc00217 	ldw	ra,8(sp)
   12e34:	dc400117 	ldw	r17,4(sp)
   12e38:	dc000017 	ldw	r16,0(sp)
   12e3c:	dec00304 	addi	sp,sp,12
   12e40:	f800283a 	ret
   12e44:	80c00017 	ldw	r3,0(r16)
   12e48:	183ff926 	beq	r3,zero,12e30 <__alt_data_end+0xffff2e30>
   12e4c:	88c00015 	stw	r3,0(r17)
   12e50:	003ff706 	br	12e30 <__alt_data_end+0xffff2e30>

00012e54 <__divsi3>:
   12e54:	20001b16 	blt	r4,zero,12ec4 <__divsi3+0x70>
   12e58:	000f883a 	mov	r7,zero
   12e5c:	28001616 	blt	r5,zero,12eb8 <__divsi3+0x64>
   12e60:	200d883a 	mov	r6,r4
   12e64:	29001a2e 	bgeu	r5,r4,12ed0 <__divsi3+0x7c>
   12e68:	00800804 	movi	r2,32
   12e6c:	00c00044 	movi	r3,1
   12e70:	00000106 	br	12e78 <__divsi3+0x24>
   12e74:	10000d26 	beq	r2,zero,12eac <__divsi3+0x58>
   12e78:	294b883a 	add	r5,r5,r5
   12e7c:	10bfffc4 	addi	r2,r2,-1
   12e80:	18c7883a 	add	r3,r3,r3
   12e84:	293ffb36 	bltu	r5,r4,12e74 <__alt_data_end+0xffff2e74>
   12e88:	0005883a 	mov	r2,zero
   12e8c:	18000726 	beq	r3,zero,12eac <__divsi3+0x58>
   12e90:	0005883a 	mov	r2,zero
   12e94:	31400236 	bltu	r6,r5,12ea0 <__divsi3+0x4c>
   12e98:	314dc83a 	sub	r6,r6,r5
   12e9c:	10c4b03a 	or	r2,r2,r3
   12ea0:	1806d07a 	srli	r3,r3,1
   12ea4:	280ad07a 	srli	r5,r5,1
   12ea8:	183ffa1e 	bne	r3,zero,12e94 <__alt_data_end+0xffff2e94>
   12eac:	38000126 	beq	r7,zero,12eb4 <__divsi3+0x60>
   12eb0:	0085c83a 	sub	r2,zero,r2
   12eb4:	f800283a 	ret
   12eb8:	014bc83a 	sub	r5,zero,r5
   12ebc:	39c0005c 	xori	r7,r7,1
   12ec0:	003fe706 	br	12e60 <__alt_data_end+0xffff2e60>
   12ec4:	0109c83a 	sub	r4,zero,r4
   12ec8:	01c00044 	movi	r7,1
   12ecc:	003fe306 	br	12e5c <__alt_data_end+0xffff2e5c>
   12ed0:	00c00044 	movi	r3,1
   12ed4:	003fee06 	br	12e90 <__alt_data_end+0xffff2e90>

00012ed8 <__modsi3>:
   12ed8:	20001716 	blt	r4,zero,12f38 <__modsi3+0x60>
   12edc:	000f883a 	mov	r7,zero
   12ee0:	2005883a 	mov	r2,r4
   12ee4:	28001216 	blt	r5,zero,12f30 <__modsi3+0x58>
   12ee8:	2900162e 	bgeu	r5,r4,12f44 <__modsi3+0x6c>
   12eec:	01800804 	movi	r6,32
   12ef0:	00c00044 	movi	r3,1
   12ef4:	00000106 	br	12efc <__modsi3+0x24>
   12ef8:	30000a26 	beq	r6,zero,12f24 <__modsi3+0x4c>
   12efc:	294b883a 	add	r5,r5,r5
   12f00:	31bfffc4 	addi	r6,r6,-1
   12f04:	18c7883a 	add	r3,r3,r3
   12f08:	293ffb36 	bltu	r5,r4,12ef8 <__alt_data_end+0xffff2ef8>
   12f0c:	18000526 	beq	r3,zero,12f24 <__modsi3+0x4c>
   12f10:	1806d07a 	srli	r3,r3,1
   12f14:	11400136 	bltu	r2,r5,12f1c <__modsi3+0x44>
   12f18:	1145c83a 	sub	r2,r2,r5
   12f1c:	280ad07a 	srli	r5,r5,1
   12f20:	183ffb1e 	bne	r3,zero,12f10 <__alt_data_end+0xffff2f10>
   12f24:	38000126 	beq	r7,zero,12f2c <__modsi3+0x54>
   12f28:	0085c83a 	sub	r2,zero,r2
   12f2c:	f800283a 	ret
   12f30:	014bc83a 	sub	r5,zero,r5
   12f34:	003fec06 	br	12ee8 <__alt_data_end+0xffff2ee8>
   12f38:	0109c83a 	sub	r4,zero,r4
   12f3c:	01c00044 	movi	r7,1
   12f40:	003fe706 	br	12ee0 <__alt_data_end+0xffff2ee0>
   12f44:	00c00044 	movi	r3,1
   12f48:	003ff106 	br	12f10 <__alt_data_end+0xffff2f10>

00012f4c <__udivsi3>:
   12f4c:	200d883a 	mov	r6,r4
   12f50:	2900152e 	bgeu	r5,r4,12fa8 <__udivsi3+0x5c>
   12f54:	28001416 	blt	r5,zero,12fa8 <__udivsi3+0x5c>
   12f58:	00800804 	movi	r2,32
   12f5c:	00c00044 	movi	r3,1
   12f60:	00000206 	br	12f6c <__udivsi3+0x20>
   12f64:	10000e26 	beq	r2,zero,12fa0 <__udivsi3+0x54>
   12f68:	28000516 	blt	r5,zero,12f80 <__udivsi3+0x34>
   12f6c:	294b883a 	add	r5,r5,r5
   12f70:	10bfffc4 	addi	r2,r2,-1
   12f74:	18c7883a 	add	r3,r3,r3
   12f78:	293ffa36 	bltu	r5,r4,12f64 <__alt_data_end+0xffff2f64>
   12f7c:	18000826 	beq	r3,zero,12fa0 <__udivsi3+0x54>
   12f80:	0005883a 	mov	r2,zero
   12f84:	31400236 	bltu	r6,r5,12f90 <__udivsi3+0x44>
   12f88:	314dc83a 	sub	r6,r6,r5
   12f8c:	10c4b03a 	or	r2,r2,r3
   12f90:	1806d07a 	srli	r3,r3,1
   12f94:	280ad07a 	srli	r5,r5,1
   12f98:	183ffa1e 	bne	r3,zero,12f84 <__alt_data_end+0xffff2f84>
   12f9c:	f800283a 	ret
   12fa0:	0005883a 	mov	r2,zero
   12fa4:	f800283a 	ret
   12fa8:	00c00044 	movi	r3,1
   12fac:	003ff406 	br	12f80 <__alt_data_end+0xffff2f80>

00012fb0 <__umodsi3>:
   12fb0:	2005883a 	mov	r2,r4
   12fb4:	2900122e 	bgeu	r5,r4,13000 <__umodsi3+0x50>
   12fb8:	28001116 	blt	r5,zero,13000 <__umodsi3+0x50>
   12fbc:	01800804 	movi	r6,32
   12fc0:	00c00044 	movi	r3,1
   12fc4:	00000206 	br	12fd0 <__umodsi3+0x20>
   12fc8:	30000c26 	beq	r6,zero,12ffc <__umodsi3+0x4c>
   12fcc:	28000516 	blt	r5,zero,12fe4 <__umodsi3+0x34>
   12fd0:	294b883a 	add	r5,r5,r5
   12fd4:	31bfffc4 	addi	r6,r6,-1
   12fd8:	18c7883a 	add	r3,r3,r3
   12fdc:	293ffa36 	bltu	r5,r4,12fc8 <__alt_data_end+0xffff2fc8>
   12fe0:	18000626 	beq	r3,zero,12ffc <__umodsi3+0x4c>
   12fe4:	1806d07a 	srli	r3,r3,1
   12fe8:	11400136 	bltu	r2,r5,12ff0 <__umodsi3+0x40>
   12fec:	1145c83a 	sub	r2,r2,r5
   12ff0:	280ad07a 	srli	r5,r5,1
   12ff4:	183ffb1e 	bne	r3,zero,12fe4 <__alt_data_end+0xffff2fe4>
   12ff8:	f800283a 	ret
   12ffc:	f800283a 	ret
   13000:	00c00044 	movi	r3,1
   13004:	003ff706 	br	12fe4 <__alt_data_end+0xffff2fe4>

00013008 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13008:	defffe04 	addi	sp,sp,-8
   1300c:	dfc00115 	stw	ra,4(sp)
   13010:	df000015 	stw	fp,0(sp)
   13014:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13018:	d0a00917 	ldw	r2,-32732(gp)
   1301c:	10000326 	beq	r2,zero,1302c <alt_get_errno+0x24>
   13020:	d0a00917 	ldw	r2,-32732(gp)
   13024:	103ee83a 	callr	r2
   13028:	00000106 	br	13030 <alt_get_errno+0x28>
   1302c:	d0a29f04 	addi	r2,gp,-30084
}
   13030:	e037883a 	mov	sp,fp
   13034:	dfc00117 	ldw	ra,4(sp)
   13038:	df000017 	ldw	fp,0(sp)
   1303c:	dec00204 	addi	sp,sp,8
   13040:	f800283a 	ret

00013044 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   13044:	defffb04 	addi	sp,sp,-20
   13048:	dfc00415 	stw	ra,16(sp)
   1304c:	df000315 	stw	fp,12(sp)
   13050:	df000304 	addi	fp,sp,12
   13054:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   13058:	e0bfff17 	ldw	r2,-4(fp)
   1305c:	10000616 	blt	r2,zero,13078 <close+0x34>
   13060:	e0bfff17 	ldw	r2,-4(fp)
   13064:	10c00324 	muli	r3,r2,12
   13068:	00800074 	movhi	r2,1
   1306c:	10959504 	addi	r2,r2,22100
   13070:	1885883a 	add	r2,r3,r2
   13074:	00000106 	br	1307c <close+0x38>
   13078:	0005883a 	mov	r2,zero
   1307c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   13080:	e0bffd17 	ldw	r2,-12(fp)
   13084:	10001926 	beq	r2,zero,130ec <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13088:	e0bffd17 	ldw	r2,-12(fp)
   1308c:	10800017 	ldw	r2,0(r2)
   13090:	10800417 	ldw	r2,16(r2)
   13094:	10000626 	beq	r2,zero,130b0 <close+0x6c>
   13098:	e0bffd17 	ldw	r2,-12(fp)
   1309c:	10800017 	ldw	r2,0(r2)
   130a0:	10800417 	ldw	r2,16(r2)
   130a4:	e13ffd17 	ldw	r4,-12(fp)
   130a8:	103ee83a 	callr	r2
   130ac:	00000106 	br	130b4 <close+0x70>
   130b0:	0005883a 	mov	r2,zero
   130b4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   130b8:	e13fff17 	ldw	r4,-4(fp)
   130bc:	00137040 	call	13704 <alt_release_fd>
    if (rval < 0)
   130c0:	e0bffe17 	ldw	r2,-8(fp)
   130c4:	1000070e 	bge	r2,zero,130e4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   130c8:	00130080 	call	13008 <alt_get_errno>
   130cc:	1007883a 	mov	r3,r2
   130d0:	e0bffe17 	ldw	r2,-8(fp)
   130d4:	0085c83a 	sub	r2,zero,r2
   130d8:	18800015 	stw	r2,0(r3)
      return -1;
   130dc:	00bfffc4 	movi	r2,-1
   130e0:	00000706 	br	13100 <close+0xbc>
    }
    return 0;
   130e4:	0005883a 	mov	r2,zero
   130e8:	00000506 	br	13100 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   130ec:	00130080 	call	13008 <alt_get_errno>
   130f0:	1007883a 	mov	r3,r2
   130f4:	00801444 	movi	r2,81
   130f8:	18800015 	stw	r2,0(r3)
    return -1;
   130fc:	00bfffc4 	movi	r2,-1
  }
}
   13100:	e037883a 	mov	sp,fp
   13104:	dfc00117 	ldw	ra,4(sp)
   13108:	df000017 	ldw	fp,0(sp)
   1310c:	dec00204 	addi	sp,sp,8
   13110:	f800283a 	ret

00013114 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   13114:	defffc04 	addi	sp,sp,-16
   13118:	df000315 	stw	fp,12(sp)
   1311c:	df000304 	addi	fp,sp,12
   13120:	e13ffd15 	stw	r4,-12(fp)
   13124:	e17ffe15 	stw	r5,-8(fp)
   13128:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1312c:	e0bfff17 	ldw	r2,-4(fp)
}
   13130:	e037883a 	mov	sp,fp
   13134:	df000017 	ldw	fp,0(sp)
   13138:	dec00104 	addi	sp,sp,4
   1313c:	f800283a 	ret

00013140 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13140:	defffe04 	addi	sp,sp,-8
   13144:	dfc00115 	stw	ra,4(sp)
   13148:	df000015 	stw	fp,0(sp)
   1314c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13150:	d0a00917 	ldw	r2,-32732(gp)
   13154:	10000326 	beq	r2,zero,13164 <alt_get_errno+0x24>
   13158:	d0a00917 	ldw	r2,-32732(gp)
   1315c:	103ee83a 	callr	r2
   13160:	00000106 	br	13168 <alt_get_errno+0x28>
   13164:	d0a29f04 	addi	r2,gp,-30084
}
   13168:	e037883a 	mov	sp,fp
   1316c:	dfc00117 	ldw	ra,4(sp)
   13170:	df000017 	ldw	fp,0(sp)
   13174:	dec00204 	addi	sp,sp,8
   13178:	f800283a 	ret

0001317c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1317c:	defffb04 	addi	sp,sp,-20
   13180:	dfc00415 	stw	ra,16(sp)
   13184:	df000315 	stw	fp,12(sp)
   13188:	df000304 	addi	fp,sp,12
   1318c:	e13ffe15 	stw	r4,-8(fp)
   13190:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13194:	e0bffe17 	ldw	r2,-8(fp)
   13198:	10000616 	blt	r2,zero,131b4 <fstat+0x38>
   1319c:	e0bffe17 	ldw	r2,-8(fp)
   131a0:	10c00324 	muli	r3,r2,12
   131a4:	00800074 	movhi	r2,1
   131a8:	10959504 	addi	r2,r2,22100
   131ac:	1885883a 	add	r2,r3,r2
   131b0:	00000106 	br	131b8 <fstat+0x3c>
   131b4:	0005883a 	mov	r2,zero
   131b8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   131bc:	e0bffd17 	ldw	r2,-12(fp)
   131c0:	10001026 	beq	r2,zero,13204 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   131c4:	e0bffd17 	ldw	r2,-12(fp)
   131c8:	10800017 	ldw	r2,0(r2)
   131cc:	10800817 	ldw	r2,32(r2)
   131d0:	10000726 	beq	r2,zero,131f0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   131d4:	e0bffd17 	ldw	r2,-12(fp)
   131d8:	10800017 	ldw	r2,0(r2)
   131dc:	10800817 	ldw	r2,32(r2)
   131e0:	e17fff17 	ldw	r5,-4(fp)
   131e4:	e13ffd17 	ldw	r4,-12(fp)
   131e8:	103ee83a 	callr	r2
   131ec:	00000a06 	br	13218 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   131f0:	e0bfff17 	ldw	r2,-4(fp)
   131f4:	00c80004 	movi	r3,8192
   131f8:	10c00115 	stw	r3,4(r2)
      return 0;
   131fc:	0005883a 	mov	r2,zero
   13200:	00000506 	br	13218 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13204:	00131400 	call	13140 <alt_get_errno>
   13208:	1007883a 	mov	r3,r2
   1320c:	00801444 	movi	r2,81
   13210:	18800015 	stw	r2,0(r3)
    return -1;
   13214:	00bfffc4 	movi	r2,-1
  }
}
   13218:	e037883a 	mov	sp,fp
   1321c:	dfc00117 	ldw	ra,4(sp)
   13220:	df000017 	ldw	fp,0(sp)
   13224:	dec00204 	addi	sp,sp,8
   13228:	f800283a 	ret

0001322c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1322c:	defffe04 	addi	sp,sp,-8
   13230:	dfc00115 	stw	ra,4(sp)
   13234:	df000015 	stw	fp,0(sp)
   13238:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1323c:	d0a00917 	ldw	r2,-32732(gp)
   13240:	10000326 	beq	r2,zero,13250 <alt_get_errno+0x24>
   13244:	d0a00917 	ldw	r2,-32732(gp)
   13248:	103ee83a 	callr	r2
   1324c:	00000106 	br	13254 <alt_get_errno+0x28>
   13250:	d0a29f04 	addi	r2,gp,-30084
}
   13254:	e037883a 	mov	sp,fp
   13258:	dfc00117 	ldw	ra,4(sp)
   1325c:	df000017 	ldw	fp,0(sp)
   13260:	dec00204 	addi	sp,sp,8
   13264:	f800283a 	ret

00013268 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13268:	deffed04 	addi	sp,sp,-76
   1326c:	dfc01215 	stw	ra,72(sp)
   13270:	df001115 	stw	fp,68(sp)
   13274:	df001104 	addi	fp,sp,68
   13278:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1327c:	e0bfff17 	ldw	r2,-4(fp)
   13280:	10000616 	blt	r2,zero,1329c <isatty+0x34>
   13284:	e0bfff17 	ldw	r2,-4(fp)
   13288:	10c00324 	muli	r3,r2,12
   1328c:	00800074 	movhi	r2,1
   13290:	10959504 	addi	r2,r2,22100
   13294:	1885883a 	add	r2,r3,r2
   13298:	00000106 	br	132a0 <isatty+0x38>
   1329c:	0005883a 	mov	r2,zero
   132a0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   132a4:	e0bfef17 	ldw	r2,-68(fp)
   132a8:	10000e26 	beq	r2,zero,132e4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   132ac:	e0bfef17 	ldw	r2,-68(fp)
   132b0:	10800017 	ldw	r2,0(r2)
   132b4:	10800817 	ldw	r2,32(r2)
   132b8:	1000021e 	bne	r2,zero,132c4 <isatty+0x5c>
    {
      return 1;
   132bc:	00800044 	movi	r2,1
   132c0:	00000d06 	br	132f8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   132c4:	e0bff004 	addi	r2,fp,-64
   132c8:	100b883a 	mov	r5,r2
   132cc:	e13fff17 	ldw	r4,-4(fp)
   132d0:	001317c0 	call	1317c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   132d4:	e0bff117 	ldw	r2,-60(fp)
   132d8:	10880020 	cmpeqi	r2,r2,8192
   132dc:	10803fcc 	andi	r2,r2,255
   132e0:	00000506 	br	132f8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   132e4:	001322c0 	call	1322c <alt_get_errno>
   132e8:	1007883a 	mov	r3,r2
   132ec:	00801444 	movi	r2,81
   132f0:	18800015 	stw	r2,0(r3)
    return 0;
   132f4:	0005883a 	mov	r2,zero
  }
}
   132f8:	e037883a 	mov	sp,fp
   132fc:	dfc00117 	ldw	ra,4(sp)
   13300:	df000017 	ldw	fp,0(sp)
   13304:	dec00204 	addi	sp,sp,8
   13308:	f800283a 	ret

0001330c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1330c:	defffc04 	addi	sp,sp,-16
   13310:	df000315 	stw	fp,12(sp)
   13314:	df000304 	addi	fp,sp,12
   13318:	e13ffd15 	stw	r4,-12(fp)
   1331c:	e17ffe15 	stw	r5,-8(fp)
   13320:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   13324:	e0fffe17 	ldw	r3,-8(fp)
   13328:	e0bffd17 	ldw	r2,-12(fp)
   1332c:	18800c26 	beq	r3,r2,13360 <alt_load_section+0x54>
  {
    while( to != end )
   13330:	00000806 	br	13354 <alt_load_section+0x48>
    {
      *to++ = *from++;
   13334:	e0bffe17 	ldw	r2,-8(fp)
   13338:	10c00104 	addi	r3,r2,4
   1333c:	e0fffe15 	stw	r3,-8(fp)
   13340:	e0fffd17 	ldw	r3,-12(fp)
   13344:	19000104 	addi	r4,r3,4
   13348:	e13ffd15 	stw	r4,-12(fp)
   1334c:	18c00017 	ldw	r3,0(r3)
   13350:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   13354:	e0fffe17 	ldw	r3,-8(fp)
   13358:	e0bfff17 	ldw	r2,-4(fp)
   1335c:	18bff51e 	bne	r3,r2,13334 <__alt_data_end+0xffff3334>
    {
      *to++ = *from++;
    }
  }
}
   13360:	0001883a 	nop
   13364:	e037883a 	mov	sp,fp
   13368:	df000017 	ldw	fp,0(sp)
   1336c:	dec00104 	addi	sp,sp,4
   13370:	f800283a 	ret

00013374 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13374:	defffe04 	addi	sp,sp,-8
   13378:	dfc00115 	stw	ra,4(sp)
   1337c:	df000015 	stw	fp,0(sp)
   13380:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   13384:	01800074 	movhi	r6,1
   13388:	31960e04 	addi	r6,r6,22584
   1338c:	01400074 	movhi	r5,1
   13390:	29538004 	addi	r5,r5,19968
   13394:	01000074 	movhi	r4,1
   13398:	21160e04 	addi	r4,r4,22584
   1339c:	001330c0 	call	1330c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   133a0:	01800074 	movhi	r6,1
   133a4:	31807004 	addi	r6,r6,448
   133a8:	01400074 	movhi	r5,1
   133ac:	29400804 	addi	r5,r5,32
   133b0:	01000074 	movhi	r4,1
   133b4:	21000804 	addi	r4,r4,32
   133b8:	001330c0 	call	1330c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   133bc:	01800074 	movhi	r6,1
   133c0:	31938004 	addi	r6,r6,19968
   133c4:	01400074 	movhi	r5,1
   133c8:	29536c04 	addi	r5,r5,19888
   133cc:	01000074 	movhi	r4,1
   133d0:	21136c04 	addi	r4,r4,19888
   133d4:	001330c0 	call	1330c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   133d8:	0013d380 	call	13d38 <alt_dcache_flush_all>
  alt_icache_flush_all();
   133dc:	0013f200 	call	13f20 <alt_icache_flush_all>
}
   133e0:	0001883a 	nop
   133e4:	e037883a 	mov	sp,fp
   133e8:	dfc00117 	ldw	ra,4(sp)
   133ec:	df000017 	ldw	fp,0(sp)
   133f0:	dec00204 	addi	sp,sp,8
   133f4:	f800283a 	ret

000133f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   133f8:	defffe04 	addi	sp,sp,-8
   133fc:	dfc00115 	stw	ra,4(sp)
   13400:	df000015 	stw	fp,0(sp)
   13404:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13408:	d0a00917 	ldw	r2,-32732(gp)
   1340c:	10000326 	beq	r2,zero,1341c <alt_get_errno+0x24>
   13410:	d0a00917 	ldw	r2,-32732(gp)
   13414:	103ee83a 	callr	r2
   13418:	00000106 	br	13420 <alt_get_errno+0x28>
   1341c:	d0a29f04 	addi	r2,gp,-30084
}
   13420:	e037883a 	mov	sp,fp
   13424:	dfc00117 	ldw	ra,4(sp)
   13428:	df000017 	ldw	fp,0(sp)
   1342c:	dec00204 	addi	sp,sp,8
   13430:	f800283a 	ret

00013434 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   13434:	defff904 	addi	sp,sp,-28
   13438:	dfc00615 	stw	ra,24(sp)
   1343c:	df000515 	stw	fp,20(sp)
   13440:	df000504 	addi	fp,sp,20
   13444:	e13ffd15 	stw	r4,-12(fp)
   13448:	e17ffe15 	stw	r5,-8(fp)
   1344c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   13450:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13454:	e0bffd17 	ldw	r2,-12(fp)
   13458:	10000616 	blt	r2,zero,13474 <lseek+0x40>
   1345c:	e0bffd17 	ldw	r2,-12(fp)
   13460:	10c00324 	muli	r3,r2,12
   13464:	00800074 	movhi	r2,1
   13468:	10959504 	addi	r2,r2,22100
   1346c:	1885883a 	add	r2,r3,r2
   13470:	00000106 	br	13478 <lseek+0x44>
   13474:	0005883a 	mov	r2,zero
   13478:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1347c:	e0bffc17 	ldw	r2,-16(fp)
   13480:	10001026 	beq	r2,zero,134c4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   13484:	e0bffc17 	ldw	r2,-16(fp)
   13488:	10800017 	ldw	r2,0(r2)
   1348c:	10800717 	ldw	r2,28(r2)
   13490:	10000926 	beq	r2,zero,134b8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   13494:	e0bffc17 	ldw	r2,-16(fp)
   13498:	10800017 	ldw	r2,0(r2)
   1349c:	10800717 	ldw	r2,28(r2)
   134a0:	e1bfff17 	ldw	r6,-4(fp)
   134a4:	e17ffe17 	ldw	r5,-8(fp)
   134a8:	e13ffc17 	ldw	r4,-16(fp)
   134ac:	103ee83a 	callr	r2
   134b0:	e0bffb15 	stw	r2,-20(fp)
   134b4:	00000506 	br	134cc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   134b8:	00bfde84 	movi	r2,-134
   134bc:	e0bffb15 	stw	r2,-20(fp)
   134c0:	00000206 	br	134cc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   134c4:	00bfebc4 	movi	r2,-81
   134c8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   134cc:	e0bffb17 	ldw	r2,-20(fp)
   134d0:	1000070e 	bge	r2,zero,134f0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   134d4:	00133f80 	call	133f8 <alt_get_errno>
   134d8:	1007883a 	mov	r3,r2
   134dc:	e0bffb17 	ldw	r2,-20(fp)
   134e0:	0085c83a 	sub	r2,zero,r2
   134e4:	18800015 	stw	r2,0(r3)
    rc = -1;
   134e8:	00bfffc4 	movi	r2,-1
   134ec:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   134f0:	e0bffb17 	ldw	r2,-20(fp)
}
   134f4:	e037883a 	mov	sp,fp
   134f8:	dfc00117 	ldw	ra,4(sp)
   134fc:	df000017 	ldw	fp,0(sp)
   13500:	dec00204 	addi	sp,sp,8
   13504:	f800283a 	ret

00013508 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   13508:	defffd04 	addi	sp,sp,-12
   1350c:	dfc00215 	stw	ra,8(sp)
   13510:	df000115 	stw	fp,4(sp)
   13514:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   13518:	0009883a 	mov	r4,zero
   1351c:	00139800 	call	13980 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   13520:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13524:	00139b80 	call	139b8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13528:	01800074 	movhi	r6,1
   1352c:	31937604 	addi	r6,r6,19928
   13530:	01400074 	movhi	r5,1
   13534:	29537604 	addi	r5,r5,19928
   13538:	01000074 	movhi	r4,1
   1353c:	21137604 	addi	r4,r4,19928
   13540:	00142b80 	call	142b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13544:	0013e600 	call	13e60 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   13548:	01000074 	movhi	r4,1
   1354c:	210fb004 	addi	r4,r4,16064
   13550:	0014a1c0 	call	14a1c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13554:	d0a2a017 	ldw	r2,-30080(gp)
   13558:	d0e2a117 	ldw	r3,-30076(gp)
   1355c:	d122a217 	ldw	r4,-30072(gp)
   13560:	200d883a 	mov	r6,r4
   13564:	180b883a 	mov	r5,r3
   13568:	1009883a 	mov	r4,r2
   1356c:	001020c0 	call	1020c <main>
   13570:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   13574:	01000044 	movi	r4,1
   13578:	00130440 	call	13044 <close>
  exit (result);
   1357c:	e13fff17 	ldw	r4,-4(fp)
   13580:	0014a300 	call	14a30 <exit>

00013584 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   13584:	defffe04 	addi	sp,sp,-8
   13588:	df000115 	stw	fp,4(sp)
   1358c:	df000104 	addi	fp,sp,4
   13590:	e13fff15 	stw	r4,-4(fp)
}
   13594:	0001883a 	nop
   13598:	e037883a 	mov	sp,fp
   1359c:	df000017 	ldw	fp,0(sp)
   135a0:	dec00104 	addi	sp,sp,4
   135a4:	f800283a 	ret

000135a8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   135a8:	defffe04 	addi	sp,sp,-8
   135ac:	df000115 	stw	fp,4(sp)
   135b0:	df000104 	addi	fp,sp,4
   135b4:	e13fff15 	stw	r4,-4(fp)
}
   135b8:	0001883a 	nop
   135bc:	e037883a 	mov	sp,fp
   135c0:	df000017 	ldw	fp,0(sp)
   135c4:	dec00104 	addi	sp,sp,4
   135c8:	f800283a 	ret

000135cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   135cc:	defffe04 	addi	sp,sp,-8
   135d0:	dfc00115 	stw	ra,4(sp)
   135d4:	df000015 	stw	fp,0(sp)
   135d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   135dc:	d0a00917 	ldw	r2,-32732(gp)
   135e0:	10000326 	beq	r2,zero,135f0 <alt_get_errno+0x24>
   135e4:	d0a00917 	ldw	r2,-32732(gp)
   135e8:	103ee83a 	callr	r2
   135ec:	00000106 	br	135f4 <alt_get_errno+0x28>
   135f0:	d0a29f04 	addi	r2,gp,-30084
}
   135f4:	e037883a 	mov	sp,fp
   135f8:	dfc00117 	ldw	ra,4(sp)
   135fc:	df000017 	ldw	fp,0(sp)
   13600:	dec00204 	addi	sp,sp,8
   13604:	f800283a 	ret

00013608 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   13608:	defff904 	addi	sp,sp,-28
   1360c:	dfc00615 	stw	ra,24(sp)
   13610:	df000515 	stw	fp,20(sp)
   13614:	df000504 	addi	fp,sp,20
   13618:	e13ffd15 	stw	r4,-12(fp)
   1361c:	e17ffe15 	stw	r5,-8(fp)
   13620:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13624:	e0bffd17 	ldw	r2,-12(fp)
   13628:	10000616 	blt	r2,zero,13644 <read+0x3c>
   1362c:	e0bffd17 	ldw	r2,-12(fp)
   13630:	10c00324 	muli	r3,r2,12
   13634:	00800074 	movhi	r2,1
   13638:	10959504 	addi	r2,r2,22100
   1363c:	1885883a 	add	r2,r3,r2
   13640:	00000106 	br	13648 <read+0x40>
   13644:	0005883a 	mov	r2,zero
   13648:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1364c:	e0bffb17 	ldw	r2,-20(fp)
   13650:	10002226 	beq	r2,zero,136dc <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13654:	e0bffb17 	ldw	r2,-20(fp)
   13658:	10800217 	ldw	r2,8(r2)
   1365c:	108000cc 	andi	r2,r2,3
   13660:	10800060 	cmpeqi	r2,r2,1
   13664:	1000181e 	bne	r2,zero,136c8 <read+0xc0>
        (fd->dev->read))
   13668:	e0bffb17 	ldw	r2,-20(fp)
   1366c:	10800017 	ldw	r2,0(r2)
   13670:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13674:	10001426 	beq	r2,zero,136c8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13678:	e0bffb17 	ldw	r2,-20(fp)
   1367c:	10800017 	ldw	r2,0(r2)
   13680:	10800517 	ldw	r2,20(r2)
   13684:	e0ffff17 	ldw	r3,-4(fp)
   13688:	180d883a 	mov	r6,r3
   1368c:	e17ffe17 	ldw	r5,-8(fp)
   13690:	e13ffb17 	ldw	r4,-20(fp)
   13694:	103ee83a 	callr	r2
   13698:	e0bffc15 	stw	r2,-16(fp)
   1369c:	e0bffc17 	ldw	r2,-16(fp)
   136a0:	1000070e 	bge	r2,zero,136c0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   136a4:	00135cc0 	call	135cc <alt_get_errno>
   136a8:	1007883a 	mov	r3,r2
   136ac:	e0bffc17 	ldw	r2,-16(fp)
   136b0:	0085c83a 	sub	r2,zero,r2
   136b4:	18800015 	stw	r2,0(r3)
          return -1;
   136b8:	00bfffc4 	movi	r2,-1
   136bc:	00000c06 	br	136f0 <read+0xe8>
        }
        return rval;
   136c0:	e0bffc17 	ldw	r2,-16(fp)
   136c4:	00000a06 	br	136f0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   136c8:	00135cc0 	call	135cc <alt_get_errno>
   136cc:	1007883a 	mov	r3,r2
   136d0:	00800344 	movi	r2,13
   136d4:	18800015 	stw	r2,0(r3)
   136d8:	00000406 	br	136ec <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   136dc:	00135cc0 	call	135cc <alt_get_errno>
   136e0:	1007883a 	mov	r3,r2
   136e4:	00801444 	movi	r2,81
   136e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   136ec:	00bfffc4 	movi	r2,-1
}
   136f0:	e037883a 	mov	sp,fp
   136f4:	dfc00117 	ldw	ra,4(sp)
   136f8:	df000017 	ldw	fp,0(sp)
   136fc:	dec00204 	addi	sp,sp,8
   13700:	f800283a 	ret

00013704 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13704:	defffe04 	addi	sp,sp,-8
   13708:	df000115 	stw	fp,4(sp)
   1370c:	df000104 	addi	fp,sp,4
   13710:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   13714:	e0bfff17 	ldw	r2,-4(fp)
   13718:	108000d0 	cmplti	r2,r2,3
   1371c:	10000d1e 	bne	r2,zero,13754 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   13720:	00800074 	movhi	r2,1
   13724:	10959504 	addi	r2,r2,22100
   13728:	e0ffff17 	ldw	r3,-4(fp)
   1372c:	18c00324 	muli	r3,r3,12
   13730:	10c5883a 	add	r2,r2,r3
   13734:	10800204 	addi	r2,r2,8
   13738:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1373c:	00800074 	movhi	r2,1
   13740:	10959504 	addi	r2,r2,22100
   13744:	e0ffff17 	ldw	r3,-4(fp)
   13748:	18c00324 	muli	r3,r3,12
   1374c:	10c5883a 	add	r2,r2,r3
   13750:	10000015 	stw	zero,0(r2)
  }
}
   13754:	0001883a 	nop
   13758:	e037883a 	mov	sp,fp
   1375c:	df000017 	ldw	fp,0(sp)
   13760:	dec00104 	addi	sp,sp,4
   13764:	f800283a 	ret

00013768 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13768:	defff904 	addi	sp,sp,-28
   1376c:	df000615 	stw	fp,24(sp)
   13770:	df000604 	addi	fp,sp,24
   13774:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13778:	0005303a 	rdctl	r2,status
   1377c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13780:	e0fffe17 	ldw	r3,-8(fp)
   13784:	00bfff84 	movi	r2,-2
   13788:	1884703a 	and	r2,r3,r2
   1378c:	1001703a 	wrctl	status,r2
  
  return context;
   13790:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13794:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13798:	d0a00a17 	ldw	r2,-32728(gp)
   1379c:	10c000c4 	addi	r3,r2,3
   137a0:	00bfff04 	movi	r2,-4
   137a4:	1884703a 	and	r2,r3,r2
   137a8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   137ac:	d0e00a17 	ldw	r3,-32728(gp)
   137b0:	e0bfff17 	ldw	r2,-4(fp)
   137b4:	1887883a 	add	r3,r3,r2
   137b8:	008000b4 	movhi	r2,2
   137bc:	10800004 	addi	r2,r2,0
   137c0:	10c0062e 	bgeu	r2,r3,137dc <sbrk+0x74>
   137c4:	e0bffb17 	ldw	r2,-20(fp)
   137c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   137cc:	e0bffa17 	ldw	r2,-24(fp)
   137d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   137d4:	00bfffc4 	movi	r2,-1
   137d8:	00000b06 	br	13808 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   137dc:	d0a00a17 	ldw	r2,-32728(gp)
   137e0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   137e4:	d0e00a17 	ldw	r3,-32728(gp)
   137e8:	e0bfff17 	ldw	r2,-4(fp)
   137ec:	1885883a 	add	r2,r3,r2
   137f0:	d0a00a15 	stw	r2,-32728(gp)
   137f4:	e0bffb17 	ldw	r2,-20(fp)
   137f8:	e0bffc15 	stw	r2,-16(fp)
   137fc:	e0bffc17 	ldw	r2,-16(fp)
   13800:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   13804:	e0bffd17 	ldw	r2,-12(fp)
} 
   13808:	e037883a 	mov	sp,fp
   1380c:	df000017 	ldw	fp,0(sp)
   13810:	dec00104 	addi	sp,sp,4
   13814:	f800283a 	ret

00013818 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13818:	defffe04 	addi	sp,sp,-8
   1381c:	dfc00115 	stw	ra,4(sp)
   13820:	df000015 	stw	fp,0(sp)
   13824:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13828:	d0a00917 	ldw	r2,-32732(gp)
   1382c:	10000326 	beq	r2,zero,1383c <alt_get_errno+0x24>
   13830:	d0a00917 	ldw	r2,-32732(gp)
   13834:	103ee83a 	callr	r2
   13838:	00000106 	br	13840 <alt_get_errno+0x28>
   1383c:	d0a29f04 	addi	r2,gp,-30084
}
   13840:	e037883a 	mov	sp,fp
   13844:	dfc00117 	ldw	ra,4(sp)
   13848:	df000017 	ldw	fp,0(sp)
   1384c:	dec00204 	addi	sp,sp,8
   13850:	f800283a 	ret

00013854 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13854:	defff904 	addi	sp,sp,-28
   13858:	dfc00615 	stw	ra,24(sp)
   1385c:	df000515 	stw	fp,20(sp)
   13860:	df000504 	addi	fp,sp,20
   13864:	e13ffd15 	stw	r4,-12(fp)
   13868:	e17ffe15 	stw	r5,-8(fp)
   1386c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13870:	e0bffd17 	ldw	r2,-12(fp)
   13874:	10000616 	blt	r2,zero,13890 <write+0x3c>
   13878:	e0bffd17 	ldw	r2,-12(fp)
   1387c:	10c00324 	muli	r3,r2,12
   13880:	00800074 	movhi	r2,1
   13884:	10959504 	addi	r2,r2,22100
   13888:	1885883a 	add	r2,r3,r2
   1388c:	00000106 	br	13894 <write+0x40>
   13890:	0005883a 	mov	r2,zero
   13894:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13898:	e0bffb17 	ldw	r2,-20(fp)
   1389c:	10002126 	beq	r2,zero,13924 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   138a0:	e0bffb17 	ldw	r2,-20(fp)
   138a4:	10800217 	ldw	r2,8(r2)
   138a8:	108000cc 	andi	r2,r2,3
   138ac:	10001826 	beq	r2,zero,13910 <write+0xbc>
   138b0:	e0bffb17 	ldw	r2,-20(fp)
   138b4:	10800017 	ldw	r2,0(r2)
   138b8:	10800617 	ldw	r2,24(r2)
   138bc:	10001426 	beq	r2,zero,13910 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   138c0:	e0bffb17 	ldw	r2,-20(fp)
   138c4:	10800017 	ldw	r2,0(r2)
   138c8:	10800617 	ldw	r2,24(r2)
   138cc:	e0ffff17 	ldw	r3,-4(fp)
   138d0:	180d883a 	mov	r6,r3
   138d4:	e17ffe17 	ldw	r5,-8(fp)
   138d8:	e13ffb17 	ldw	r4,-20(fp)
   138dc:	103ee83a 	callr	r2
   138e0:	e0bffc15 	stw	r2,-16(fp)
   138e4:	e0bffc17 	ldw	r2,-16(fp)
   138e8:	1000070e 	bge	r2,zero,13908 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   138ec:	00138180 	call	13818 <alt_get_errno>
   138f0:	1007883a 	mov	r3,r2
   138f4:	e0bffc17 	ldw	r2,-16(fp)
   138f8:	0085c83a 	sub	r2,zero,r2
   138fc:	18800015 	stw	r2,0(r3)
        return -1;
   13900:	00bfffc4 	movi	r2,-1
   13904:	00000c06 	br	13938 <write+0xe4>
      }
      return rval;
   13908:	e0bffc17 	ldw	r2,-16(fp)
   1390c:	00000a06 	br	13938 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   13910:	00138180 	call	13818 <alt_get_errno>
   13914:	1007883a 	mov	r3,r2
   13918:	00800344 	movi	r2,13
   1391c:	18800015 	stw	r2,0(r3)
   13920:	00000406 	br	13934 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   13924:	00138180 	call	13818 <alt_get_errno>
   13928:	1007883a 	mov	r3,r2
   1392c:	00801444 	movi	r2,81
   13930:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13934:	00bfffc4 	movi	r2,-1
}
   13938:	e037883a 	mov	sp,fp
   1393c:	dfc00117 	ldw	ra,4(sp)
   13940:	df000017 	ldw	fp,0(sp)
   13944:	dec00204 	addi	sp,sp,8
   13948:	f800283a 	ret

0001394c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1394c:	defffd04 	addi	sp,sp,-12
   13950:	dfc00215 	stw	ra,8(sp)
   13954:	df000115 	stw	fp,4(sp)
   13958:	df000104 	addi	fp,sp,4
   1395c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13960:	d1600604 	addi	r5,gp,-32744
   13964:	e13fff17 	ldw	r4,-4(fp)
   13968:	0013dbc0 	call	13dbc <alt_dev_llist_insert>
}
   1396c:	e037883a 	mov	sp,fp
   13970:	dfc00117 	ldw	ra,4(sp)
   13974:	df000017 	ldw	fp,0(sp)
   13978:	dec00204 	addi	sp,sp,8
   1397c:	f800283a 	ret

00013980 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13980:	defffd04 	addi	sp,sp,-12
   13984:	dfc00215 	stw	ra,8(sp)
   13988:	df000115 	stw	fp,4(sp)
   1398c:	df000104 	addi	fp,sp,4
   13990:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   13994:	001472c0 	call	1472c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13998:	00800044 	movi	r2,1
   1399c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   139a0:	0001883a 	nop
   139a4:	e037883a 	mov	sp,fp
   139a8:	dfc00117 	ldw	ra,4(sp)
   139ac:	df000017 	ldw	fp,0(sp)
   139b0:	dec00204 	addi	sp,sp,8
   139b4:	f800283a 	ret

000139b8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   139b8:	defffe04 	addi	sp,sp,-8
   139bc:	dfc00115 	stw	ra,4(sp)
   139c0:	df000015 	stw	fp,0(sp)
   139c4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   139c8:	01c0fa04 	movi	r7,1000
   139cc:	01800084 	movi	r6,2
   139d0:	000b883a 	mov	r5,zero
   139d4:	010000b4 	movhi	r4,2
   139d8:	21041004 	addi	r4,r4,4160
   139dc:	0013cbc0 	call	13cbc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   139e0:	01000074 	movhi	r4,1
   139e4:	2115f504 	addi	r4,r4,22484
   139e8:	001394c0 	call	1394c <alt_dev_reg>
}
   139ec:	0001883a 	nop
   139f0:	e037883a 	mov	sp,fp
   139f4:	dfc00117 	ldw	ra,4(sp)
   139f8:	df000017 	ldw	fp,0(sp)
   139fc:	dec00204 	addi	sp,sp,8
   13a00:	f800283a 	ret

00013a04 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   13a04:	defffa04 	addi	sp,sp,-24
   13a08:	dfc00515 	stw	ra,20(sp)
   13a0c:	df000415 	stw	fp,16(sp)
   13a10:	df000404 	addi	fp,sp,16
   13a14:	e13ffd15 	stw	r4,-12(fp)
   13a18:	e17ffe15 	stw	r5,-8(fp)
   13a1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13a20:	e0bffd17 	ldw	r2,-12(fp)
   13a24:	10800017 	ldw	r2,0(r2)
   13a28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   13a2c:	e0bffc17 	ldw	r2,-16(fp)
   13a30:	10c00a04 	addi	r3,r2,40
   13a34:	e0bffd17 	ldw	r2,-12(fp)
   13a38:	10800217 	ldw	r2,8(r2)
   13a3c:	100f883a 	mov	r7,r2
   13a40:	e1bfff17 	ldw	r6,-4(fp)
   13a44:	e17ffe17 	ldw	r5,-8(fp)
   13a48:	1809883a 	mov	r4,r3
   13a4c:	0013ac40 	call	13ac4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13a50:	e037883a 	mov	sp,fp
   13a54:	dfc00117 	ldw	ra,4(sp)
   13a58:	df000017 	ldw	fp,0(sp)
   13a5c:	dec00204 	addi	sp,sp,8
   13a60:	f800283a 	ret

00013a64 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13a64:	defffa04 	addi	sp,sp,-24
   13a68:	dfc00515 	stw	ra,20(sp)
   13a6c:	df000415 	stw	fp,16(sp)
   13a70:	df000404 	addi	fp,sp,16
   13a74:	e13ffd15 	stw	r4,-12(fp)
   13a78:	e17ffe15 	stw	r5,-8(fp)
   13a7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13a80:	e0bffd17 	ldw	r2,-12(fp)
   13a84:	10800017 	ldw	r2,0(r2)
   13a88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13a8c:	e0bffc17 	ldw	r2,-16(fp)
   13a90:	10c00a04 	addi	r3,r2,40
   13a94:	e0bffd17 	ldw	r2,-12(fp)
   13a98:	10800217 	ldw	r2,8(r2)
   13a9c:	100f883a 	mov	r7,r2
   13aa0:	e1bfff17 	ldw	r6,-4(fp)
   13aa4:	e17ffe17 	ldw	r5,-8(fp)
   13aa8:	1809883a 	mov	r4,r3
   13aac:	0013bb00 	call	13bb0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13ab0:	e037883a 	mov	sp,fp
   13ab4:	dfc00117 	ldw	ra,4(sp)
   13ab8:	df000017 	ldw	fp,0(sp)
   13abc:	dec00204 	addi	sp,sp,8
   13ac0:	f800283a 	ret

00013ac4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   13ac4:	defff704 	addi	sp,sp,-36
   13ac8:	df000815 	stw	fp,32(sp)
   13acc:	df000804 	addi	fp,sp,32
   13ad0:	e13ffc15 	stw	r4,-16(fp)
   13ad4:	e17ffd15 	stw	r5,-12(fp)
   13ad8:	e1bffe15 	stw	r6,-8(fp)
   13adc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   13ae0:	e0bffc17 	ldw	r2,-16(fp)
   13ae4:	10800017 	ldw	r2,0(r2)
   13ae8:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   13aec:	e0bffd17 	ldw	r2,-12(fp)
   13af0:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   13af4:	e0bffe17 	ldw	r2,-8(fp)
   13af8:	e0fffd17 	ldw	r3,-12(fp)
   13afc:	1885883a 	add	r2,r3,r2
   13b00:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   13b04:	00001206 	br	13b50 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   13b08:	e0bff917 	ldw	r2,-28(fp)
   13b0c:	10800037 	ldwio	r2,0(r2)
   13b10:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   13b14:	e0bffb17 	ldw	r2,-20(fp)
   13b18:	10a0000c 	andi	r2,r2,32768
   13b1c:	10000626 	beq	r2,zero,13b38 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   13b20:	e0bff817 	ldw	r2,-32(fp)
   13b24:	10c00044 	addi	r3,r2,1
   13b28:	e0fff815 	stw	r3,-32(fp)
   13b2c:	e0fffb17 	ldw	r3,-20(fp)
   13b30:	10c00005 	stb	r3,0(r2)
   13b34:	00000606 	br	13b50 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   13b38:	e0fff817 	ldw	r3,-32(fp)
   13b3c:	e0bffd17 	ldw	r2,-12(fp)
   13b40:	1880071e 	bne	r3,r2,13b60 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   13b44:	e0bfff17 	ldw	r2,-4(fp)
   13b48:	1090000c 	andi	r2,r2,16384
   13b4c:	1000061e 	bne	r2,zero,13b68 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   13b50:	e0fff817 	ldw	r3,-32(fp)
   13b54:	e0bffa17 	ldw	r2,-24(fp)
   13b58:	18bfeb36 	bltu	r3,r2,13b08 <__alt_data_end+0xffff3b08>
   13b5c:	00000306 	br	13b6c <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   13b60:	0001883a 	nop
   13b64:	00000106 	br	13b6c <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   13b68:	0001883a 	nop
    
  }

  if (ptr != buffer)
   13b6c:	e0fff817 	ldw	r3,-32(fp)
   13b70:	e0bffd17 	ldw	r2,-12(fp)
   13b74:	18800426 	beq	r3,r2,13b88 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   13b78:	e0fff817 	ldw	r3,-32(fp)
   13b7c:	e0bffd17 	ldw	r2,-12(fp)
   13b80:	1885c83a 	sub	r2,r3,r2
   13b84:	00000606 	br	13ba0 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   13b88:	e0bfff17 	ldw	r2,-4(fp)
   13b8c:	1090000c 	andi	r2,r2,16384
   13b90:	10000226 	beq	r2,zero,13b9c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   13b94:	00bffd44 	movi	r2,-11
   13b98:	00000106 	br	13ba0 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   13b9c:	00bffec4 	movi	r2,-5
}
   13ba0:	e037883a 	mov	sp,fp
   13ba4:	df000017 	ldw	fp,0(sp)
   13ba8:	dec00104 	addi	sp,sp,4
   13bac:	f800283a 	ret

00013bb0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   13bb0:	defff904 	addi	sp,sp,-28
   13bb4:	df000615 	stw	fp,24(sp)
   13bb8:	df000604 	addi	fp,sp,24
   13bbc:	e13ffc15 	stw	r4,-16(fp)
   13bc0:	e17ffd15 	stw	r5,-12(fp)
   13bc4:	e1bffe15 	stw	r6,-8(fp)
   13bc8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   13bcc:	e0bffc17 	ldw	r2,-16(fp)
   13bd0:	10800017 	ldw	r2,0(r2)
   13bd4:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   13bd8:	e0bffe17 	ldw	r2,-8(fp)
   13bdc:	e0fffd17 	ldw	r3,-12(fp)
   13be0:	1885883a 	add	r2,r3,r2
   13be4:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   13be8:	00000e06 	br	13c24 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   13bec:	e0bffa17 	ldw	r2,-24(fp)
   13bf0:	10800104 	addi	r2,r2,4
   13bf4:	10800037 	ldwio	r2,0(r2)
   13bf8:	10bfffec 	andhi	r2,r2,65535
   13bfc:	10000926 	beq	r2,zero,13c24 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   13c00:	e0fffa17 	ldw	r3,-24(fp)
   13c04:	e0bffd17 	ldw	r2,-12(fp)
   13c08:	11000044 	addi	r4,r2,1
   13c0c:	e13ffd15 	stw	r4,-12(fp)
   13c10:	10800003 	ldbu	r2,0(r2)
   13c14:	10803fcc 	andi	r2,r2,255
   13c18:	1080201c 	xori	r2,r2,128
   13c1c:	10bfe004 	addi	r2,r2,-128
   13c20:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   13c24:	e0fffd17 	ldw	r3,-12(fp)
   13c28:	e0bffb17 	ldw	r2,-20(fp)
   13c2c:	18bfef36 	bltu	r3,r2,13bec <__alt_data_end+0xffff3bec>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   13c30:	e0bffe17 	ldw	r2,-8(fp)
}
   13c34:	e037883a 	mov	sp,fp
   13c38:	df000017 	ldw	fp,0(sp)
   13c3c:	dec00104 	addi	sp,sp,4
   13c40:	f800283a 	ret

00013c44 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   13c44:	defffa04 	addi	sp,sp,-24
   13c48:	dfc00515 	stw	ra,20(sp)
   13c4c:	df000415 	stw	fp,16(sp)
   13c50:	df000404 	addi	fp,sp,16
   13c54:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   13c58:	0007883a 	mov	r3,zero
   13c5c:	e0bfff17 	ldw	r2,-4(fp)
   13c60:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   13c64:	e0bfff17 	ldw	r2,-4(fp)
   13c68:	10800104 	addi	r2,r2,4
   13c6c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c70:	0005303a 	rdctl	r2,status
   13c74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c78:	e0fffd17 	ldw	r3,-12(fp)
   13c7c:	00bfff84 	movi	r2,-2
   13c80:	1884703a 	and	r2,r3,r2
   13c84:	1001703a 	wrctl	status,r2
  
  return context;
   13c88:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   13c8c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   13c90:	00146240 	call	14624 <alt_tick>
   13c94:	e0bffc17 	ldw	r2,-16(fp)
   13c98:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c9c:	e0bffe17 	ldw	r2,-8(fp)
   13ca0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   13ca4:	0001883a 	nop
   13ca8:	e037883a 	mov	sp,fp
   13cac:	dfc00117 	ldw	ra,4(sp)
   13cb0:	df000017 	ldw	fp,0(sp)
   13cb4:	dec00204 	addi	sp,sp,8
   13cb8:	f800283a 	ret

00013cbc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   13cbc:	defff804 	addi	sp,sp,-32
   13cc0:	dfc00715 	stw	ra,28(sp)
   13cc4:	df000615 	stw	fp,24(sp)
   13cc8:	df000604 	addi	fp,sp,24
   13ccc:	e13ffc15 	stw	r4,-16(fp)
   13cd0:	e17ffd15 	stw	r5,-12(fp)
   13cd4:	e1bffe15 	stw	r6,-8(fp)
   13cd8:	e1ffff15 	stw	r7,-4(fp)
   13cdc:	e0bfff17 	ldw	r2,-4(fp)
   13ce0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   13ce4:	d0a2a417 	ldw	r2,-30064(gp)
   13ce8:	1000021e 	bne	r2,zero,13cf4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   13cec:	e0bffb17 	ldw	r2,-20(fp)
   13cf0:	d0a2a415 	stw	r2,-30064(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   13cf4:	e0bffc17 	ldw	r2,-16(fp)
   13cf8:	10800104 	addi	r2,r2,4
   13cfc:	00c001c4 	movi	r3,7
   13d00:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   13d04:	d8000015 	stw	zero,0(sp)
   13d08:	e1fffc17 	ldw	r7,-16(fp)
   13d0c:	01800074 	movhi	r6,1
   13d10:	318f1104 	addi	r6,r6,15428
   13d14:	e17ffe17 	ldw	r5,-8(fp)
   13d18:	e13ffd17 	ldw	r4,-12(fp)
   13d1c:	0013f540 	call	13f54 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   13d20:	0001883a 	nop
   13d24:	e037883a 	mov	sp,fp
   13d28:	dfc00117 	ldw	ra,4(sp)
   13d2c:	df000017 	ldw	fp,0(sp)
   13d30:	dec00204 	addi	sp,sp,8
   13d34:	f800283a 	ret

00013d38 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   13d38:	defffe04 	addi	sp,sp,-8
   13d3c:	df000115 	stw	fp,4(sp)
   13d40:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   13d44:	e03fff15 	stw	zero,-4(fp)
   13d48:	00000506 	br	13d60 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   13d4c:	e0bfff17 	ldw	r2,-4(fp)
   13d50:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   13d54:	e0bfff17 	ldw	r2,-4(fp)
   13d58:	10800804 	addi	r2,r2,32
   13d5c:	e0bfff15 	stw	r2,-4(fp)
   13d60:	e0bfff17 	ldw	r2,-4(fp)
   13d64:	10820030 	cmpltui	r2,r2,2048
   13d68:	103ff81e 	bne	r2,zero,13d4c <__alt_data_end+0xffff3d4c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   13d6c:	0001883a 	nop
   13d70:	e037883a 	mov	sp,fp
   13d74:	df000017 	ldw	fp,0(sp)
   13d78:	dec00104 	addi	sp,sp,4
   13d7c:	f800283a 	ret

00013d80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13d80:	defffe04 	addi	sp,sp,-8
   13d84:	dfc00115 	stw	ra,4(sp)
   13d88:	df000015 	stw	fp,0(sp)
   13d8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13d90:	d0a00917 	ldw	r2,-32732(gp)
   13d94:	10000326 	beq	r2,zero,13da4 <alt_get_errno+0x24>
   13d98:	d0a00917 	ldw	r2,-32732(gp)
   13d9c:	103ee83a 	callr	r2
   13da0:	00000106 	br	13da8 <alt_get_errno+0x28>
   13da4:	d0a29f04 	addi	r2,gp,-30084
}
   13da8:	e037883a 	mov	sp,fp
   13dac:	dfc00117 	ldw	ra,4(sp)
   13db0:	df000017 	ldw	fp,0(sp)
   13db4:	dec00204 	addi	sp,sp,8
   13db8:	f800283a 	ret

00013dbc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   13dbc:	defffa04 	addi	sp,sp,-24
   13dc0:	dfc00515 	stw	ra,20(sp)
   13dc4:	df000415 	stw	fp,16(sp)
   13dc8:	df000404 	addi	fp,sp,16
   13dcc:	e13ffe15 	stw	r4,-8(fp)
   13dd0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   13dd4:	e0bffe17 	ldw	r2,-8(fp)
   13dd8:	10000326 	beq	r2,zero,13de8 <alt_dev_llist_insert+0x2c>
   13ddc:	e0bffe17 	ldw	r2,-8(fp)
   13de0:	10800217 	ldw	r2,8(r2)
   13de4:	1000061e 	bne	r2,zero,13e00 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   13de8:	0013d800 	call	13d80 <alt_get_errno>
   13dec:	1007883a 	mov	r3,r2
   13df0:	00800584 	movi	r2,22
   13df4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   13df8:	00bffa84 	movi	r2,-22
   13dfc:	00001306 	br	13e4c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   13e00:	e0bffe17 	ldw	r2,-8(fp)
   13e04:	e0ffff17 	ldw	r3,-4(fp)
   13e08:	e0fffc15 	stw	r3,-16(fp)
   13e0c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   13e10:	e0bffd17 	ldw	r2,-12(fp)
   13e14:	e0fffc17 	ldw	r3,-16(fp)
   13e18:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   13e1c:	e0bffc17 	ldw	r2,-16(fp)
   13e20:	10c00017 	ldw	r3,0(r2)
   13e24:	e0bffd17 	ldw	r2,-12(fp)
   13e28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   13e2c:	e0bffc17 	ldw	r2,-16(fp)
   13e30:	10800017 	ldw	r2,0(r2)
   13e34:	e0fffd17 	ldw	r3,-12(fp)
   13e38:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   13e3c:	e0bffc17 	ldw	r2,-16(fp)
   13e40:	e0fffd17 	ldw	r3,-12(fp)
   13e44:	10c00015 	stw	r3,0(r2)

  return 0;  
   13e48:	0005883a 	mov	r2,zero
}
   13e4c:	e037883a 	mov	sp,fp
   13e50:	dfc00117 	ldw	ra,4(sp)
   13e54:	df000017 	ldw	fp,0(sp)
   13e58:	dec00204 	addi	sp,sp,8
   13e5c:	f800283a 	ret

00013e60 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   13e60:	defffd04 	addi	sp,sp,-12
   13e64:	dfc00215 	stw	ra,8(sp)
   13e68:	df000115 	stw	fp,4(sp)
   13e6c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   13e70:	00800074 	movhi	r2,1
   13e74:	10936b04 	addi	r2,r2,19884
   13e78:	e0bfff15 	stw	r2,-4(fp)
   13e7c:	00000606 	br	13e98 <_do_ctors+0x38>
        (*ctor) (); 
   13e80:	e0bfff17 	ldw	r2,-4(fp)
   13e84:	10800017 	ldw	r2,0(r2)
   13e88:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   13e8c:	e0bfff17 	ldw	r2,-4(fp)
   13e90:	10bfff04 	addi	r2,r2,-4
   13e94:	e0bfff15 	stw	r2,-4(fp)
   13e98:	e0ffff17 	ldw	r3,-4(fp)
   13e9c:	00800074 	movhi	r2,1
   13ea0:	10936c04 	addi	r2,r2,19888
   13ea4:	18bff62e 	bgeu	r3,r2,13e80 <__alt_data_end+0xffff3e80>
        (*ctor) (); 
}
   13ea8:	0001883a 	nop
   13eac:	e037883a 	mov	sp,fp
   13eb0:	dfc00117 	ldw	ra,4(sp)
   13eb4:	df000017 	ldw	fp,0(sp)
   13eb8:	dec00204 	addi	sp,sp,8
   13ebc:	f800283a 	ret

00013ec0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   13ec0:	defffd04 	addi	sp,sp,-12
   13ec4:	dfc00215 	stw	ra,8(sp)
   13ec8:	df000115 	stw	fp,4(sp)
   13ecc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   13ed0:	00800074 	movhi	r2,1
   13ed4:	10936b04 	addi	r2,r2,19884
   13ed8:	e0bfff15 	stw	r2,-4(fp)
   13edc:	00000606 	br	13ef8 <_do_dtors+0x38>
        (*dtor) (); 
   13ee0:	e0bfff17 	ldw	r2,-4(fp)
   13ee4:	10800017 	ldw	r2,0(r2)
   13ee8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   13eec:	e0bfff17 	ldw	r2,-4(fp)
   13ef0:	10bfff04 	addi	r2,r2,-4
   13ef4:	e0bfff15 	stw	r2,-4(fp)
   13ef8:	e0ffff17 	ldw	r3,-4(fp)
   13efc:	00800074 	movhi	r2,1
   13f00:	10936c04 	addi	r2,r2,19888
   13f04:	18bff62e 	bgeu	r3,r2,13ee0 <__alt_data_end+0xffff3ee0>
        (*dtor) (); 
}
   13f08:	0001883a 	nop
   13f0c:	e037883a 	mov	sp,fp
   13f10:	dfc00117 	ldw	ra,4(sp)
   13f14:	df000017 	ldw	fp,0(sp)
   13f18:	dec00204 	addi	sp,sp,8
   13f1c:	f800283a 	ret

00013f20 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   13f20:	defffe04 	addi	sp,sp,-8
   13f24:	dfc00115 	stw	ra,4(sp)
   13f28:	df000015 	stw	fp,0(sp)
   13f2c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   13f30:	01440004 	movi	r5,4096
   13f34:	0009883a 	mov	r4,zero
   13f38:	001498c0 	call	1498c <alt_icache_flush>
#endif
}
   13f3c:	0001883a 	nop
   13f40:	e037883a 	mov	sp,fp
   13f44:	dfc00117 	ldw	ra,4(sp)
   13f48:	df000017 	ldw	fp,0(sp)
   13f4c:	dec00204 	addi	sp,sp,8
   13f50:	f800283a 	ret

00013f54 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13f54:	defff904 	addi	sp,sp,-28
   13f58:	dfc00615 	stw	ra,24(sp)
   13f5c:	df000515 	stw	fp,20(sp)
   13f60:	df000504 	addi	fp,sp,20
   13f64:	e13ffc15 	stw	r4,-16(fp)
   13f68:	e17ffd15 	stw	r5,-12(fp)
   13f6c:	e1bffe15 	stw	r6,-8(fp)
   13f70:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   13f74:	e0800217 	ldw	r2,8(fp)
   13f78:	d8800015 	stw	r2,0(sp)
   13f7c:	e1ffff17 	ldw	r7,-4(fp)
   13f80:	e1bffe17 	ldw	r6,-8(fp)
   13f84:	e17ffd17 	ldw	r5,-12(fp)
   13f88:	e13ffc17 	ldw	r4,-16(fp)
   13f8c:	00141040 	call	14104 <alt_iic_isr_register>
}  
   13f90:	e037883a 	mov	sp,fp
   13f94:	dfc00117 	ldw	ra,4(sp)
   13f98:	df000017 	ldw	fp,0(sp)
   13f9c:	dec00204 	addi	sp,sp,8
   13fa0:	f800283a 	ret

00013fa4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   13fa4:	defff904 	addi	sp,sp,-28
   13fa8:	df000615 	stw	fp,24(sp)
   13fac:	df000604 	addi	fp,sp,24
   13fb0:	e13ffe15 	stw	r4,-8(fp)
   13fb4:	e17fff15 	stw	r5,-4(fp)
   13fb8:	e0bfff17 	ldw	r2,-4(fp)
   13fbc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13fc0:	0005303a 	rdctl	r2,status
   13fc4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13fc8:	e0fffb17 	ldw	r3,-20(fp)
   13fcc:	00bfff84 	movi	r2,-2
   13fd0:	1884703a 	and	r2,r3,r2
   13fd4:	1001703a 	wrctl	status,r2
  
  return context;
   13fd8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13fdc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   13fe0:	00c00044 	movi	r3,1
   13fe4:	e0bffa17 	ldw	r2,-24(fp)
   13fe8:	1884983a 	sll	r2,r3,r2
   13fec:	1007883a 	mov	r3,r2
   13ff0:	d0a2a317 	ldw	r2,-30068(gp)
   13ff4:	1884b03a 	or	r2,r3,r2
   13ff8:	d0a2a315 	stw	r2,-30068(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13ffc:	d0a2a317 	ldw	r2,-30068(gp)
   14000:	100170fa 	wrctl	ienable,r2
   14004:	e0bffc17 	ldw	r2,-16(fp)
   14008:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1400c:	e0bffd17 	ldw	r2,-12(fp)
   14010:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14014:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   14018:	0001883a 	nop
}
   1401c:	e037883a 	mov	sp,fp
   14020:	df000017 	ldw	fp,0(sp)
   14024:	dec00104 	addi	sp,sp,4
   14028:	f800283a 	ret

0001402c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1402c:	defff904 	addi	sp,sp,-28
   14030:	df000615 	stw	fp,24(sp)
   14034:	df000604 	addi	fp,sp,24
   14038:	e13ffe15 	stw	r4,-8(fp)
   1403c:	e17fff15 	stw	r5,-4(fp)
   14040:	e0bfff17 	ldw	r2,-4(fp)
   14044:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14048:	0005303a 	rdctl	r2,status
   1404c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14050:	e0fffb17 	ldw	r3,-20(fp)
   14054:	00bfff84 	movi	r2,-2
   14058:	1884703a 	and	r2,r3,r2
   1405c:	1001703a 	wrctl	status,r2
  
  return context;
   14060:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14064:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   14068:	00c00044 	movi	r3,1
   1406c:	e0bffa17 	ldw	r2,-24(fp)
   14070:	1884983a 	sll	r2,r3,r2
   14074:	0084303a 	nor	r2,zero,r2
   14078:	1007883a 	mov	r3,r2
   1407c:	d0a2a317 	ldw	r2,-30068(gp)
   14080:	1884703a 	and	r2,r3,r2
   14084:	d0a2a315 	stw	r2,-30068(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14088:	d0a2a317 	ldw	r2,-30068(gp)
   1408c:	100170fa 	wrctl	ienable,r2
   14090:	e0bffc17 	ldw	r2,-16(fp)
   14094:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14098:	e0bffd17 	ldw	r2,-12(fp)
   1409c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   140a0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   140a4:	0001883a 	nop
}
   140a8:	e037883a 	mov	sp,fp
   140ac:	df000017 	ldw	fp,0(sp)
   140b0:	dec00104 	addi	sp,sp,4
   140b4:	f800283a 	ret

000140b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   140b8:	defffc04 	addi	sp,sp,-16
   140bc:	df000315 	stw	fp,12(sp)
   140c0:	df000304 	addi	fp,sp,12
   140c4:	e13ffe15 	stw	r4,-8(fp)
   140c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   140cc:	000530fa 	rdctl	r2,ienable
   140d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   140d4:	00c00044 	movi	r3,1
   140d8:	e0bfff17 	ldw	r2,-4(fp)
   140dc:	1884983a 	sll	r2,r3,r2
   140e0:	1007883a 	mov	r3,r2
   140e4:	e0bffd17 	ldw	r2,-12(fp)
   140e8:	1884703a 	and	r2,r3,r2
   140ec:	1004c03a 	cmpne	r2,r2,zero
   140f0:	10803fcc 	andi	r2,r2,255
}
   140f4:	e037883a 	mov	sp,fp
   140f8:	df000017 	ldw	fp,0(sp)
   140fc:	dec00104 	addi	sp,sp,4
   14100:	f800283a 	ret

00014104 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14104:	defff504 	addi	sp,sp,-44
   14108:	dfc00a15 	stw	ra,40(sp)
   1410c:	df000915 	stw	fp,36(sp)
   14110:	df000904 	addi	fp,sp,36
   14114:	e13ffc15 	stw	r4,-16(fp)
   14118:	e17ffd15 	stw	r5,-12(fp)
   1411c:	e1bffe15 	stw	r6,-8(fp)
   14120:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   14124:	00bffa84 	movi	r2,-22
   14128:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1412c:	e0bffd17 	ldw	r2,-12(fp)
   14130:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   14134:	e0bff817 	ldw	r2,-32(fp)
   14138:	10800808 	cmpgei	r2,r2,32
   1413c:	1000271e 	bne	r2,zero,141dc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14140:	0005303a 	rdctl	r2,status
   14144:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14148:	e0fffb17 	ldw	r3,-20(fp)
   1414c:	00bfff84 	movi	r2,-2
   14150:	1884703a 	and	r2,r3,r2
   14154:	1001703a 	wrctl	status,r2
  
  return context;
   14158:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1415c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   14160:	00800074 	movhi	r2,1
   14164:	1098b004 	addi	r2,r2,25280
   14168:	e0fff817 	ldw	r3,-32(fp)
   1416c:	180690fa 	slli	r3,r3,3
   14170:	10c5883a 	add	r2,r2,r3
   14174:	e0fffe17 	ldw	r3,-8(fp)
   14178:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1417c:	00800074 	movhi	r2,1
   14180:	1098b004 	addi	r2,r2,25280
   14184:	e0fff817 	ldw	r3,-32(fp)
   14188:	180690fa 	slli	r3,r3,3
   1418c:	10c5883a 	add	r2,r2,r3
   14190:	10800104 	addi	r2,r2,4
   14194:	e0ffff17 	ldw	r3,-4(fp)
   14198:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1419c:	e0bffe17 	ldw	r2,-8(fp)
   141a0:	10000526 	beq	r2,zero,141b8 <alt_iic_isr_register+0xb4>
   141a4:	e0bff817 	ldw	r2,-32(fp)
   141a8:	100b883a 	mov	r5,r2
   141ac:	e13ffc17 	ldw	r4,-16(fp)
   141b0:	0013fa40 	call	13fa4 <alt_ic_irq_enable>
   141b4:	00000406 	br	141c8 <alt_iic_isr_register+0xc4>
   141b8:	e0bff817 	ldw	r2,-32(fp)
   141bc:	100b883a 	mov	r5,r2
   141c0:	e13ffc17 	ldw	r4,-16(fp)
   141c4:	001402c0 	call	1402c <alt_ic_irq_disable>
   141c8:	e0bff715 	stw	r2,-36(fp)
   141cc:	e0bffa17 	ldw	r2,-24(fp)
   141d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   141d4:	e0bff917 	ldw	r2,-28(fp)
   141d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   141dc:	e0bff717 	ldw	r2,-36(fp)
}
   141e0:	e037883a 	mov	sp,fp
   141e4:	dfc00117 	ldw	ra,4(sp)
   141e8:	df000017 	ldw	fp,0(sp)
   141ec:	dec00204 	addi	sp,sp,8
   141f0:	f800283a 	ret

000141f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   141f4:	defff904 	addi	sp,sp,-28
   141f8:	dfc00615 	stw	ra,24(sp)
   141fc:	df000515 	stw	fp,20(sp)
   14200:	df000504 	addi	fp,sp,20
   14204:	e13ffc15 	stw	r4,-16(fp)
   14208:	e17ffd15 	stw	r5,-12(fp)
   1420c:	e1bffe15 	stw	r6,-8(fp)
   14210:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   14214:	e1bfff17 	ldw	r6,-4(fp)
   14218:	e17ffe17 	ldw	r5,-8(fp)
   1421c:	e13ffd17 	ldw	r4,-12(fp)
   14220:	00144340 	call	14434 <open>
   14224:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   14228:	e0bffb17 	ldw	r2,-20(fp)
   1422c:	10001c16 	blt	r2,zero,142a0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   14230:	00800074 	movhi	r2,1
   14234:	10959504 	addi	r2,r2,22100
   14238:	e0fffb17 	ldw	r3,-20(fp)
   1423c:	18c00324 	muli	r3,r3,12
   14240:	10c5883a 	add	r2,r2,r3
   14244:	10c00017 	ldw	r3,0(r2)
   14248:	e0bffc17 	ldw	r2,-16(fp)
   1424c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   14250:	00800074 	movhi	r2,1
   14254:	10959504 	addi	r2,r2,22100
   14258:	e0fffb17 	ldw	r3,-20(fp)
   1425c:	18c00324 	muli	r3,r3,12
   14260:	10c5883a 	add	r2,r2,r3
   14264:	10800104 	addi	r2,r2,4
   14268:	10c00017 	ldw	r3,0(r2)
   1426c:	e0bffc17 	ldw	r2,-16(fp)
   14270:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   14274:	00800074 	movhi	r2,1
   14278:	10959504 	addi	r2,r2,22100
   1427c:	e0fffb17 	ldw	r3,-20(fp)
   14280:	18c00324 	muli	r3,r3,12
   14284:	10c5883a 	add	r2,r2,r3
   14288:	10800204 	addi	r2,r2,8
   1428c:	10c00017 	ldw	r3,0(r2)
   14290:	e0bffc17 	ldw	r2,-16(fp)
   14294:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   14298:	e13ffb17 	ldw	r4,-20(fp)
   1429c:	00137040 	call	13704 <alt_release_fd>
  }
} 
   142a0:	0001883a 	nop
   142a4:	e037883a 	mov	sp,fp
   142a8:	dfc00117 	ldw	ra,4(sp)
   142ac:	df000017 	ldw	fp,0(sp)
   142b0:	dec00204 	addi	sp,sp,8
   142b4:	f800283a 	ret

000142b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   142b8:	defffb04 	addi	sp,sp,-20
   142bc:	dfc00415 	stw	ra,16(sp)
   142c0:	df000315 	stw	fp,12(sp)
   142c4:	df000304 	addi	fp,sp,12
   142c8:	e13ffd15 	stw	r4,-12(fp)
   142cc:	e17ffe15 	stw	r5,-8(fp)
   142d0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   142d4:	01c07fc4 	movi	r7,511
   142d8:	01800044 	movi	r6,1
   142dc:	e17ffd17 	ldw	r5,-12(fp)
   142e0:	01000074 	movhi	r4,1
   142e4:	21159804 	addi	r4,r4,22112
   142e8:	00141f40 	call	141f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   142ec:	01c07fc4 	movi	r7,511
   142f0:	000d883a 	mov	r6,zero
   142f4:	e17ffe17 	ldw	r5,-8(fp)
   142f8:	01000074 	movhi	r4,1
   142fc:	21159504 	addi	r4,r4,22100
   14300:	00141f40 	call	141f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   14304:	01c07fc4 	movi	r7,511
   14308:	01800044 	movi	r6,1
   1430c:	e17fff17 	ldw	r5,-4(fp)
   14310:	01000074 	movhi	r4,1
   14314:	21159b04 	addi	r4,r4,22124
   14318:	00141f40 	call	141f4 <alt_open_fd>
}  
   1431c:	0001883a 	nop
   14320:	e037883a 	mov	sp,fp
   14324:	dfc00117 	ldw	ra,4(sp)
   14328:	df000017 	ldw	fp,0(sp)
   1432c:	dec00204 	addi	sp,sp,8
   14330:	f800283a 	ret

00014334 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14334:	defffe04 	addi	sp,sp,-8
   14338:	dfc00115 	stw	ra,4(sp)
   1433c:	df000015 	stw	fp,0(sp)
   14340:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14344:	d0a00917 	ldw	r2,-32732(gp)
   14348:	10000326 	beq	r2,zero,14358 <alt_get_errno+0x24>
   1434c:	d0a00917 	ldw	r2,-32732(gp)
   14350:	103ee83a 	callr	r2
   14354:	00000106 	br	1435c <alt_get_errno+0x28>
   14358:	d0a29f04 	addi	r2,gp,-30084
}
   1435c:	e037883a 	mov	sp,fp
   14360:	dfc00117 	ldw	ra,4(sp)
   14364:	df000017 	ldw	fp,0(sp)
   14368:	dec00204 	addi	sp,sp,8
   1436c:	f800283a 	ret

00014370 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   14370:	defffd04 	addi	sp,sp,-12
   14374:	df000215 	stw	fp,8(sp)
   14378:	df000204 	addi	fp,sp,8
   1437c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   14380:	e0bfff17 	ldw	r2,-4(fp)
   14384:	10800217 	ldw	r2,8(r2)
   14388:	10d00034 	orhi	r3,r2,16384
   1438c:	e0bfff17 	ldw	r2,-4(fp)
   14390:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14394:	e03ffe15 	stw	zero,-8(fp)
   14398:	00001d06 	br	14410 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1439c:	00800074 	movhi	r2,1
   143a0:	10959504 	addi	r2,r2,22100
   143a4:	e0fffe17 	ldw	r3,-8(fp)
   143a8:	18c00324 	muli	r3,r3,12
   143ac:	10c5883a 	add	r2,r2,r3
   143b0:	10c00017 	ldw	r3,0(r2)
   143b4:	e0bfff17 	ldw	r2,-4(fp)
   143b8:	10800017 	ldw	r2,0(r2)
   143bc:	1880111e 	bne	r3,r2,14404 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   143c0:	00800074 	movhi	r2,1
   143c4:	10959504 	addi	r2,r2,22100
   143c8:	e0fffe17 	ldw	r3,-8(fp)
   143cc:	18c00324 	muli	r3,r3,12
   143d0:	10c5883a 	add	r2,r2,r3
   143d4:	10800204 	addi	r2,r2,8
   143d8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   143dc:	1000090e 	bge	r2,zero,14404 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   143e0:	e0bffe17 	ldw	r2,-8(fp)
   143e4:	10c00324 	muli	r3,r2,12
   143e8:	00800074 	movhi	r2,1
   143ec:	10959504 	addi	r2,r2,22100
   143f0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   143f4:	e0bfff17 	ldw	r2,-4(fp)
   143f8:	18800226 	beq	r3,r2,14404 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   143fc:	00bffcc4 	movi	r2,-13
   14400:	00000806 	br	14424 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14404:	e0bffe17 	ldw	r2,-8(fp)
   14408:	10800044 	addi	r2,r2,1
   1440c:	e0bffe15 	stw	r2,-8(fp)
   14410:	d0a00817 	ldw	r2,-32736(gp)
   14414:	1007883a 	mov	r3,r2
   14418:	e0bffe17 	ldw	r2,-8(fp)
   1441c:	18bfdf2e 	bgeu	r3,r2,1439c <__alt_data_end+0xffff439c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   14420:	0005883a 	mov	r2,zero
}
   14424:	e037883a 	mov	sp,fp
   14428:	df000017 	ldw	fp,0(sp)
   1442c:	dec00104 	addi	sp,sp,4
   14430:	f800283a 	ret

00014434 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   14434:	defff604 	addi	sp,sp,-40
   14438:	dfc00915 	stw	ra,36(sp)
   1443c:	df000815 	stw	fp,32(sp)
   14440:	df000804 	addi	fp,sp,32
   14444:	e13ffd15 	stw	r4,-12(fp)
   14448:	e17ffe15 	stw	r5,-8(fp)
   1444c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   14450:	00bfffc4 	movi	r2,-1
   14454:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   14458:	00bffb44 	movi	r2,-19
   1445c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   14460:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   14464:	d1600604 	addi	r5,gp,-32744
   14468:	e13ffd17 	ldw	r4,-12(fp)
   1446c:	00147500 	call	14750 <alt_find_dev>
   14470:	e0bff815 	stw	r2,-32(fp)
   14474:	e0bff817 	ldw	r2,-32(fp)
   14478:	1000051e 	bne	r2,zero,14490 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1447c:	e13ffd17 	ldw	r4,-12(fp)
   14480:	00147e00 	call	147e0 <alt_find_file>
   14484:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   14488:	00800044 	movi	r2,1
   1448c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   14490:	e0bff817 	ldw	r2,-32(fp)
   14494:	10002926 	beq	r2,zero,1453c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   14498:	e13ff817 	ldw	r4,-32(fp)
   1449c:	00148e80 	call	148e8 <alt_get_fd>
   144a0:	e0bff915 	stw	r2,-28(fp)
   144a4:	e0bff917 	ldw	r2,-28(fp)
   144a8:	1000030e 	bge	r2,zero,144b8 <open+0x84>
    {
      status = index;
   144ac:	e0bff917 	ldw	r2,-28(fp)
   144b0:	e0bffa15 	stw	r2,-24(fp)
   144b4:	00002306 	br	14544 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   144b8:	e0bff917 	ldw	r2,-28(fp)
   144bc:	10c00324 	muli	r3,r2,12
   144c0:	00800074 	movhi	r2,1
   144c4:	10959504 	addi	r2,r2,22100
   144c8:	1885883a 	add	r2,r3,r2
   144cc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   144d0:	e0fffe17 	ldw	r3,-8(fp)
   144d4:	00900034 	movhi	r2,16384
   144d8:	10bfffc4 	addi	r2,r2,-1
   144dc:	1886703a 	and	r3,r3,r2
   144e0:	e0bffc17 	ldw	r2,-16(fp)
   144e4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   144e8:	e0bffb17 	ldw	r2,-20(fp)
   144ec:	1000051e 	bne	r2,zero,14504 <open+0xd0>
   144f0:	e13ffc17 	ldw	r4,-16(fp)
   144f4:	00143700 	call	14370 <alt_file_locked>
   144f8:	e0bffa15 	stw	r2,-24(fp)
   144fc:	e0bffa17 	ldw	r2,-24(fp)
   14500:	10001016 	blt	r2,zero,14544 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   14504:	e0bff817 	ldw	r2,-32(fp)
   14508:	10800317 	ldw	r2,12(r2)
   1450c:	10000826 	beq	r2,zero,14530 <open+0xfc>
   14510:	e0bff817 	ldw	r2,-32(fp)
   14514:	10800317 	ldw	r2,12(r2)
   14518:	e1ffff17 	ldw	r7,-4(fp)
   1451c:	e1bffe17 	ldw	r6,-8(fp)
   14520:	e17ffd17 	ldw	r5,-12(fp)
   14524:	e13ffc17 	ldw	r4,-16(fp)
   14528:	103ee83a 	callr	r2
   1452c:	00000106 	br	14534 <open+0x100>
   14530:	0005883a 	mov	r2,zero
   14534:	e0bffa15 	stw	r2,-24(fp)
   14538:	00000206 	br	14544 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1453c:	00bffb44 	movi	r2,-19
   14540:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   14544:	e0bffa17 	ldw	r2,-24(fp)
   14548:	1000090e 	bge	r2,zero,14570 <open+0x13c>
  {
    alt_release_fd (index);  
   1454c:	e13ff917 	ldw	r4,-28(fp)
   14550:	00137040 	call	13704 <alt_release_fd>
    ALT_ERRNO = -status;
   14554:	00143340 	call	14334 <alt_get_errno>
   14558:	1007883a 	mov	r3,r2
   1455c:	e0bffa17 	ldw	r2,-24(fp)
   14560:	0085c83a 	sub	r2,zero,r2
   14564:	18800015 	stw	r2,0(r3)
    return -1;
   14568:	00bfffc4 	movi	r2,-1
   1456c:	00000106 	br	14574 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   14570:	e0bff917 	ldw	r2,-28(fp)
}
   14574:	e037883a 	mov	sp,fp
   14578:	dfc00117 	ldw	ra,4(sp)
   1457c:	df000017 	ldw	fp,0(sp)
   14580:	dec00204 	addi	sp,sp,8
   14584:	f800283a 	ret

00014588 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   14588:	defffa04 	addi	sp,sp,-24
   1458c:	df000515 	stw	fp,20(sp)
   14590:	df000504 	addi	fp,sp,20
   14594:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14598:	0005303a 	rdctl	r2,status
   1459c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   145a0:	e0fffc17 	ldw	r3,-16(fp)
   145a4:	00bfff84 	movi	r2,-2
   145a8:	1884703a 	and	r2,r3,r2
   145ac:	1001703a 	wrctl	status,r2
  
  return context;
   145b0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   145b4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   145b8:	e0bfff17 	ldw	r2,-4(fp)
   145bc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   145c0:	e0bffd17 	ldw	r2,-12(fp)
   145c4:	10800017 	ldw	r2,0(r2)
   145c8:	e0fffd17 	ldw	r3,-12(fp)
   145cc:	18c00117 	ldw	r3,4(r3)
   145d0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   145d4:	e0bffd17 	ldw	r2,-12(fp)
   145d8:	10800117 	ldw	r2,4(r2)
   145dc:	e0fffd17 	ldw	r3,-12(fp)
   145e0:	18c00017 	ldw	r3,0(r3)
   145e4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   145e8:	e0bffd17 	ldw	r2,-12(fp)
   145ec:	e0fffd17 	ldw	r3,-12(fp)
   145f0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   145f4:	e0bffd17 	ldw	r2,-12(fp)
   145f8:	e0fffd17 	ldw	r3,-12(fp)
   145fc:	10c00015 	stw	r3,0(r2)
   14600:	e0bffb17 	ldw	r2,-20(fp)
   14604:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14608:	e0bffe17 	ldw	r2,-8(fp)
   1460c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   14610:	0001883a 	nop
   14614:	e037883a 	mov	sp,fp
   14618:	df000017 	ldw	fp,0(sp)
   1461c:	dec00104 	addi	sp,sp,4
   14620:	f800283a 	ret

00014624 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   14624:	defffb04 	addi	sp,sp,-20
   14628:	dfc00415 	stw	ra,16(sp)
   1462c:	df000315 	stw	fp,12(sp)
   14630:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   14634:	d0a00c17 	ldw	r2,-32720(gp)
   14638:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1463c:	d0a2a517 	ldw	r2,-30060(gp)
   14640:	10800044 	addi	r2,r2,1
   14644:	d0a2a515 	stw	r2,-30060(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14648:	00002e06 	br	14704 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1464c:	e0bffd17 	ldw	r2,-12(fp)
   14650:	10800017 	ldw	r2,0(r2)
   14654:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   14658:	e0bffd17 	ldw	r2,-12(fp)
   1465c:	10800403 	ldbu	r2,16(r2)
   14660:	10803fcc 	andi	r2,r2,255
   14664:	10000426 	beq	r2,zero,14678 <alt_tick+0x54>
   14668:	d0a2a517 	ldw	r2,-30060(gp)
   1466c:	1000021e 	bne	r2,zero,14678 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   14670:	e0bffd17 	ldw	r2,-12(fp)
   14674:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   14678:	e0bffd17 	ldw	r2,-12(fp)
   1467c:	10800217 	ldw	r2,8(r2)
   14680:	d0e2a517 	ldw	r3,-30060(gp)
   14684:	18801d36 	bltu	r3,r2,146fc <alt_tick+0xd8>
   14688:	e0bffd17 	ldw	r2,-12(fp)
   1468c:	10800403 	ldbu	r2,16(r2)
   14690:	10803fcc 	andi	r2,r2,255
   14694:	1000191e 	bne	r2,zero,146fc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   14698:	e0bffd17 	ldw	r2,-12(fp)
   1469c:	10800317 	ldw	r2,12(r2)
   146a0:	e0fffd17 	ldw	r3,-12(fp)
   146a4:	18c00517 	ldw	r3,20(r3)
   146a8:	1809883a 	mov	r4,r3
   146ac:	103ee83a 	callr	r2
   146b0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   146b4:	e0bfff17 	ldw	r2,-4(fp)
   146b8:	1000031e 	bne	r2,zero,146c8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   146bc:	e13ffd17 	ldw	r4,-12(fp)
   146c0:	00145880 	call	14588 <alt_alarm_stop>
   146c4:	00000d06 	br	146fc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   146c8:	e0bffd17 	ldw	r2,-12(fp)
   146cc:	10c00217 	ldw	r3,8(r2)
   146d0:	e0bfff17 	ldw	r2,-4(fp)
   146d4:	1887883a 	add	r3,r3,r2
   146d8:	e0bffd17 	ldw	r2,-12(fp)
   146dc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   146e0:	e0bffd17 	ldw	r2,-12(fp)
   146e4:	10c00217 	ldw	r3,8(r2)
   146e8:	d0a2a517 	ldw	r2,-30060(gp)
   146ec:	1880032e 	bgeu	r3,r2,146fc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   146f0:	e0bffd17 	ldw	r2,-12(fp)
   146f4:	00c00044 	movi	r3,1
   146f8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   146fc:	e0bffe17 	ldw	r2,-8(fp)
   14700:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   14704:	e0fffd17 	ldw	r3,-12(fp)
   14708:	d0a00c04 	addi	r2,gp,-32720
   1470c:	18bfcf1e 	bne	r3,r2,1464c <__alt_data_end+0xffff464c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   14710:	0001883a 	nop
}
   14714:	0001883a 	nop
   14718:	e037883a 	mov	sp,fp
   1471c:	dfc00117 	ldw	ra,4(sp)
   14720:	df000017 	ldw	fp,0(sp)
   14724:	dec00204 	addi	sp,sp,8
   14728:	f800283a 	ret

0001472c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   1472c:	deffff04 	addi	sp,sp,-4
   14730:	df000015 	stw	fp,0(sp)
   14734:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   14738:	000170fa 	wrctl	ienable,zero
}
   1473c:	0001883a 	nop
   14740:	e037883a 	mov	sp,fp
   14744:	df000017 	ldw	fp,0(sp)
   14748:	dec00104 	addi	sp,sp,4
   1474c:	f800283a 	ret

00014750 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   14750:	defffa04 	addi	sp,sp,-24
   14754:	dfc00515 	stw	ra,20(sp)
   14758:	df000415 	stw	fp,16(sp)
   1475c:	df000404 	addi	fp,sp,16
   14760:	e13ffe15 	stw	r4,-8(fp)
   14764:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   14768:	e0bfff17 	ldw	r2,-4(fp)
   1476c:	10800017 	ldw	r2,0(r2)
   14770:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   14774:	e13ffe17 	ldw	r4,-8(fp)
   14778:	00103140 	call	10314 <strlen>
   1477c:	10800044 	addi	r2,r2,1
   14780:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   14784:	00000d06 	br	147bc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   14788:	e0bffc17 	ldw	r2,-16(fp)
   1478c:	10800217 	ldw	r2,8(r2)
   14790:	e0fffd17 	ldw	r3,-12(fp)
   14794:	180d883a 	mov	r6,r3
   14798:	e17ffe17 	ldw	r5,-8(fp)
   1479c:	1009883a 	mov	r4,r2
   147a0:	0014a680 	call	14a68 <memcmp>
   147a4:	1000021e 	bne	r2,zero,147b0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   147a8:	e0bffc17 	ldw	r2,-16(fp)
   147ac:	00000706 	br	147cc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   147b0:	e0bffc17 	ldw	r2,-16(fp)
   147b4:	10800017 	ldw	r2,0(r2)
   147b8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   147bc:	e0fffc17 	ldw	r3,-16(fp)
   147c0:	e0bfff17 	ldw	r2,-4(fp)
   147c4:	18bff01e 	bne	r3,r2,14788 <__alt_data_end+0xffff4788>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   147c8:	0005883a 	mov	r2,zero
}
   147cc:	e037883a 	mov	sp,fp
   147d0:	dfc00117 	ldw	ra,4(sp)
   147d4:	df000017 	ldw	fp,0(sp)
   147d8:	dec00204 	addi	sp,sp,8
   147dc:	f800283a 	ret

000147e0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   147e0:	defffb04 	addi	sp,sp,-20
   147e4:	dfc00415 	stw	ra,16(sp)
   147e8:	df000315 	stw	fp,12(sp)
   147ec:	df000304 	addi	fp,sp,12
   147f0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   147f4:	d0a00417 	ldw	r2,-32752(gp)
   147f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   147fc:	00003106 	br	148c4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   14800:	e0bffd17 	ldw	r2,-12(fp)
   14804:	10800217 	ldw	r2,8(r2)
   14808:	1009883a 	mov	r4,r2
   1480c:	00103140 	call	10314 <strlen>
   14810:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   14814:	e0bffd17 	ldw	r2,-12(fp)
   14818:	10c00217 	ldw	r3,8(r2)
   1481c:	e0bffe17 	ldw	r2,-8(fp)
   14820:	10bfffc4 	addi	r2,r2,-1
   14824:	1885883a 	add	r2,r3,r2
   14828:	10800003 	ldbu	r2,0(r2)
   1482c:	10803fcc 	andi	r2,r2,255
   14830:	1080201c 	xori	r2,r2,128
   14834:	10bfe004 	addi	r2,r2,-128
   14838:	10800bd8 	cmpnei	r2,r2,47
   1483c:	1000031e 	bne	r2,zero,1484c <alt_find_file+0x6c>
    {
      len -= 1;
   14840:	e0bffe17 	ldw	r2,-8(fp)
   14844:	10bfffc4 	addi	r2,r2,-1
   14848:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1484c:	e0bffe17 	ldw	r2,-8(fp)
   14850:	e0ffff17 	ldw	r3,-4(fp)
   14854:	1885883a 	add	r2,r3,r2
   14858:	10800003 	ldbu	r2,0(r2)
   1485c:	10803fcc 	andi	r2,r2,255
   14860:	1080201c 	xori	r2,r2,128
   14864:	10bfe004 	addi	r2,r2,-128
   14868:	10800be0 	cmpeqi	r2,r2,47
   1486c:	1000081e 	bne	r2,zero,14890 <alt_find_file+0xb0>
   14870:	e0bffe17 	ldw	r2,-8(fp)
   14874:	e0ffff17 	ldw	r3,-4(fp)
   14878:	1885883a 	add	r2,r3,r2
   1487c:	10800003 	ldbu	r2,0(r2)
   14880:	10803fcc 	andi	r2,r2,255
   14884:	1080201c 	xori	r2,r2,128
   14888:	10bfe004 	addi	r2,r2,-128
   1488c:	10000a1e 	bne	r2,zero,148b8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   14890:	e0bffd17 	ldw	r2,-12(fp)
   14894:	10800217 	ldw	r2,8(r2)
   14898:	e0fffe17 	ldw	r3,-8(fp)
   1489c:	180d883a 	mov	r6,r3
   148a0:	e17fff17 	ldw	r5,-4(fp)
   148a4:	1009883a 	mov	r4,r2
   148a8:	0014a680 	call	14a68 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   148ac:	1000021e 	bne	r2,zero,148b8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   148b0:	e0bffd17 	ldw	r2,-12(fp)
   148b4:	00000706 	br	148d4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   148b8:	e0bffd17 	ldw	r2,-12(fp)
   148bc:	10800017 	ldw	r2,0(r2)
   148c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   148c4:	e0fffd17 	ldw	r3,-12(fp)
   148c8:	d0a00404 	addi	r2,gp,-32752
   148cc:	18bfcc1e 	bne	r3,r2,14800 <__alt_data_end+0xffff4800>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   148d0:	0005883a 	mov	r2,zero
}
   148d4:	e037883a 	mov	sp,fp
   148d8:	dfc00117 	ldw	ra,4(sp)
   148dc:	df000017 	ldw	fp,0(sp)
   148e0:	dec00204 	addi	sp,sp,8
   148e4:	f800283a 	ret

000148e8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   148e8:	defffc04 	addi	sp,sp,-16
   148ec:	df000315 	stw	fp,12(sp)
   148f0:	df000304 	addi	fp,sp,12
   148f4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   148f8:	00bffa04 	movi	r2,-24
   148fc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   14900:	e03ffd15 	stw	zero,-12(fp)
   14904:	00001906 	br	1496c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   14908:	00800074 	movhi	r2,1
   1490c:	10959504 	addi	r2,r2,22100
   14910:	e0fffd17 	ldw	r3,-12(fp)
   14914:	18c00324 	muli	r3,r3,12
   14918:	10c5883a 	add	r2,r2,r3
   1491c:	10800017 	ldw	r2,0(r2)
   14920:	10000f1e 	bne	r2,zero,14960 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   14924:	00800074 	movhi	r2,1
   14928:	10959504 	addi	r2,r2,22100
   1492c:	e0fffd17 	ldw	r3,-12(fp)
   14930:	18c00324 	muli	r3,r3,12
   14934:	10c5883a 	add	r2,r2,r3
   14938:	e0ffff17 	ldw	r3,-4(fp)
   1493c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   14940:	d0e00817 	ldw	r3,-32736(gp)
   14944:	e0bffd17 	ldw	r2,-12(fp)
   14948:	1880020e 	bge	r3,r2,14954 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   1494c:	e0bffd17 	ldw	r2,-12(fp)
   14950:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   14954:	e0bffd17 	ldw	r2,-12(fp)
   14958:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   1495c:	00000606 	br	14978 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   14960:	e0bffd17 	ldw	r2,-12(fp)
   14964:	10800044 	addi	r2,r2,1
   14968:	e0bffd15 	stw	r2,-12(fp)
   1496c:	e0bffd17 	ldw	r2,-12(fp)
   14970:	10800810 	cmplti	r2,r2,32
   14974:	103fe41e 	bne	r2,zero,14908 <__alt_data_end+0xffff4908>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   14978:	e0bffe17 	ldw	r2,-8(fp)
}
   1497c:	e037883a 	mov	sp,fp
   14980:	df000017 	ldw	fp,0(sp)
   14984:	dec00104 	addi	sp,sp,4
   14988:	f800283a 	ret

0001498c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1498c:	defffb04 	addi	sp,sp,-20
   14990:	df000415 	stw	fp,16(sp)
   14994:	df000404 	addi	fp,sp,16
   14998:	e13ffe15 	stw	r4,-8(fp)
   1499c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   149a0:	e0bfff17 	ldw	r2,-4(fp)
   149a4:	10840070 	cmpltui	r2,r2,4097
   149a8:	1000021e 	bne	r2,zero,149b4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   149ac:	00840004 	movi	r2,4096
   149b0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   149b4:	e0fffe17 	ldw	r3,-8(fp)
   149b8:	e0bfff17 	ldw	r2,-4(fp)
   149bc:	1885883a 	add	r2,r3,r2
   149c0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   149c4:	e0bffe17 	ldw	r2,-8(fp)
   149c8:	e0bffc15 	stw	r2,-16(fp)
   149cc:	00000506 	br	149e4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   149d0:	e0bffc17 	ldw	r2,-16(fp)
   149d4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   149d8:	e0bffc17 	ldw	r2,-16(fp)
   149dc:	10800804 	addi	r2,r2,32
   149e0:	e0bffc15 	stw	r2,-16(fp)
   149e4:	e0fffc17 	ldw	r3,-16(fp)
   149e8:	e0bffd17 	ldw	r2,-12(fp)
   149ec:	18bff836 	bltu	r3,r2,149d0 <__alt_data_end+0xffff49d0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   149f0:	e0bffe17 	ldw	r2,-8(fp)
   149f4:	108007cc 	andi	r2,r2,31
   149f8:	10000226 	beq	r2,zero,14a04 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   149fc:	e0bffc17 	ldw	r2,-16(fp)
   14a00:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   14a04:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   14a08:	0001883a 	nop
   14a0c:	e037883a 	mov	sp,fp
   14a10:	df000017 	ldw	fp,0(sp)
   14a14:	dec00104 	addi	sp,sp,4
   14a18:	f800283a 	ret

00014a1c <atexit>:
   14a1c:	200b883a 	mov	r5,r4
   14a20:	000f883a 	mov	r7,zero
   14a24:	000d883a 	mov	r6,zero
   14a28:	0009883a 	mov	r4,zero
   14a2c:	0014ae41 	jmpi	14ae4 <__register_exitproc>

00014a30 <exit>:
   14a30:	defffe04 	addi	sp,sp,-8
   14a34:	000b883a 	mov	r5,zero
   14a38:	dc000015 	stw	r16,0(sp)
   14a3c:	dfc00115 	stw	ra,4(sp)
   14a40:	2021883a 	mov	r16,r4
   14a44:	0014bfc0 	call	14bfc <__call_exitprocs>
   14a48:	00800074 	movhi	r2,1
   14a4c:	10960004 	addi	r2,r2,22528
   14a50:	11000017 	ldw	r4,0(r2)
   14a54:	20800f17 	ldw	r2,60(r4)
   14a58:	10000126 	beq	r2,zero,14a60 <exit+0x30>
   14a5c:	103ee83a 	callr	r2
   14a60:	8009883a 	mov	r4,r16
   14a64:	0014d7c0 	call	14d7c <_exit>

00014a68 <memcmp>:
   14a68:	01c000c4 	movi	r7,3
   14a6c:	3980192e 	bgeu	r7,r6,14ad4 <memcmp+0x6c>
   14a70:	2144b03a 	or	r2,r4,r5
   14a74:	11c4703a 	and	r2,r2,r7
   14a78:	10000f26 	beq	r2,zero,14ab8 <memcmp+0x50>
   14a7c:	20800003 	ldbu	r2,0(r4)
   14a80:	28c00003 	ldbu	r3,0(r5)
   14a84:	10c0151e 	bne	r2,r3,14adc <memcmp+0x74>
   14a88:	31bfff84 	addi	r6,r6,-2
   14a8c:	01ffffc4 	movi	r7,-1
   14a90:	00000406 	br	14aa4 <memcmp+0x3c>
   14a94:	20800003 	ldbu	r2,0(r4)
   14a98:	28c00003 	ldbu	r3,0(r5)
   14a9c:	31bfffc4 	addi	r6,r6,-1
   14aa0:	10c00e1e 	bne	r2,r3,14adc <memcmp+0x74>
   14aa4:	21000044 	addi	r4,r4,1
   14aa8:	29400044 	addi	r5,r5,1
   14aac:	31fff91e 	bne	r6,r7,14a94 <__alt_data_end+0xffff4a94>
   14ab0:	0005883a 	mov	r2,zero
   14ab4:	f800283a 	ret
   14ab8:	20c00017 	ldw	r3,0(r4)
   14abc:	28800017 	ldw	r2,0(r5)
   14ac0:	18bfee1e 	bne	r3,r2,14a7c <__alt_data_end+0xffff4a7c>
   14ac4:	31bfff04 	addi	r6,r6,-4
   14ac8:	21000104 	addi	r4,r4,4
   14acc:	29400104 	addi	r5,r5,4
   14ad0:	39bff936 	bltu	r7,r6,14ab8 <__alt_data_end+0xffff4ab8>
   14ad4:	303fe91e 	bne	r6,zero,14a7c <__alt_data_end+0xffff4a7c>
   14ad8:	003ff506 	br	14ab0 <__alt_data_end+0xffff4ab0>
   14adc:	10c5c83a 	sub	r2,r2,r3
   14ae0:	f800283a 	ret

00014ae4 <__register_exitproc>:
   14ae4:	defffa04 	addi	sp,sp,-24
   14ae8:	dc000315 	stw	r16,12(sp)
   14aec:	04000074 	movhi	r16,1
   14af0:	84160004 	addi	r16,r16,22528
   14af4:	80c00017 	ldw	r3,0(r16)
   14af8:	dc400415 	stw	r17,16(sp)
   14afc:	dfc00515 	stw	ra,20(sp)
   14b00:	18805217 	ldw	r2,328(r3)
   14b04:	2023883a 	mov	r17,r4
   14b08:	10003726 	beq	r2,zero,14be8 <__register_exitproc+0x104>
   14b0c:	10c00117 	ldw	r3,4(r2)
   14b10:	010007c4 	movi	r4,31
   14b14:	20c00e16 	blt	r4,r3,14b50 <__register_exitproc+0x6c>
   14b18:	1a000044 	addi	r8,r3,1
   14b1c:	8800221e 	bne	r17,zero,14ba8 <__register_exitproc+0xc4>
   14b20:	18c00084 	addi	r3,r3,2
   14b24:	18c7883a 	add	r3,r3,r3
   14b28:	18c7883a 	add	r3,r3,r3
   14b2c:	12000115 	stw	r8,4(r2)
   14b30:	10c7883a 	add	r3,r2,r3
   14b34:	19400015 	stw	r5,0(r3)
   14b38:	0005883a 	mov	r2,zero
   14b3c:	dfc00517 	ldw	ra,20(sp)
   14b40:	dc400417 	ldw	r17,16(sp)
   14b44:	dc000317 	ldw	r16,12(sp)
   14b48:	dec00604 	addi	sp,sp,24
   14b4c:	f800283a 	ret
   14b50:	00800034 	movhi	r2,0
   14b54:	10800004 	addi	r2,r2,0
   14b58:	10002626 	beq	r2,zero,14bf4 <__register_exitproc+0x110>
   14b5c:	01006404 	movi	r4,400
   14b60:	d9400015 	stw	r5,0(sp)
   14b64:	d9800115 	stw	r6,4(sp)
   14b68:	d9c00215 	stw	r7,8(sp)
   14b6c:	00000000 	call	0 <__reset-0x10000>
   14b70:	d9400017 	ldw	r5,0(sp)
   14b74:	d9800117 	ldw	r6,4(sp)
   14b78:	d9c00217 	ldw	r7,8(sp)
   14b7c:	10001d26 	beq	r2,zero,14bf4 <__register_exitproc+0x110>
   14b80:	81000017 	ldw	r4,0(r16)
   14b84:	10000115 	stw	zero,4(r2)
   14b88:	02000044 	movi	r8,1
   14b8c:	22405217 	ldw	r9,328(r4)
   14b90:	0007883a 	mov	r3,zero
   14b94:	12400015 	stw	r9,0(r2)
   14b98:	20805215 	stw	r2,328(r4)
   14b9c:	10006215 	stw	zero,392(r2)
   14ba0:	10006315 	stw	zero,396(r2)
   14ba4:	883fde26 	beq	r17,zero,14b20 <__alt_data_end+0xffff4b20>
   14ba8:	18c9883a 	add	r4,r3,r3
   14bac:	2109883a 	add	r4,r4,r4
   14bb0:	1109883a 	add	r4,r2,r4
   14bb4:	21802215 	stw	r6,136(r4)
   14bb8:	01800044 	movi	r6,1
   14bbc:	12406217 	ldw	r9,392(r2)
   14bc0:	30cc983a 	sll	r6,r6,r3
   14bc4:	4992b03a 	or	r9,r9,r6
   14bc8:	12406215 	stw	r9,392(r2)
   14bcc:	21c04215 	stw	r7,264(r4)
   14bd0:	01000084 	movi	r4,2
   14bd4:	893fd21e 	bne	r17,r4,14b20 <__alt_data_end+0xffff4b20>
   14bd8:	11006317 	ldw	r4,396(r2)
   14bdc:	218cb03a 	or	r6,r4,r6
   14be0:	11806315 	stw	r6,396(r2)
   14be4:	003fce06 	br	14b20 <__alt_data_end+0xffff4b20>
   14be8:	18805304 	addi	r2,r3,332
   14bec:	18805215 	stw	r2,328(r3)
   14bf0:	003fc606 	br	14b0c <__alt_data_end+0xffff4b0c>
   14bf4:	00bfffc4 	movi	r2,-1
   14bf8:	003fd006 	br	14b3c <__alt_data_end+0xffff4b3c>

00014bfc <__call_exitprocs>:
   14bfc:	defff504 	addi	sp,sp,-44
   14c00:	df000915 	stw	fp,36(sp)
   14c04:	dd400615 	stw	r21,24(sp)
   14c08:	dc800315 	stw	r18,12(sp)
   14c0c:	dfc00a15 	stw	ra,40(sp)
   14c10:	ddc00815 	stw	r23,32(sp)
   14c14:	dd800715 	stw	r22,28(sp)
   14c18:	dd000515 	stw	r20,20(sp)
   14c1c:	dcc00415 	stw	r19,16(sp)
   14c20:	dc400215 	stw	r17,8(sp)
   14c24:	dc000115 	stw	r16,4(sp)
   14c28:	d9000015 	stw	r4,0(sp)
   14c2c:	2839883a 	mov	fp,r5
   14c30:	04800044 	movi	r18,1
   14c34:	057fffc4 	movi	r21,-1
   14c38:	00800074 	movhi	r2,1
   14c3c:	10960004 	addi	r2,r2,22528
   14c40:	12000017 	ldw	r8,0(r2)
   14c44:	45005217 	ldw	r20,328(r8)
   14c48:	44c05204 	addi	r19,r8,328
   14c4c:	a0001c26 	beq	r20,zero,14cc0 <__call_exitprocs+0xc4>
   14c50:	a0800117 	ldw	r2,4(r20)
   14c54:	15ffffc4 	addi	r23,r2,-1
   14c58:	b8000d16 	blt	r23,zero,14c90 <__call_exitprocs+0x94>
   14c5c:	14000044 	addi	r16,r2,1
   14c60:	8421883a 	add	r16,r16,r16
   14c64:	8421883a 	add	r16,r16,r16
   14c68:	84402004 	addi	r17,r16,128
   14c6c:	a463883a 	add	r17,r20,r17
   14c70:	a421883a 	add	r16,r20,r16
   14c74:	e0001e26 	beq	fp,zero,14cf0 <__call_exitprocs+0xf4>
   14c78:	80804017 	ldw	r2,256(r16)
   14c7c:	e0801c26 	beq	fp,r2,14cf0 <__call_exitprocs+0xf4>
   14c80:	bdffffc4 	addi	r23,r23,-1
   14c84:	843fff04 	addi	r16,r16,-4
   14c88:	8c7fff04 	addi	r17,r17,-4
   14c8c:	bd7ff91e 	bne	r23,r21,14c74 <__alt_data_end+0xffff4c74>
   14c90:	00800034 	movhi	r2,0
   14c94:	10800004 	addi	r2,r2,0
   14c98:	10000926 	beq	r2,zero,14cc0 <__call_exitprocs+0xc4>
   14c9c:	a0800117 	ldw	r2,4(r20)
   14ca0:	1000301e 	bne	r2,zero,14d64 <__call_exitprocs+0x168>
   14ca4:	a0800017 	ldw	r2,0(r20)
   14ca8:	10003226 	beq	r2,zero,14d74 <__call_exitprocs+0x178>
   14cac:	a009883a 	mov	r4,r20
   14cb0:	98800015 	stw	r2,0(r19)
   14cb4:	00000000 	call	0 <__reset-0x10000>
   14cb8:	9d000017 	ldw	r20,0(r19)
   14cbc:	a03fe41e 	bne	r20,zero,14c50 <__alt_data_end+0xffff4c50>
   14cc0:	dfc00a17 	ldw	ra,40(sp)
   14cc4:	df000917 	ldw	fp,36(sp)
   14cc8:	ddc00817 	ldw	r23,32(sp)
   14ccc:	dd800717 	ldw	r22,28(sp)
   14cd0:	dd400617 	ldw	r21,24(sp)
   14cd4:	dd000517 	ldw	r20,20(sp)
   14cd8:	dcc00417 	ldw	r19,16(sp)
   14cdc:	dc800317 	ldw	r18,12(sp)
   14ce0:	dc400217 	ldw	r17,8(sp)
   14ce4:	dc000117 	ldw	r16,4(sp)
   14ce8:	dec00b04 	addi	sp,sp,44
   14cec:	f800283a 	ret
   14cf0:	a0800117 	ldw	r2,4(r20)
   14cf4:	80c00017 	ldw	r3,0(r16)
   14cf8:	10bfffc4 	addi	r2,r2,-1
   14cfc:	15c01426 	beq	r2,r23,14d50 <__call_exitprocs+0x154>
   14d00:	80000015 	stw	zero,0(r16)
   14d04:	183fde26 	beq	r3,zero,14c80 <__alt_data_end+0xffff4c80>
   14d08:	95c8983a 	sll	r4,r18,r23
   14d0c:	a0806217 	ldw	r2,392(r20)
   14d10:	a5800117 	ldw	r22,4(r20)
   14d14:	2084703a 	and	r2,r4,r2
   14d18:	10000b26 	beq	r2,zero,14d48 <__call_exitprocs+0x14c>
   14d1c:	a0806317 	ldw	r2,396(r20)
   14d20:	2088703a 	and	r4,r4,r2
   14d24:	20000c1e 	bne	r4,zero,14d58 <__call_exitprocs+0x15c>
   14d28:	89400017 	ldw	r5,0(r17)
   14d2c:	d9000017 	ldw	r4,0(sp)
   14d30:	183ee83a 	callr	r3
   14d34:	a0800117 	ldw	r2,4(r20)
   14d38:	15bfbf1e 	bne	r2,r22,14c38 <__alt_data_end+0xffff4c38>
   14d3c:	98800017 	ldw	r2,0(r19)
   14d40:	153fcf26 	beq	r2,r20,14c80 <__alt_data_end+0xffff4c80>
   14d44:	003fbc06 	br	14c38 <__alt_data_end+0xffff4c38>
   14d48:	183ee83a 	callr	r3
   14d4c:	003ff906 	br	14d34 <__alt_data_end+0xffff4d34>
   14d50:	a5c00115 	stw	r23,4(r20)
   14d54:	003feb06 	br	14d04 <__alt_data_end+0xffff4d04>
   14d58:	89000017 	ldw	r4,0(r17)
   14d5c:	183ee83a 	callr	r3
   14d60:	003ff406 	br	14d34 <__alt_data_end+0xffff4d34>
   14d64:	a0800017 	ldw	r2,0(r20)
   14d68:	a027883a 	mov	r19,r20
   14d6c:	1029883a 	mov	r20,r2
   14d70:	003fb606 	br	14c4c <__alt_data_end+0xffff4c4c>
   14d74:	0005883a 	mov	r2,zero
   14d78:	003ffb06 	br	14d68 <__alt_data_end+0xffff4d68>

00014d7c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   14d7c:	defffd04 	addi	sp,sp,-12
   14d80:	df000215 	stw	fp,8(sp)
   14d84:	df000204 	addi	fp,sp,8
   14d88:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   14d8c:	0001883a 	nop
   14d90:	e0bfff17 	ldw	r2,-4(fp)
   14d94:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   14d98:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   14d9c:	10000226 	beq	r2,zero,14da8 <_exit+0x2c>
    ALT_SIM_FAIL();
   14da0:	002af070 	cmpltui	zero,zero,43969
   14da4:	00000106 	br	14dac <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   14da8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   14dac:	003fff06 	br	14dac <__alt_data_end+0xffff4dac>
